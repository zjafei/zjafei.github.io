{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.507b3a.css","path":"main.507b3a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.fdc4b7.js","path":"mobile.fdc4b7.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.507b3a.js","path":"main.507b3a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1509929932199},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1509929932199},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1509929932199},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1509929932199},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1509929932199},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1509929932199},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1509929932199},{"_id":"themes/yilia/_config.yml","hash":"a198673c32b317bfdc74b49e7adbf047b734c539","modified":1509931038000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1509929932203},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1509929932207},{"_id":"source/_posts/webpack的shimming的翻译.md","hash":"3f39ac7fce545bc44fdb17a5986bee8abc71be2b","modified":1509931726000},{"_id":"source/_posts/webpack的常用插件.md","hash":"3d1fd3cfbe950d9c51fd12b0f9366cd9983a8176","modified":1509964764000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1509929932199},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1509929932199},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1509929932199},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1509929932199},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1509929932199},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1509929932199},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1509929932199},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1509929932203},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1509929932203},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1509929932203},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1509929932203},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1509929932203},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1509929932203},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1509929932203},{"_id":"themes/yilia/source/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1509929932207},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1509929932207},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1509929932203},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1509929932203},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509929932203},{"_id":"themes/yilia/source/mobile.fdc4b7.js","hash":"6bfff9bfe4d7e067b6289e851a4c424ac815af5e","modified":1509929932207},{"_id":"themes/yilia/source/main.507b3a.js","hash":"1be71323e357bcc2d99568bc622f23f152811f2e","modified":1509929932207},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"b011d92be321ebe09fa2b3179c08aa435b9d051c","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"42d97cc3bd098ff95d1f37dc9a84443da0af311a","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1509929932203},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1509929932203},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1509929932203},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1509929932203},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1509929932203},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1509929932203},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1509929932203},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1509929932203},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1509929932203},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1509929932203},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1509929932203},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1509929932203},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1509929932203},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1509929932203},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1509929932203},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1509929932203},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1509929932203},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1509929932203},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1509929932203},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1509929932203},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1509929932203},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1509929932203},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1509929932203},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1509929932203},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1509929932203},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1509929932203},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1509929932203},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1509929932203},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1509929932203},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1509929932203},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1509929932203},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1509929932203},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1509929932203},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1509929932203},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1509929932203},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1509929932203},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1509929932203},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1509929932203},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1509929932203},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1509929932203},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1509929932203},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1509929932203},{"_id":"themes/yilia/source-src/js/fix.js","hash":"7f9599ffd5c5551538e90b97023e7d6c599d1ee6","modified":1509929932203},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1509929932203},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1509929932203},{"_id":"themes/yilia/source-src/js/report.js","hash":"1f6c25cba98abdbf51dd7fda1b75ab655a24327f","modified":1509929932203},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1509929932203},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1509929932203},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1509929932203},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"e8a35d4497fe1e0f119662ae08bd8404e5dab2a4","modified":1509929932203},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"439f2afa6c3515a7edd67d512aae6eba5b1b0d0b","modified":1509929932203},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"ec71ffc2023cebd933c96bd35a7a23d44a30a422","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1509929932199},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1509929932199},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1509929932203},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1509929932203},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1509929932203},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1509929932203},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1509929932203},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1509929932203},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1509929932203},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1509929932203},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1509929932203},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1509929932203},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1509929932203},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1509929932203},{"_id":"public/content.json","hash":"91335ab87d8a96a9feec7b1d34b59c1b12ebf070","modified":1509964678536},{"_id":"public/2017/11/05/webpack的常用插件/index.html","hash":"fb277c5d430dd8521648df21260f62eece451865","modified":1509964805661},{"_id":"public/2017/11/03/webpack的shimming的翻译/index.html","hash":"737e914f96a89ad13fb70a5d44a03d45083c4127","modified":1509964678553},{"_id":"public/archives/index.html","hash":"0215efaaea1c5ae87ea08b3ef165c37b3818b1b3","modified":1509964678553},{"_id":"public/archives/2017/index.html","hash":"eb67fed3a13100e62e5a57f70e5cd05ca266595d","modified":1509964678553},{"_id":"public/archives/2017/11/index.html","hash":"d532f556d19c26046a0406bb4f416858f1aa4a83","modified":1509964678553},{"_id":"public/categories/coding/index.html","hash":"1a891ad891d27b2622d75d82e5557fbf912e587a","modified":1509964678553},{"_id":"public/index.html","hash":"81386bdbe9063189d22317846e9072a6d11d4984","modified":1509964678554},{"_id":"public/tags/webpack/index.html","hash":"c3874c50b3343f346d82a1b2519b0e43222ff19f","modified":1509964678554},{"_id":"public/tags/前端/index.html","hash":"a8f522cf39f9e1b3f25fd74c7bd9891420d44558","modified":1509964678554},{"_id":"public/tags/js/index.html","hash":"3c46364c88b8289b3d2ad81e891b5eba3c8cf456","modified":1509964678554},{"_id":"public/tags/javascript/index.html","hash":"503086d31ad9362efb0e301c2750c7ab901f2362","modified":1509964678554},{"_id":"public/tags/shimming/index.html","hash":"d28e170de5bd25de81d9ea11ac7b8054d0d292e8","modified":1509964678554},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1509964678557},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1509964678557},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1509964678557},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1509964678557},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1509964678557},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1509964678557},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1509964678557},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1509964678558},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1509964678558},{"_id":"public/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1509964678565},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1509964678565},{"_id":"public/mobile.fdc4b7.js","hash":"6bfff9bfe4d7e067b6289e851a4c424ac815af5e","modified":1509964678565},{"_id":"public/main.507b3a.js","hash":"1be71323e357bcc2d99568bc622f23f152811f2e","modified":1509964678565}],"Category":[{"name":"coding","_id":"cj9nidf9o0002mwrcbpx1oujc"}],"Data":[],"Page":[],"Post":[{"title":"webpack的shimming的翻译","date":"2017-11-03T14:10:04.000Z","_content":"webpack编译器可以理解写入的ES2015模块，CommonJS或AMD的模块。然而，一些第三方库可能会期望全局依赖（例如jQuery的$）。这些库可能还会创建需要导出的全局变量。这些“broken modules”使得shimming发挥了作用。\n\nW> __我们不建议使用全局变量！__ Webpack真正的概念是更多的模块化前端开发。这意味着编写完整包含的隔离模块，而不依赖于隐藏的依赖关系（例如全局变量）。所以请仅在必要时去主要做。\n\n_shimming_ 的另一个使用场景就是，如果您希望使用浏览器的[polyfill](https://en.wikipedia.org/wiki/Polyfill)功能来支持更多的用户。在这种情况下，您可能只想将这些Polyfill提供给需要修补的浏览器（即按需加载）。<!-- more -->\n\n以下文章将介绍这两种用例。\n\nT>为了简单起见，本指南源于“[Getting Started](/guides/getting-started)”中的示例。请确保您在移动之前熟悉该设置。\n\n\n## 垫片全局变量\n\n我们从第一个使用shimming的全局变量的用例开始。在我们做任何事情之前，我们再来看看我们的项目：\n\n__project__\n\n``` diff\nwebpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n|- /node_modules\n```\n\n记得我们在使用 `lodash` ？为了演示目的，我们假设希望在整个应用程序中lodash要作为全局变量。为此我们可以使用`ProvidePlugin`插件。\n\n[`ProvidePlugin`](/plugins/provide-plugin) 使用WebPACK变量的形式使包可以在每个模块编译通过。 如果WebPACK看到变量被使用，它将在最后一个bundle中引入指定的包。下面我们取消 `import` 改用插件的方式来提供 `lodash`:\n\n__src/index.js__\n\n``` diff\n- import _ from 'lodash';\n-\n  function component() {\n    var element = document.createElement('div');\n\n-   // Lodash, now imported by this script\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n-   }\n+   },\n+   plugins: [\n+     new webpack.ProvidePlugin({\n+       lodash: 'lodash'\n+     })\n+   ]\n  };\n```\n\n以上就是对webpack的配置...\n\n> 一旦你引用了一次 `lodash`的实例变量，引入`lodash` 包并且提供给需要他的模块。\n\n如果我们运行 build ，我们将看到同样的输出：\n\n``` bash\nTODO: Include output\n```\n我们还可以使用 `ProvidePlugin` 通过使用路径数组（路径数组机构如下：`[module, child, ...children?]`）来配置模块的单个导出。所以让我们想想一下，如果 `lodash` 的 `join` 被调用的时候，我们只需要输出这一个方法：\n So let's imagine we only wanted to provide the `join` method from `lodash` wherever it's invoked:\n\n__src/index.js__\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n+   element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n-       lodash: 'lodash'\n+       join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n通过 [Tree Shaking](/guides/tree-shaking) `lodash`库的其他部分将被优雅的舍去。\n\n\n## 局部垫片\n\n一些传统模块依赖于 `window` 对象。更新我们的`index.js`，作为事例：\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n+\n+   // Assume we are in the context of `window`\n+   this.alert('Hmmm, this probably isn\\'t a great idea...')\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n现在有一个问题，当模块在CommonJS上下文中执行时，`this` 等于 `module.exports`。在这个事例中我们将使用 [`imports-loader`](/loaders/imports-loader/) 来替换 `this` ：\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n+   module: {\n+     rules: [\n+       {\n+         test: require.resolve('index.js'),\n+         use: 'imports-loader?this=>window'\n+       }\n+     ]\n+   },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n\n## 全局变量的导出\n\n我们通常会创建一个充满了全局变量的库。我们可以在我们的设置中添加一个小模块来演示这个：\n\n__project__\n\n``` diff\n  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n+   |- globals.js\n  |- /node_modules\n```\n\n__src/globals.js__\n\n``` js\nvar file = 'blah.txt';\nvar helpers = {\n  test: function() { console.log('test something'); },\n  parse: function() { console.log('parse something'); }\n}\n```\n\n现在，你可能永远不会在自己的代码中如此操作，但是你可能会遇到要使用一下已过时的库，其中包含与上述相似的代码。在这种情况下，我们可以使用 [`exports-loader`](/loaders/exports-loader/) 将该全局变量像一般模块那样导出。例如，将 `file` 导出为 `file`，`helpers.parse` 导出为 `parse`：\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve('index.js'),\n          use: 'imports-loader?this=>window'\n-       }\n+       },\n+       {\n+         test: require.resolve('globals.js'),\n+         use: 'exports-loader?file,parse=helpers.parse'\n+       }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n现在从我们的入口脚本（即 `src/index.js`）中，`import { file, parse } from './globals.js';` 都应该顺利进行。\n\n## 加载腻子\n\n到目前为止，我们讨论的几乎所有内容都与处理传统包有关。我们继续谈谈我们的第二个话题： __腻子__。\n\n有很多方法来加载腻子. 例如，要包括 [`babel-polyfill`](https://babeljs.io/docs/usage/polyfill/)，我们可以简单地：\n\n``` bash\nnpm i --save babel-polyfill\n```\n并`import`它，以便将其包含在我们的主包中：\n\n__src/index.js__\n\n``` diff\n+ import 'babel-polyfill';\n+\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\nT>请注意，我们没有将`import`绑定到变量。这是因为腻子只能在其他代码前自行运行。才能允许我们假设某些本机功能存在。\n\n__但是把腻子包括到主包中这种做法并不推荐__，因为这样会让现代浏览器用户下载过多不必要的脚本，降低用户体验。\n\n现在我们删除 `import` 并且添加一个新的腻子 [`whatwg-fetch`](https://github.com/github/fetch) ：\n\n``` bash\nnpm i --save whatwg-fetch\n```\n\n__src/index.js__\n\n``` diff\n- import 'babel-polyfill';\n-\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__project__\n\n``` diff\n  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n    |- globals.js\n+   |- polyfills.js\n  |- /node_modules\n```\n\n__src/polyfills.js__\n\n```javascript\nimport 'babel-polyfill';\nimport 'whatwg-fetch';\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n-   entry: './src/index.js',\n+   entry: {\n+     polyfills: './src/polyfills.js',\n+     index: './src/index.js'\n+   },\n    output: {\n-     filename: 'bundle.js',\n+     filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve('index.js'),\n          use: 'imports-loader?this=>window'\n        },\n        {\n          test: require.resolve('globals.js'),\n          use: 'exports-loader?file,parse=helpers.parse'\n        }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n有了这个，我们可以添加逻辑来有条件地加载我们的新的 `polyfills.bundle.js` 文件。您如何做出这一决定取决于您需要支持的技术和浏览器。我们将做一些简单的测试来确定我们的腻子是否需要：\n\n__dist/index.html__\n\n``` diff\n  <html>\n    <head>\n      <title>Getting Started</title>\n+     <script>\n+       var modernBrowser = (\n+         'fetch' in window &&\n+         'assign' in Object\n+       );\n+\n+       if ( !modernBrowser ) {\n+         var scriptElement = document.createElement('script');\n+\n+         scriptElement.async = false;\n+         scriptElement.src = '/polyfills.bundle.js';\n+         document.head.appendChild(scriptElement);\n+       }\n+     </script>\n    </head>\n    <body>\n      <script src=\"index.bundle.js\"></script>\n    </body>\n  </html>\n```\n\nNow we can `fetch` some data within our entry script:\n\n__src/index.js__\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n+\n+ fetch('https://jsonplaceholder.typicode.com/users')\n+   .then(response => response.json())\n+   .then(json => {\n+     console.log('We retrieved some data! AND we\\'re confident it will work on a variety of browser distributions.')\n+     console.log(json)\n+   })\n+   .catch(error => console.error('Something went wrong when fetching this data: ', error))\n```\n\n如果我们运行build，将会生成一个 `polyfills.bundle.js` 文件，并且浏览器中的所有内容都应该顺利运行。请注意，这种设置可能会得到改善，因为这只是解决如何把腻子只提供给真正需要它们的用户的一种方法。\n\n## 进一步的优化\n\n`babel-preset-env` 包则是通过一个 [browserslist](https://github.com/ai/browserslist)来匹配你浏览器，并且转码你浏览器所不支持的的代码。通过`useBuiltIns` 选项进行预设，默认为 `false`，通过 `import` 的方法导入更细粒度的功能来覆盖你的全局 `babel-polyfill`配置：\n\n``` js\nimport 'core-js/modules/es7.string.pad-start';\nimport 'core-js/modules/es7.string.pad-end';\nimport 'core-js/modules/web.timers';\nimport 'core-js/modules/web.immediate';\nimport 'core-js/modules/web.dom.iterable';\n```\n有关详细信息，请参阅[知识库](https://github.com/babel/babel-preset-env)。\n\n\n## Node的内部插件\n\nNode的内部插件，比如 `process` 能够根据您的配置文件直接打腻子，而无需使用任何特殊的loaders或插件。 查看[node配置页面](/configuration/node)，那里有过多的信息和事例。\n\n\n## 其它\n\n在处理传统模块时，还有一些其他工具可以帮助您。\n\n[`script-loader`](/loaders/script-loader/)能够评估你的全局上下文的代码。作用类似于一个 `script` 的标签容器。在这种模式下，每个正常的库都应该工作。`require`、`module` 等等未被定义。\n\nW>当使用 `script-loader` 时，将该模块作为字符串添加到捆绑包中。它不会被 `webpack` 最小化，所以请使用最小化的版本。对于这个加载器添加的库，也么有 `devtool` 支持。\n\n当没有AMD/CommonJS版本的模块，并且您想要包括到 `dist` 中去，你可以在 [`noParse`](/configuration/module/#module-noparse) 中标记这个模块。他将告诉webpack引用这个模块不需要匹配或分析 `require()` 和  `import` 语法。这种做法也用于提高构建性能。\n\nW> 任何需要AST的功能， 例如 `ProvidePlugin`，将不再工作。\n\n最后，有一些模块支持不同的 [模块风格](/concepts/modules)，如AMD，CommonJS和传统。在大多数情况下，他们首先检查 `define`，然后使用一些古怪的代码来导出属性。在这种情况下，可以通过 [`imports-loader`](/loaders/imports-loader/) 设置 `define=>false` 来强制导入CommonJS路径。\n\n***\n\n> 原文：https://webpack.js.org/guides/shimming/\n\n","source":"_posts/webpack的shimming的翻译.md","raw":"---\ntitle: webpack的shimming的翻译\ndate: 2017-11-03 22:10:04\ntags: ['webpack','前端','js','javascript','shimming']\ncategory: 'coding'\n---\nwebpack编译器可以理解写入的ES2015模块，CommonJS或AMD的模块。然而，一些第三方库可能会期望全局依赖（例如jQuery的$）。这些库可能还会创建需要导出的全局变量。这些“broken modules”使得shimming发挥了作用。\n\nW> __我们不建议使用全局变量！__ Webpack真正的概念是更多的模块化前端开发。这意味着编写完整包含的隔离模块，而不依赖于隐藏的依赖关系（例如全局变量）。所以请仅在必要时去主要做。\n\n_shimming_ 的另一个使用场景就是，如果您希望使用浏览器的[polyfill](https://en.wikipedia.org/wiki/Polyfill)功能来支持更多的用户。在这种情况下，您可能只想将这些Polyfill提供给需要修补的浏览器（即按需加载）。<!-- more -->\n\n以下文章将介绍这两种用例。\n\nT>为了简单起见，本指南源于“[Getting Started](/guides/getting-started)”中的示例。请确保您在移动之前熟悉该设置。\n\n\n## 垫片全局变量\n\n我们从第一个使用shimming的全局变量的用例开始。在我们做任何事情之前，我们再来看看我们的项目：\n\n__project__\n\n``` diff\nwebpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n|- /node_modules\n```\n\n记得我们在使用 `lodash` ？为了演示目的，我们假设希望在整个应用程序中lodash要作为全局变量。为此我们可以使用`ProvidePlugin`插件。\n\n[`ProvidePlugin`](/plugins/provide-plugin) 使用WebPACK变量的形式使包可以在每个模块编译通过。 如果WebPACK看到变量被使用，它将在最后一个bundle中引入指定的包。下面我们取消 `import` 改用插件的方式来提供 `lodash`:\n\n__src/index.js__\n\n``` diff\n- import _ from 'lodash';\n-\n  function component() {\n    var element = document.createElement('div');\n\n-   // Lodash, now imported by this script\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n-   }\n+   },\n+   plugins: [\n+     new webpack.ProvidePlugin({\n+       lodash: 'lodash'\n+     })\n+   ]\n  };\n```\n\n以上就是对webpack的配置...\n\n> 一旦你引用了一次 `lodash`的实例变量，引入`lodash` 包并且提供给需要他的模块。\n\n如果我们运行 build ，我们将看到同样的输出：\n\n``` bash\nTODO: Include output\n```\n我们还可以使用 `ProvidePlugin` 通过使用路径数组（路径数组机构如下：`[module, child, ...children?]`）来配置模块的单个导出。所以让我们想想一下，如果 `lodash` 的 `join` 被调用的时候，我们只需要输出这一个方法：\n So let's imagine we only wanted to provide the `join` method from `lodash` wherever it's invoked:\n\n__src/index.js__\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n+   element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n-       lodash: 'lodash'\n+       join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n通过 [Tree Shaking](/guides/tree-shaking) `lodash`库的其他部分将被优雅的舍去。\n\n\n## 局部垫片\n\n一些传统模块依赖于 `window` 对象。更新我们的`index.js`，作为事例：\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n+\n+   // Assume we are in the context of `window`\n+   this.alert('Hmmm, this probably isn\\'t a great idea...')\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n现在有一个问题，当模块在CommonJS上下文中执行时，`this` 等于 `module.exports`。在这个事例中我们将使用 [`imports-loader`](/loaders/imports-loader/) 来替换 `this` ：\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n+   module: {\n+     rules: [\n+       {\n+         test: require.resolve('index.js'),\n+         use: 'imports-loader?this=>window'\n+       }\n+     ]\n+   },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n\n## 全局变量的导出\n\n我们通常会创建一个充满了全局变量的库。我们可以在我们的设置中添加一个小模块来演示这个：\n\n__project__\n\n``` diff\n  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n+   |- globals.js\n  |- /node_modules\n```\n\n__src/globals.js__\n\n``` js\nvar file = 'blah.txt';\nvar helpers = {\n  test: function() { console.log('test something'); },\n  parse: function() { console.log('parse something'); }\n}\n```\n\n现在，你可能永远不会在自己的代码中如此操作，但是你可能会遇到要使用一下已过时的库，其中包含与上述相似的代码。在这种情况下，我们可以使用 [`exports-loader`](/loaders/exports-loader/) 将该全局变量像一般模块那样导出。例如，将 `file` 导出为 `file`，`helpers.parse` 导出为 `parse`：\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve('index.js'),\n          use: 'imports-loader?this=>window'\n-       }\n+       },\n+       {\n+         test: require.resolve('globals.js'),\n+         use: 'exports-loader?file,parse=helpers.parse'\n+       }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n现在从我们的入口脚本（即 `src/index.js`）中，`import { file, parse } from './globals.js';` 都应该顺利进行。\n\n## 加载腻子\n\n到目前为止，我们讨论的几乎所有内容都与处理传统包有关。我们继续谈谈我们的第二个话题： __腻子__。\n\n有很多方法来加载腻子. 例如，要包括 [`babel-polyfill`](https://babeljs.io/docs/usage/polyfill/)，我们可以简单地：\n\n``` bash\nnpm i --save babel-polyfill\n```\n并`import`它，以便将其包含在我们的主包中：\n\n__src/index.js__\n\n``` diff\n+ import 'babel-polyfill';\n+\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\nT>请注意，我们没有将`import`绑定到变量。这是因为腻子只能在其他代码前自行运行。才能允许我们假设某些本机功能存在。\n\n__但是把腻子包括到主包中这种做法并不推荐__，因为这样会让现代浏览器用户下载过多不必要的脚本，降低用户体验。\n\n现在我们删除 `import` 并且添加一个新的腻子 [`whatwg-fetch`](https://github.com/github/fetch) ：\n\n``` bash\nnpm i --save whatwg-fetch\n```\n\n__src/index.js__\n\n``` diff\n- import 'babel-polyfill';\n-\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__project__\n\n``` diff\n  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n    |- globals.js\n+   |- polyfills.js\n  |- /node_modules\n```\n\n__src/polyfills.js__\n\n```javascript\nimport 'babel-polyfill';\nimport 'whatwg-fetch';\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n-   entry: './src/index.js',\n+   entry: {\n+     polyfills: './src/polyfills.js',\n+     index: './src/index.js'\n+   },\n    output: {\n-     filename: 'bundle.js',\n+     filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve('index.js'),\n          use: 'imports-loader?this=>window'\n        },\n        {\n          test: require.resolve('globals.js'),\n          use: 'exports-loader?file,parse=helpers.parse'\n        }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n有了这个，我们可以添加逻辑来有条件地加载我们的新的 `polyfills.bundle.js` 文件。您如何做出这一决定取决于您需要支持的技术和浏览器。我们将做一些简单的测试来确定我们的腻子是否需要：\n\n__dist/index.html__\n\n``` diff\n  <html>\n    <head>\n      <title>Getting Started</title>\n+     <script>\n+       var modernBrowser = (\n+         'fetch' in window &&\n+         'assign' in Object\n+       );\n+\n+       if ( !modernBrowser ) {\n+         var scriptElement = document.createElement('script');\n+\n+         scriptElement.async = false;\n+         scriptElement.src = '/polyfills.bundle.js';\n+         document.head.appendChild(scriptElement);\n+       }\n+     </script>\n    </head>\n    <body>\n      <script src=\"index.bundle.js\"></script>\n    </body>\n  </html>\n```\n\nNow we can `fetch` some data within our entry script:\n\n__src/index.js__\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n+\n+ fetch('https://jsonplaceholder.typicode.com/users')\n+   .then(response => response.json())\n+   .then(json => {\n+     console.log('We retrieved some data! AND we\\'re confident it will work on a variety of browser distributions.')\n+     console.log(json)\n+   })\n+   .catch(error => console.error('Something went wrong when fetching this data: ', error))\n```\n\n如果我们运行build，将会生成一个 `polyfills.bundle.js` 文件，并且浏览器中的所有内容都应该顺利运行。请注意，这种设置可能会得到改善，因为这只是解决如何把腻子只提供给真正需要它们的用户的一种方法。\n\n## 进一步的优化\n\n`babel-preset-env` 包则是通过一个 [browserslist](https://github.com/ai/browserslist)来匹配你浏览器，并且转码你浏览器所不支持的的代码。通过`useBuiltIns` 选项进行预设，默认为 `false`，通过 `import` 的方法导入更细粒度的功能来覆盖你的全局 `babel-polyfill`配置：\n\n``` js\nimport 'core-js/modules/es7.string.pad-start';\nimport 'core-js/modules/es7.string.pad-end';\nimport 'core-js/modules/web.timers';\nimport 'core-js/modules/web.immediate';\nimport 'core-js/modules/web.dom.iterable';\n```\n有关详细信息，请参阅[知识库](https://github.com/babel/babel-preset-env)。\n\n\n## Node的内部插件\n\nNode的内部插件，比如 `process` 能够根据您的配置文件直接打腻子，而无需使用任何特殊的loaders或插件。 查看[node配置页面](/configuration/node)，那里有过多的信息和事例。\n\n\n## 其它\n\n在处理传统模块时，还有一些其他工具可以帮助您。\n\n[`script-loader`](/loaders/script-loader/)能够评估你的全局上下文的代码。作用类似于一个 `script` 的标签容器。在这种模式下，每个正常的库都应该工作。`require`、`module` 等等未被定义。\n\nW>当使用 `script-loader` 时，将该模块作为字符串添加到捆绑包中。它不会被 `webpack` 最小化，所以请使用最小化的版本。对于这个加载器添加的库，也么有 `devtool` 支持。\n\n当没有AMD/CommonJS版本的模块，并且您想要包括到 `dist` 中去，你可以在 [`noParse`](/configuration/module/#module-noparse) 中标记这个模块。他将告诉webpack引用这个模块不需要匹配或分析 `require()` 和  `import` 语法。这种做法也用于提高构建性能。\n\nW> 任何需要AST的功能， 例如 `ProvidePlugin`，将不再工作。\n\n最后，有一些模块支持不同的 [模块风格](/concepts/modules)，如AMD，CommonJS和传统。在大多数情况下，他们首先检查 `define`，然后使用一些古怪的代码来导出属性。在这种情况下，可以通过 [`imports-loader`](/loaders/imports-loader/) 设置 `define=>false` 来强制导入CommonJS路径。\n\n***\n\n> 原文：https://webpack.js.org/guides/shimming/\n\n","slug":"webpack的shimming的翻译","published":1,"updated":"2017-11-06T01:28:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9nidf9a0000mwrcstjuzhbj","content":"<p>webpack编译器可以理解写入的ES2015模块，CommonJS或AMD的模块。然而，一些第三方库可能会期望全局依赖（例如jQuery的$）。这些库可能还会创建需要导出的全局变量。这些“broken modules”使得shimming发挥了作用。</p>\n<p>W&gt; <strong>我们不建议使用全局变量！</strong> Webpack真正的概念是更多的模块化前端开发。这意味着编写完整包含的隔离模块，而不依赖于隐藏的依赖关系（例如全局变量）。所以请仅在必要时去主要做。</p>\n<p><em>shimming</em> 的另一个使用场景就是，如果您希望使用浏览器的<a href=\"https://en.wikipedia.org/wiki/Polyfill\" target=\"_blank\" rel=\"external\">polyfill</a>功能来支持更多的用户。在这种情况下，您可能只想将这些Polyfill提供给需要修补的浏览器（即按需加载）。<a id=\"more\"></a></p>\n<p>以下文章将介绍这两种用例。</p>\n<p>T&gt;为了简单起见，本指南源于“<a href=\"/guides/getting-started\">Getting Started</a>”中的示例。请确保您在移动之前熟悉该设置。</p>\n<h2 id=\"垫片全局变量\"><a href=\"#垫片全局变量\" class=\"headerlink\" title=\"垫片全局变量\"></a>垫片全局变量</h2><p>我们从第一个使用shimming的全局变量的用例开始。在我们做任何事情之前，我们再来看看我们的项目：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- /dist</span><br><span class=\"line\">|- /src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">|- /node_modules</span><br></pre></td></tr></table></figure>\n<p>记得我们在使用 <code>lodash</code> ？为了演示目的，我们假设希望在整个应用程序中lodash要作为全局变量。为此我们可以使用<code>ProvidePlugin</code>插件。</p>\n<p><a href=\"/plugins/provide-plugin\"><code>ProvidePlugin</code></a> 使用WebPACK变量的形式使包可以在每个模块编译通过。 如果WebPACK看到变量被使用，它将在最后一个bundle中引入指定的包。下面我们取消 <code>import</code> 改用插件的方式来提供 <code>lodash</code>:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import _ from 'lodash';</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   // Lodash, now imported by this script</span></span><br><span class=\"line\">    element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+   plugins: [</span></span><br><span class=\"line\"><span class=\"addition\">+     new webpack.ProvidePlugin(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+       lodash: 'lodash'</span></span><br><span class=\"line\"><span class=\"addition\">+     &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   ]</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>以上就是对webpack的配置…</p>\n<blockquote>\n<p>一旦你引用了一次 <code>lodash</code>的实例变量，引入<code>lodash</code> 包并且提供给需要他的模块。</p>\n</blockquote>\n<p>如果我们运行 build ，我们将看到同样的输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO: Include output</span><br></pre></td></tr></table></figure>\n<p>我们还可以使用 <code>ProvidePlugin</code> 通过使用路径数组（路径数组机构如下：<code>[module, child, ...children?]</code>）来配置模块的单个导出。所以让我们想想一下，如果 <code>lodash</code> 的 <code>join</code> 被调用的时候，我们只需要输出这一个方法：<br> So let’s imagine we only wanted to provide the <code>join</code> method from <code>lodash</code> wherever it’s invoked:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"><span class=\"addition\">+   element.innerHTML = join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\"><span class=\"deletion\">-       lodash: 'lodash'</span></span><br><span class=\"line\"><span class=\"addition\">+       join: ['lodash', 'join']</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>通过 <a href=\"/guides/tree-shaking\">Tree Shaking</a> <code>lodash</code>库的其他部分将被优雅的舍去。</p>\n<h2 id=\"局部垫片\"><a href=\"#局部垫片\" class=\"headerlink\" title=\"局部垫片\"></a>局部垫片</h2><p>一些传统模块依赖于 <code>window</code> 对象。更新我们的<code>index.js</code>，作为事例：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+   // Assume we are in the context of `window`</span></span><br><span class=\"line\"><span class=\"addition\">+   this.alert('Hmmm, this probably isn\\'t a great idea...')</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>现在有一个问题，当模块在CommonJS上下文中执行时，<code>this</code> 等于 <code>module.exports</code>。在这个事例中我们将使用 <a href=\"/loaders/imports-loader/\"><code>imports-loader</code></a> 来替换 <code>this</code> ：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"addition\">+   module: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     rules: [</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         test: require.resolve('index.js'),</span></span><br><span class=\"line\"><span class=\"addition\">+         use: 'imports-loader?this=&gt;window'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+     ]</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"全局变量的导出\"><a href=\"#全局变量的导出\" class=\"headerlink\" title=\"全局变量的导出\"></a>全局变量的导出</h2><p>我们通常会创建一个充满了全局变量的库。我们可以在我们的设置中添加一个小模块来演示这个：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">  |- webpack.config.js</span><br><span class=\"line\">  |- /dist</span><br><span class=\"line\">  |- /src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\"><span class=\"addition\">+   |- globals.js</span></span><br><span class=\"line\">  |- /node_modules</span><br></pre></td></tr></table></figure>\n<p><strong>src/globals.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> file = <span class=\"string\">'blah.txt'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> helpers = &#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'test something'</span>); &#125;,</span><br><span class=\"line\">  <span class=\"attr\">parse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parse something'</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，你可能永远不会在自己的代码中如此操作，但是你可能会遇到要使用一下已过时的库，其中包含与上述相似的代码。在这种情况下，我们可以使用 <a href=\"/loaders/exports-loader/\"><code>exports-loader</code></a> 将该全局变量像一般模块那样导出。例如，将 <code>file</code> 导出为 <code>file</code>，<code>helpers.parse</code> 导出为 <code>parse</code>：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('index.js'),</span><br><span class=\"line\">          use: 'imports-loader?this=&gt;window'</span><br><span class=\"line\"><span class=\"deletion\">-       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         test: require.resolve('globals.js'),</span></span><br><span class=\"line\"><span class=\"addition\">+         use: 'exports-loader?file,parse=helpers.parse'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的入口脚本（即 <code>src/index.js</code>）中，<code>import { file, parse } from &#39;./globals.js&#39;;</code> 都应该顺利进行。</p>\n<h2 id=\"加载腻子\"><a href=\"#加载腻子\" class=\"headerlink\" title=\"加载腻子\"></a>加载腻子</h2><p>到目前为止，我们讨论的几乎所有内容都与处理传统包有关。我们继续谈谈我们的第二个话题： <strong>腻子</strong>。</p>\n<p>有很多方法来加载腻子. 例如，要包括 <a href=\"https://babeljs.io/docs/usage/polyfill/\" target=\"_blank\" rel=\"external\"><code>babel-polyfill</code></a>，我们可以简单地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save babel-polyfill</span><br></pre></td></tr></table></figure>\n<p>并<code>import</code>它，以便将其包含在我们的主包中：</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ import 'babel-polyfill';</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>T&gt;请注意，我们没有将<code>import</code>绑定到变量。这是因为腻子只能在其他代码前自行运行。才能允许我们假设某些本机功能存在。</p>\n<p><strong>但是把腻子包括到主包中这种做法并不推荐</strong>，因为这样会让现代浏览器用户下载过多不必要的脚本，降低用户体验。</p>\n<p>现在我们删除 <code>import</code> 并且添加一个新的腻子 <a href=\"https://github.com/github/fetch\" target=\"_blank\" rel=\"external\"><code>whatwg-fetch</code></a> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save whatwg-fetch</span><br></pre></td></tr></table></figure>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import 'babel-polyfill';</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">  |- webpack.config.js</span><br><span class=\"line\">  |- /dist</span><br><span class=\"line\">  |- /src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\">    |- globals.js</span><br><span class=\"line\"><span class=\"addition\">+   |- polyfills.js</span></span><br><span class=\"line\">  |- /node_modules</span><br></pre></td></tr></table></figure>\n<p><strong>src/polyfills.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'whatwg-fetch'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   entry: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+   entry: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     polyfills: './src/polyfills.js',</span></span><br><span class=\"line\"><span class=\"addition\">+     index: './src/index.js'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\"><span class=\"deletion\">-     filename: 'bundle.js',</span></span><br><span class=\"line\"><span class=\"addition\">+     filename: '[name].bundle.js',</span></span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('index.js'),</span><br><span class=\"line\">          use: 'imports-loader?this=&gt;window'</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('globals.js'),</span><br><span class=\"line\">          use: 'exports-loader?file,parse=helpers.parse'</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>有了这个，我们可以添加逻辑来有条件地加载我们的新的 <code>polyfills.bundle.js</code> 文件。您如何做出这一决定取决于您需要支持的技术和浏览器。我们将做一些简单的测试来确定我们的腻子是否需要：</p>\n<p><strong>dist/index.html</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">      &lt;title&gt;Getting Started&lt;/title&gt;</span><br><span class=\"line\"><span class=\"addition\">+     &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+       var modernBrowser = (</span></span><br><span class=\"line\"><span class=\"addition\">+         'fetch' in window &amp;&amp;</span></span><br><span class=\"line\"><span class=\"addition\">+         'assign' in Object</span></span><br><span class=\"line\"><span class=\"addition\">+       );</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+       if ( !modernBrowser ) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         var scriptElement = document.createElement('script');</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+         scriptElement.async = false;</span></span><br><span class=\"line\"><span class=\"addition\">+         scriptElement.src = '/polyfills.bundle.js';</span></span><br><span class=\"line\"><span class=\"addition\">+         document.head.appendChild(scriptElement);</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+     &lt;/script&gt;</span></span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;script src=\"index.bundle.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>Now we can <code>fetch</code> some data within our entry script:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+ fetch('https://jsonplaceholder.typicode.com/users')</span></span><br><span class=\"line\"><span class=\"addition\">+   .then(response =&gt; response.json())</span></span><br><span class=\"line\"><span class=\"addition\">+   .then(json =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     console.log('We retrieved some data! AND we\\'re confident it will work on a variety of browser distributions.')</span></span><br><span class=\"line\"><span class=\"addition\">+     console.log(json)</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   .catch(error =&gt; console.error('Something went wrong when fetching this data: ', error))</span></span><br></pre></td></tr></table></figure>\n<p>如果我们运行build，将会生成一个 <code>polyfills.bundle.js</code> 文件，并且浏览器中的所有内容都应该顺利运行。请注意，这种设置可能会得到改善，因为这只是解决如何把腻子只提供给真正需要它们的用户的一种方法。</p>\n<h2 id=\"进一步的优化\"><a href=\"#进一步的优化\" class=\"headerlink\" title=\"进一步的优化\"></a>进一步的优化</h2><p><code>babel-preset-env</code> 包则是通过一个 <a href=\"https://github.com/ai/browserslist\" target=\"_blank\" rel=\"external\">browserslist</a>来匹配你浏览器，并且转码你浏览器所不支持的的代码。通过<code>useBuiltIns</code> 选项进行预设，默认为 <code>false</code>，通过 <code>import</code> 的方法导入更细粒度的功能来覆盖你的全局 <code>babel-polyfill</code>配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/es7.string.pad-start'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/es7.string.pad-end'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.timers'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.immediate'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.dom.iterable'</span>;</span><br></pre></td></tr></table></figure>\n<p>有关详细信息，请参阅<a href=\"https://github.com/babel/babel-preset-env\" target=\"_blank\" rel=\"external\">知识库</a>。</p>\n<h2 id=\"Node的内部插件\"><a href=\"#Node的内部插件\" class=\"headerlink\" title=\"Node的内部插件\"></a>Node的内部插件</h2><p>Node的内部插件，比如 <code>process</code> 能够根据您的配置文件直接打腻子，而无需使用任何特殊的loaders或插件。 查看<a href=\"/configuration/node\">node配置页面</a>，那里有过多的信息和事例。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>在处理传统模块时，还有一些其他工具可以帮助您。</p>\n<p><a href=\"/loaders/script-loader/\"><code>script-loader</code></a>能够评估你的全局上下文的代码。作用类似于一个 <code>script</code> 的标签容器。在这种模式下，每个正常的库都应该工作。<code>require</code>、<code>module</code> 等等未被定义。</p>\n<p>W&gt;当使用 <code>script-loader</code> 时，将该模块作为字符串添加到捆绑包中。它不会被 <code>webpack</code> 最小化，所以请使用最小化的版本。对于这个加载器添加的库，也么有 <code>devtool</code> 支持。</p>\n<p>当没有AMD/CommonJS版本的模块，并且您想要包括到 <code>dist</code> 中去，你可以在 <a href=\"/configuration/module/#module-noparse\"><code>noParse</code></a> 中标记这个模块。他将告诉webpack引用这个模块不需要匹配或分析 <code>require()</code> 和  <code>import</code> 语法。这种做法也用于提高构建性能。</p>\n<p>W&gt; 任何需要AST的功能， 例如 <code>ProvidePlugin</code>，将不再工作。</p>\n<p>最后，有一些模块支持不同的 <a href=\"/concepts/modules\">模块风格</a>，如AMD，CommonJS和传统。在大多数情况下，他们首先检查 <code>define</code>，然后使用一些古怪的代码来导出属性。在这种情况下，可以通过 <a href=\"/loaders/imports-loader/\"><code>imports-loader</code></a> 设置 <code>define=&gt;false</code> 来强制导入CommonJS路径。</p>\n<hr>\n<blockquote>\n<p>原文：<a href=\"https://webpack.js.org/guides/shimming/\" target=\"_blank\" rel=\"external\">https://webpack.js.org/guides/shimming/</a></p>\n</blockquote>\n","excerpt":"<p>webpack编译器可以理解写入的ES2015模块，CommonJS或AMD的模块。然而，一些第三方库可能会期望全局依赖（例如jQuery的$）。这些库可能还会创建需要导出的全局变量。这些“broken modules”使得shimming发挥了作用。</p>\n<p>W&gt; <strong>我们不建议使用全局变量！</strong> Webpack真正的概念是更多的模块化前端开发。这意味着编写完整包含的隔离模块，而不依赖于隐藏的依赖关系（例如全局变量）。所以请仅在必要时去主要做。</p>\n<p><em>shimming</em> 的另一个使用场景就是，如果您希望使用浏览器的<a href=\"https://en.wikipedia.org/wiki/Polyfill\">polyfill</a>功能来支持更多的用户。在这种情况下，您可能只想将这些Polyfill提供给需要修补的浏览器（即按需加载）。","more":"</p>\n<p>以下文章将介绍这两种用例。</p>\n<p>T&gt;为了简单起见，本指南源于“<a href=\"/guides/getting-started\">Getting Started</a>”中的示例。请确保您在移动之前熟悉该设置。</p>\n<h2 id=\"垫片全局变量\"><a href=\"#垫片全局变量\" class=\"headerlink\" title=\"垫片全局变量\"></a>垫片全局变量</h2><p>我们从第一个使用shimming的全局变量的用例开始。在我们做任何事情之前，我们再来看看我们的项目：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- /dist</span><br><span class=\"line\">|- /src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">|- /node_modules</span><br></pre></td></tr></table></figure>\n<p>记得我们在使用 <code>lodash</code> ？为了演示目的，我们假设希望在整个应用程序中lodash要作为全局变量。为此我们可以使用<code>ProvidePlugin</code>插件。</p>\n<p><a href=\"/plugins/provide-plugin\"><code>ProvidePlugin</code></a> 使用WebPACK变量的形式使包可以在每个模块编译通过。 如果WebPACK看到变量被使用，它将在最后一个bundle中引入指定的包。下面我们取消 <code>import</code> 改用插件的方式来提供 <code>lodash</code>:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import _ from 'lodash';</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   // Lodash, now imported by this script</span></span><br><span class=\"line\">    element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+   plugins: [</span></span><br><span class=\"line\"><span class=\"addition\">+     new webpack.ProvidePlugin(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+       lodash: 'lodash'</span></span><br><span class=\"line\"><span class=\"addition\">+     &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   ]</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>以上就是对webpack的配置…</p>\n<blockquote>\n<p>一旦你引用了一次 <code>lodash</code>的实例变量，引入<code>lodash</code> 包并且提供给需要他的模块。</p>\n</blockquote>\n<p>如果我们运行 build ，我们将看到同样的输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO: Include output</span><br></pre></td></tr></table></figure>\n<p>我们还可以使用 <code>ProvidePlugin</code> 通过使用路径数组（路径数组机构如下：<code>[module, child, ...children?]</code>）来配置模块的单个导出。所以让我们想想一下，如果 <code>lodash</code> 的 <code>join</code> 被调用的时候，我们只需要输出这一个方法：<br> So let’s imagine we only wanted to provide the <code>join</code> method from <code>lodash</code> wherever it’s invoked:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"><span class=\"addition\">+   element.innerHTML = join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\"><span class=\"deletion\">-       lodash: 'lodash'</span></span><br><span class=\"line\"><span class=\"addition\">+       join: ['lodash', 'join']</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>通过 <a href=\"/guides/tree-shaking\">Tree Shaking</a> <code>lodash</code>库的其他部分将被优雅的舍去。</p>\n<h2 id=\"局部垫片\"><a href=\"#局部垫片\" class=\"headerlink\" title=\"局部垫片\"></a>局部垫片</h2><p>一些传统模块依赖于 <code>window</code> 对象。更新我们的<code>index.js</code>，作为事例：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+   // Assume we are in the context of `window`</span></span><br><span class=\"line\"><span class=\"addition\">+   this.alert('Hmmm, this probably isn\\'t a great idea...')</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>现在有一个问题，当模块在CommonJS上下文中执行时，<code>this</code> 等于 <code>module.exports</code>。在这个事例中我们将使用 <a href=\"/loaders/imports-loader/\"><code>imports-loader</code></a> 来替换 <code>this</code> ：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"addition\">+   module: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     rules: [</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         test: require.resolve('index.js'),</span></span><br><span class=\"line\"><span class=\"addition\">+         use: 'imports-loader?this=&gt;window'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+     ]</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"全局变量的导出\"><a href=\"#全局变量的导出\" class=\"headerlink\" title=\"全局变量的导出\"></a>全局变量的导出</h2><p>我们通常会创建一个充满了全局变量的库。我们可以在我们的设置中添加一个小模块来演示这个：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">  |- webpack.config.js</span><br><span class=\"line\">  |- /dist</span><br><span class=\"line\">  |- /src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\"><span class=\"addition\">+   |- globals.js</span></span><br><span class=\"line\">  |- /node_modules</span><br></pre></td></tr></table></figure>\n<p><strong>src/globals.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> file = <span class=\"string\">'blah.txt'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> helpers = &#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'test something'</span>); &#125;,</span><br><span class=\"line\">  <span class=\"attr\">parse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parse something'</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，你可能永远不会在自己的代码中如此操作，但是你可能会遇到要使用一下已过时的库，其中包含与上述相似的代码。在这种情况下，我们可以使用 <a href=\"/loaders/exports-loader/\"><code>exports-loader</code></a> 将该全局变量像一般模块那样导出。例如，将 <code>file</code> 导出为 <code>file</code>，<code>helpers.parse</code> 导出为 <code>parse</code>：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('index.js'),</span><br><span class=\"line\">          use: 'imports-loader?this=&gt;window'</span><br><span class=\"line\"><span class=\"deletion\">-       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         test: require.resolve('globals.js'),</span></span><br><span class=\"line\"><span class=\"addition\">+         use: 'exports-loader?file,parse=helpers.parse'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的入口脚本（即 <code>src/index.js</code>）中，<code>import { file, parse } from &#39;./globals.js&#39;;</code> 都应该顺利进行。</p>\n<h2 id=\"加载腻子\"><a href=\"#加载腻子\" class=\"headerlink\" title=\"加载腻子\"></a>加载腻子</h2><p>到目前为止，我们讨论的几乎所有内容都与处理传统包有关。我们继续谈谈我们的第二个话题： <strong>腻子</strong>。</p>\n<p>有很多方法来加载腻子. 例如，要包括 <a href=\"https://babeljs.io/docs/usage/polyfill/\"><code>babel-polyfill</code></a>，我们可以简单地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save babel-polyfill</span><br></pre></td></tr></table></figure>\n<p>并<code>import</code>它，以便将其包含在我们的主包中：</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ import 'babel-polyfill';</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>T&gt;请注意，我们没有将<code>import</code>绑定到变量。这是因为腻子只能在其他代码前自行运行。才能允许我们假设某些本机功能存在。</p>\n<p><strong>但是把腻子包括到主包中这种做法并不推荐</strong>，因为这样会让现代浏览器用户下载过多不必要的脚本，降低用户体验。</p>\n<p>现在我们删除 <code>import</code> 并且添加一个新的腻子 <a href=\"https://github.com/github/fetch\"><code>whatwg-fetch</code></a> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save whatwg-fetch</span><br></pre></td></tr></table></figure>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import 'babel-polyfill';</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">  |- webpack.config.js</span><br><span class=\"line\">  |- /dist</span><br><span class=\"line\">  |- /src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\">    |- globals.js</span><br><span class=\"line\"><span class=\"addition\">+   |- polyfills.js</span></span><br><span class=\"line\">  |- /node_modules</span><br></pre></td></tr></table></figure>\n<p><strong>src/polyfills.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'whatwg-fetch'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   entry: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+   entry: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     polyfills: './src/polyfills.js',</span></span><br><span class=\"line\"><span class=\"addition\">+     index: './src/index.js'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\"><span class=\"deletion\">-     filename: 'bundle.js',</span></span><br><span class=\"line\"><span class=\"addition\">+     filename: '[name].bundle.js',</span></span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('index.js'),</span><br><span class=\"line\">          use: 'imports-loader?this=&gt;window'</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('globals.js'),</span><br><span class=\"line\">          use: 'exports-loader?file,parse=helpers.parse'</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>有了这个，我们可以添加逻辑来有条件地加载我们的新的 <code>polyfills.bundle.js</code> 文件。您如何做出这一决定取决于您需要支持的技术和浏览器。我们将做一些简单的测试来确定我们的腻子是否需要：</p>\n<p><strong>dist/index.html</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">      &lt;title&gt;Getting Started&lt;/title&gt;</span><br><span class=\"line\"><span class=\"addition\">+     &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+       var modernBrowser = (</span></span><br><span class=\"line\"><span class=\"addition\">+         'fetch' in window &amp;&amp;</span></span><br><span class=\"line\"><span class=\"addition\">+         'assign' in Object</span></span><br><span class=\"line\"><span class=\"addition\">+       );</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+       if ( !modernBrowser ) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         var scriptElement = document.createElement('script');</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+         scriptElement.async = false;</span></span><br><span class=\"line\"><span class=\"addition\">+         scriptElement.src = '/polyfills.bundle.js';</span></span><br><span class=\"line\"><span class=\"addition\">+         document.head.appendChild(scriptElement);</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+     &lt;/script&gt;</span></span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;script src=\"index.bundle.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>Now we can <code>fetch</code> some data within our entry script:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+ fetch('https://jsonplaceholder.typicode.com/users')</span></span><br><span class=\"line\"><span class=\"addition\">+   .then(response =&gt; response.json())</span></span><br><span class=\"line\"><span class=\"addition\">+   .then(json =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     console.log('We retrieved some data! AND we\\'re confident it will work on a variety of browser distributions.')</span></span><br><span class=\"line\"><span class=\"addition\">+     console.log(json)</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   .catch(error =&gt; console.error('Something went wrong when fetching this data: ', error))</span></span><br></pre></td></tr></table></figure>\n<p>如果我们运行build，将会生成一个 <code>polyfills.bundle.js</code> 文件，并且浏览器中的所有内容都应该顺利运行。请注意，这种设置可能会得到改善，因为这只是解决如何把腻子只提供给真正需要它们的用户的一种方法。</p>\n<h2 id=\"进一步的优化\"><a href=\"#进一步的优化\" class=\"headerlink\" title=\"进一步的优化\"></a>进一步的优化</h2><p><code>babel-preset-env</code> 包则是通过一个 <a href=\"https://github.com/ai/browserslist\">browserslist</a>来匹配你浏览器，并且转码你浏览器所不支持的的代码。通过<code>useBuiltIns</code> 选项进行预设，默认为 <code>false</code>，通过 <code>import</code> 的方法导入更细粒度的功能来覆盖你的全局 <code>babel-polyfill</code>配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/es7.string.pad-start'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/es7.string.pad-end'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.timers'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.immediate'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.dom.iterable'</span>;</span><br></pre></td></tr></table></figure>\n<p>有关详细信息，请参阅<a href=\"https://github.com/babel/babel-preset-env\">知识库</a>。</p>\n<h2 id=\"Node的内部插件\"><a href=\"#Node的内部插件\" class=\"headerlink\" title=\"Node的内部插件\"></a>Node的内部插件</h2><p>Node的内部插件，比如 <code>process</code> 能够根据您的配置文件直接打腻子，而无需使用任何特殊的loaders或插件。 查看<a href=\"/configuration/node\">node配置页面</a>，那里有过多的信息和事例。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>在处理传统模块时，还有一些其他工具可以帮助您。</p>\n<p><a href=\"/loaders/script-loader/\"><code>script-loader</code></a>能够评估你的全局上下文的代码。作用类似于一个 <code>script</code> 的标签容器。在这种模式下，每个正常的库都应该工作。<code>require</code>、<code>module</code> 等等未被定义。</p>\n<p>W&gt;当使用 <code>script-loader</code> 时，将该模块作为字符串添加到捆绑包中。它不会被 <code>webpack</code> 最小化，所以请使用最小化的版本。对于这个加载器添加的库，也么有 <code>devtool</code> 支持。</p>\n<p>当没有AMD/CommonJS版本的模块，并且您想要包括到 <code>dist</code> 中去，你可以在 <a href=\"/configuration/module/#module-noparse\"><code>noParse</code></a> 中标记这个模块。他将告诉webpack引用这个模块不需要匹配或分析 <code>require()</code> 和  <code>import</code> 语法。这种做法也用于提高构建性能。</p>\n<p>W&gt; 任何需要AST的功能， 例如 <code>ProvidePlugin</code>，将不再工作。</p>\n<p>最后，有一些模块支持不同的 <a href=\"/concepts/modules\">模块风格</a>，如AMD，CommonJS和传统。在大多数情况下，他们首先检查 <code>define</code>，然后使用一些古怪的代码来导出属性。在这种情况下，可以通过 <a href=\"/loaders/imports-loader/\"><code>imports-loader</code></a> 设置 <code>define=&gt;false</code> 来强制导入CommonJS路径。</p>\n<hr>\n<blockquote>\n<p>原文：<a href=\"https://webpack.js.org/guides/shimming/\">https://webpack.js.org/guides/shimming/</a></p>\n</blockquote>"},{"title":"webpack的常用插件","date":"2017-11-05T12:29:15.000Z","_content":"\n__project__\n\n``` diff\nhtml-webpack-plugin\n|- package.json\n|- webpack.config.js\n|- /src\n  |- index.js\n  |- style.css\n|- /index.html\n|- /node_modules\n```\n\n<!--more -->\n__index.html__\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<script src=\"./dist/index.js\"></script>\n</body>\n</html>\n```\n__package.json__\n\n``` javascript\n{\n  \"name\": \"html-webpack-plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n  },\n  \"repository\": {},\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"css-loader\": \"^0.28.7\",\n    \"style-loader\": \"^0.19.0\",\n    \"webpack\": \"^3.8.1\"\n  }\n}\n```\n__webpack.config.js__\n\n``` javascript\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    { loader: 'style-loader' },\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            modules: true\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n};\n```\n\n\n__src/index.js__\n\n``` javascript\nimport style from './style.css';\n\nconst h1 = document.createElement('h1');\nh1.className = style.danger;\nh1.innerHTML = 'hello webpack';\ndocument.body.appendChild(h1);\n```\n\n__src/style.css__\n\n``` css\n.danger{\n    color: red\n}\n```\n\n```bash\nnpm i\nnpm run build\n```\n__extract-text-webpack-plugin__\n\n[extract-text-webpack-plugin](https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/)：从捆绑包或捆绑包中提取文本到单独的文件中。\n\n```bash\nnpm install --save-dev extract-text-webpack-plugin\n```\n\n``` diff \nconst path = require('path');\n+const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n-           {\n-               test: /\\.css$/,\n-               use: [\n-                  { loader: 'style-loader' },\n-                  {\n-                       loader: 'css-loader',\n-                       options: {\n-                           modules: true\n-                       }\n-                   }\n-               ]\n-           }\n+           {\n+               test: /\\.css$/,\n+               use: ExtractTextWebpackPlugin.extract({\n+                   fallback: \"style-loader\",\n+                   use: [{\n+                       loader: 'css-loader',\n+                       options: {\n+                           modules: true,\n+                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n+                       }\n+                   }]\n+               })\n+           }\n        ]\n-   }\n+   },\n+plugins: [\n+       new ExtractTextWebpackPlugin(\"style.css\")\n+   ]\n};\n```\n__index.html__\n``` diff\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+   <link type=\"text/css\" rel=\"stylesheet\" href=\"./dist/style.css\"/>\n</head>\n<body>\n<script src=\"./dist/index.js\"></script>\n</body>\n</html>\n```\n```bash\nnpm run build\n```\n```javascript\nuse: ExtractTextWebpackPlugin.extract(\n    {\n        fallback: \"style-loader\", // 编译后用什么loader来提取css文件\n        use: \"css-loader\" // 指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader\n    }\n)\n\n```\n__clean-webpack-plugin__\n\n[clean-webpack-plugin](https://www.npmjs.com/package/clean-webpack-plugin)：对目标文件的清理\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n``` diff \nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\n+const CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n           {\n               test: /\\.css$/,\n               use: ExtractTextWebpackPlugin.extract({\n                   fallback: \"style-loader\",\n                   use: [{\n                       loader: 'css-loader',\n                       options: {\n                           modules: true,\n                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n                       }\n                   }]\n               })\n           }\n        ]\n     },\nplugins: [\n+       new CleanWebpackPlugin(['dist']),\n        new ExtractTextWebpackPlugin(\"style.css\")\n    ]\n};\n```\n```bash\nnpm run build\n```\n```javascript\n//参数说明\nnew CleanWebpackPlugin(\n    ['dist/main.*.js','dist/manifest.*.js'],　  //匹配删除的文件\n    {\n        root: __dirname,       　　　　　　　　　　//根目录\n        verbose:  true,        　　　　　　　　　　//开启在控制台输出信息\n        dry:      false        　　　　　　　　　　//启用删除文件\n    }\n)\n```\n\n__html-webpack-plugin__\n[html-webpack-plugin](https://doc.webpack-china.org/plugins/html-webpack-plugin)：简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n``` diff \nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n+const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n           {\n               test: /\\.css$/,\n               use: ExtractTextWebpackPlugin.extract({\n                   fallback: \"style-loader\",\n                   use: [{\n                       loader: 'css-loader',\n                       options: {\n                           modules: true,\n                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n                       }\n                   }]\n               })\n           }\n        ]\n     },\nplugins: [\n+       new HtmlWebpackPlugin({\n+           filename: 'main.html',\n+           template: './src/template.html',\n+           title: 'Webpack App title from webpack'\n+       }),\n        new CleanWebpackPlugin(['dist']),\n        new ExtractTextWebpackPlugin(\"style.css\")\n    ]\n};\n```\n\n\n__src/template.html__\n\n``` html\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body></body>\n</html>\n```\n```bash\nnpm run build  \n```\n```javascript\n//参数说明\nnew HtmlWebpackPlugin(\n    {\n        title: 'Webpack App title from webpack', // 用来生成页面的 title 元素\n        filename: 'main.html', // 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。\n        template: './src/template.html' // 模板文件路径，支持加载器，比如 html!./index.html\n        inject: 'head', // true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者    templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。\n        favicon: 'path/to/yourfile.ico', // 添加特定的 favicon 路径到输出的 HTML 文件中。\n        minify: { // {} | false , 传递 html-minifier 选项给 minify 输出\n            removeAttributeQuotes: true // 移除属性的引号\n        },\n        hash: true, // true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS件，对于解除 cache 很有用。<script type=text/javascript src=bundle.js?22b9692e22e7be37b57e></script>\n        cache: true, // true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。\n        showErrors:true, // true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中\n        chunks: ['chunk1','chunk2'], // 允许只添加某些块 (比如，仅仅 unit test 块)\n        excludeChunks: ['chunk3','chunk4'],// 允许跳过某些块，(比如，跳过单元测试的块)        \n    }\n)\n```\n>参考https://segmentfault.com/a/1190000007294861\n","source":"_posts/webpack的常用插件.md","raw":"---\ntitle: webpack的常用插件\ndate: 2017-11-05 20:29:15\ntags: ['webpack','前端','js','javascript']\ncategory: 'coding'\n---\n\n__project__\n\n``` diff\nhtml-webpack-plugin\n|- package.json\n|- webpack.config.js\n|- /src\n  |- index.js\n  |- style.css\n|- /index.html\n|- /node_modules\n```\n\n<!--more -->\n__index.html__\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<script src=\"./dist/index.js\"></script>\n</body>\n</html>\n```\n__package.json__\n\n``` javascript\n{\n  \"name\": \"html-webpack-plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n  },\n  \"repository\": {},\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"css-loader\": \"^0.28.7\",\n    \"style-loader\": \"^0.19.0\",\n    \"webpack\": \"^3.8.1\"\n  }\n}\n```\n__webpack.config.js__\n\n``` javascript\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    { loader: 'style-loader' },\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            modules: true\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n};\n```\n\n\n__src/index.js__\n\n``` javascript\nimport style from './style.css';\n\nconst h1 = document.createElement('h1');\nh1.className = style.danger;\nh1.innerHTML = 'hello webpack';\ndocument.body.appendChild(h1);\n```\n\n__src/style.css__\n\n``` css\n.danger{\n    color: red\n}\n```\n\n```bash\nnpm i\nnpm run build\n```\n__extract-text-webpack-plugin__\n\n[extract-text-webpack-plugin](https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/)：从捆绑包或捆绑包中提取文本到单独的文件中。\n\n```bash\nnpm install --save-dev extract-text-webpack-plugin\n```\n\n``` diff \nconst path = require('path');\n+const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n-           {\n-               test: /\\.css$/,\n-               use: [\n-                  { loader: 'style-loader' },\n-                  {\n-                       loader: 'css-loader',\n-                       options: {\n-                           modules: true\n-                       }\n-                   }\n-               ]\n-           }\n+           {\n+               test: /\\.css$/,\n+               use: ExtractTextWebpackPlugin.extract({\n+                   fallback: \"style-loader\",\n+                   use: [{\n+                       loader: 'css-loader',\n+                       options: {\n+                           modules: true,\n+                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n+                       }\n+                   }]\n+               })\n+           }\n        ]\n-   }\n+   },\n+plugins: [\n+       new ExtractTextWebpackPlugin(\"style.css\")\n+   ]\n};\n```\n__index.html__\n``` diff\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+   <link type=\"text/css\" rel=\"stylesheet\" href=\"./dist/style.css\"/>\n</head>\n<body>\n<script src=\"./dist/index.js\"></script>\n</body>\n</html>\n```\n```bash\nnpm run build\n```\n```javascript\nuse: ExtractTextWebpackPlugin.extract(\n    {\n        fallback: \"style-loader\", // 编译后用什么loader来提取css文件\n        use: \"css-loader\" // 指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader\n    }\n)\n\n```\n__clean-webpack-plugin__\n\n[clean-webpack-plugin](https://www.npmjs.com/package/clean-webpack-plugin)：对目标文件的清理\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n``` diff \nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\n+const CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n           {\n               test: /\\.css$/,\n               use: ExtractTextWebpackPlugin.extract({\n                   fallback: \"style-loader\",\n                   use: [{\n                       loader: 'css-loader',\n                       options: {\n                           modules: true,\n                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n                       }\n                   }]\n               })\n           }\n        ]\n     },\nplugins: [\n+       new CleanWebpackPlugin(['dist']),\n        new ExtractTextWebpackPlugin(\"style.css\")\n    ]\n};\n```\n```bash\nnpm run build\n```\n```javascript\n//参数说明\nnew CleanWebpackPlugin(\n    ['dist/main.*.js','dist/manifest.*.js'],　  //匹配删除的文件\n    {\n        root: __dirname,       　　　　　　　　　　//根目录\n        verbose:  true,        　　　　　　　　　　//开启在控制台输出信息\n        dry:      false        　　　　　　　　　　//启用删除文件\n    }\n)\n```\n\n__html-webpack-plugin__\n[html-webpack-plugin](https://doc.webpack-china.org/plugins/html-webpack-plugin)：简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n``` diff \nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n+const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n           {\n               test: /\\.css$/,\n               use: ExtractTextWebpackPlugin.extract({\n                   fallback: \"style-loader\",\n                   use: [{\n                       loader: 'css-loader',\n                       options: {\n                           modules: true,\n                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n                       }\n                   }]\n               })\n           }\n        ]\n     },\nplugins: [\n+       new HtmlWebpackPlugin({\n+           filename: 'main.html',\n+           template: './src/template.html',\n+           title: 'Webpack App title from webpack'\n+       }),\n        new CleanWebpackPlugin(['dist']),\n        new ExtractTextWebpackPlugin(\"style.css\")\n    ]\n};\n```\n\n\n__src/template.html__\n\n``` html\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body></body>\n</html>\n```\n```bash\nnpm run build  \n```\n```javascript\n//参数说明\nnew HtmlWebpackPlugin(\n    {\n        title: 'Webpack App title from webpack', // 用来生成页面的 title 元素\n        filename: 'main.html', // 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。\n        template: './src/template.html' // 模板文件路径，支持加载器，比如 html!./index.html\n        inject: 'head', // true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者    templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。\n        favicon: 'path/to/yourfile.ico', // 添加特定的 favicon 路径到输出的 HTML 文件中。\n        minify: { // {} | false , 传递 html-minifier 选项给 minify 输出\n            removeAttributeQuotes: true // 移除属性的引号\n        },\n        hash: true, // true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS件，对于解除 cache 很有用。<script type=text/javascript src=bundle.js?22b9692e22e7be37b57e></script>\n        cache: true, // true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。\n        showErrors:true, // true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中\n        chunks: ['chunk1','chunk2'], // 允许只添加某些块 (比如，仅仅 unit test 块)\n        excludeChunks: ['chunk3','chunk4'],// 允许跳过某些块，(比如，跳过单元测试的块)        \n    }\n)\n```\n>参考https://segmentfault.com/a/1190000007294861\n","slug":"webpack的常用插件","published":1,"updated":"2017-11-06T10:39:24.000Z","_id":"cj9nidf9i0001mwrctlmp73jd","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html-webpack-plugin</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- /src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">  |- style.css</span><br><span class=\"line\">|- /index.html</span><br><span class=\"line\">|- /node_modules</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>index.html</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./dist/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"html-webpack-plugin\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.config.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^3.8.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader'</span> &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">loader</span>: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">modules</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">'./style.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> h1 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'h1'</span>);</span><br><span class=\"line\">h1.className = style.danger;</span><br><span class=\"line\">h1.innerHTML = <span class=\"string\">'hello webpack'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(h1);</span><br></pre></td></tr></table></figure>\n<p><strong>src/style.css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.danger</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p><strong>extract-text-webpack-plugin</strong></p>\n<p><a href=\"https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/\" target=\"_blank\" rel=\"external\">extract-text-webpack-plugin</a>：从捆绑包或捆绑包中提取文本到单独的文件中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev extract-text-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\"><span class=\"addition\">+const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\"><span class=\"deletion\">-           &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-               test: /\\.css$/,</span></span><br><span class=\"line\"><span class=\"deletion\">-               use: [</span></span><br><span class=\"line\"><span class=\"deletion\">-                  &#123; loader: 'style-loader' &#125;,</span></span><br><span class=\"line\"><span class=\"deletion\">-                  &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-                       loader: 'css-loader',</span></span><br><span class=\"line\"><span class=\"deletion\">-                       options: &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-                           modules: true</span></span><br><span class=\"line\"><span class=\"deletion\">-                       &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-                   &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-               ]</span></span><br><span class=\"line\"><span class=\"deletion\">-           &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+           &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+               test: /\\.css$/,</span></span><br><span class=\"line\"><span class=\"addition\">+               use: ExtractTextWebpackPlugin.extract(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                   fallback: \"style-loader\",</span></span><br><span class=\"line\"><span class=\"addition\">+                   use: [&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                       loader: 'css-loader',</span></span><br><span class=\"line\"><span class=\"addition\">+                       options: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                           modules: true,</span></span><br><span class=\"line\"><span class=\"addition\">+                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span></span><br><span class=\"line\"><span class=\"addition\">+                       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+                   &#125;]</span></span><br><span class=\"line\"><span class=\"addition\">+               &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+           &#125;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+plugins: [</span></span><br><span class=\"line\"><span class=\"addition\">+       new ExtractTextWebpackPlugin(\"style.css\")</span></span><br><span class=\"line\"><span class=\"addition\">+   ]</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>index.html</strong><br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span><br><span class=\"line\">    &lt;title&gt;hello webpack&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta name=\"description\" content=\"\"&gt;</span><br><span class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;</span><br><span class=\"line\"><span class=\"addition\">+   &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"./dist/style.css\"/&gt;</span></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script src=\"./dist/index.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use: ExtractTextWebpackPlugin.extract(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">fallback</span>: <span class=\"string\">\"style-loader\"</span>, <span class=\"comment\">// 编译后用什么loader来提取css文件</span></span><br><span class=\"line\">        use: <span class=\"string\">\"css-loader\"</span> <span class=\"comment\">// 指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>clean-webpack-plugin</strong></p>\n<p><a href=\"https://www.npmjs.com/package/clean-webpack-plugin\" target=\"_blank\" rel=\"external\">clean-webpack-plugin</a>：对目标文件的清理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\">const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span><br><span class=\"line\"><span class=\"addition\">+const CleanWebpackPlugin = require('clean-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               test: /\\.css$/,</span><br><span class=\"line\">               use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class=\"line\">                   fallback: \"style-loader\",</span><br><span class=\"line\">                   use: [&#123;</span><br><span class=\"line\">                       loader: 'css-loader',</span><br><span class=\"line\">                       options: &#123;</span><br><span class=\"line\">                           modules: true,</span><br><span class=\"line\">                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"addition\">+       new CleanWebpackPlugin(['dist']),</span></span><br><span class=\"line\">        new ExtractTextWebpackPlugin(\"style.css\")</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数说明</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> CleanWebpackPlugin(</span><br><span class=\"line\">    [<span class=\"string\">'dist/main.*.js'</span>,<span class=\"string\">'dist/manifest.*.js'</span>],　  <span class=\"comment\">//匹配删除的文件</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: __dirname,       　　　　　　　　　　<span class=\"comment\">//根目录</span></span><br><span class=\"line\">        verbose:  <span class=\"literal\">true</span>,        　　　　　　　　　　<span class=\"comment\">//开启在控制台输出信息</span></span><br><span class=\"line\">        dry:      <span class=\"literal\">false</span>        　　　　　　　　　　<span class=\"comment\">//启用删除文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>html-webpack-plugin</strong><br><a href=\"https://doc.webpack-china.org/plugins/html-webpack-plugin\" target=\"_blank\" rel=\"external\">html-webpack-plugin</a>：简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\">const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span><br><span class=\"line\">const CleanWebpackPlugin = require('clean-webpack-plugin');</span><br><span class=\"line\"><span class=\"addition\">+const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               test: /\\.css$/,</span><br><span class=\"line\">               use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class=\"line\">                   fallback: \"style-loader\",</span><br><span class=\"line\">                   use: [&#123;</span><br><span class=\"line\">                       loader: 'css-loader',</span><br><span class=\"line\">                       options: &#123;</span><br><span class=\"line\">                           modules: true,</span><br><span class=\"line\">                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"addition\">+       new HtmlWebpackPlugin(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+           filename: 'main.html',</span></span><br><span class=\"line\"><span class=\"addition\">+           template: './src/template.html',</span></span><br><span class=\"line\"><span class=\"addition\">+           title: 'Webpack App title from webpack'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;),</span></span><br><span class=\"line\">        new CleanWebpackPlugin(['dist']),</span><br><span class=\"line\">        new ExtractTextWebpackPlugin(\"style.css\")</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>src/template.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">htmlWebpackPlugin.options.title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数说明</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'Webpack App title from webpack'</span>, <span class=\"comment\">// 用来生成页面的 title 元素</span></span><br><span class=\"line\">        filename: <span class=\"string\">'main.html'</span>, <span class=\"comment\">// 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。</span></span><br><span class=\"line\">        template: <span class=\"string\">'./src/template.html'</span> <span class=\"comment\">// 模板文件路径，支持加载器，比如 html!./index.html</span></span><br><span class=\"line\">        inject: <span class=\"string\">'head'</span>, <span class=\"comment\">// true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者    templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。</span></span><br><span class=\"line\">        favicon: <span class=\"string\">'path/to/yourfile.ico'</span>, <span class=\"comment\">// 添加特定的 favicon 路径到输出的 HTML 文件中。</span></span><br><span class=\"line\">        minify: &#123; <span class=\"comment\">// &#123;&#125; | false , 传递 html-minifier 选项给 minify 输出</span></span><br><span class=\"line\">            removeAttributeQuotes: <span class=\"literal\">true</span> <span class=\"comment\">// 移除属性的引号</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS件，对于解除 cache 很有用。&lt;script type=text/javascript src=bundle.js?22b9692e22e7be37b57e&gt;&lt;/script&gt;</span></span><br><span class=\"line\">        cache: <span class=\"literal\">true</span>, <span class=\"comment\">// true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。</span></span><br><span class=\"line\">        showErrors:<span class=\"literal\">true</span>, <span class=\"comment\">// true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中</span></span><br><span class=\"line\">        chunks: [<span class=\"string\">'chunk1'</span>,<span class=\"string\">'chunk2'</span>], <span class=\"comment\">// 允许只添加某些块 (比如，仅仅 unit test 块)</span></span><br><span class=\"line\">        excludeChunks: [<span class=\"string\">'chunk3'</span>,<span class=\"string\">'chunk4'</span>],<span class=\"comment\">// 允许跳过某些块，(比如，跳过单元测试的块)        </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考<a href=\"https://segmentfault.com/a/1190000007294861\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000007294861</a></p>\n</blockquote>\n","excerpt":"<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html-webpack-plugin</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- /src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">  |- style.css</span><br><span class=\"line\">|- /index.html</span><br><span class=\"line\">|- /node_modules</span><br></pre></td></tr></table></figure>","more":"<p><strong>index.html</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./dist/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"html-webpack-plugin\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.config.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^3.8.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader'</span> &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">loader</span>: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">modules</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">'./style.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> h1 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'h1'</span>);</span><br><span class=\"line\">h1.className = style.danger;</span><br><span class=\"line\">h1.innerHTML = <span class=\"string\">'hello webpack'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(h1);</span><br></pre></td></tr></table></figure>\n<p><strong>src/style.css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.danger</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p><strong>extract-text-webpack-plugin</strong></p>\n<p><a href=\"https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/\">extract-text-webpack-plugin</a>：从捆绑包或捆绑包中提取文本到单独的文件中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev extract-text-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\"><span class=\"addition\">+const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\"><span class=\"deletion\">-           &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-               test: /\\.css$/,</span></span><br><span class=\"line\"><span class=\"deletion\">-               use: [</span></span><br><span class=\"line\"><span class=\"deletion\">-                  &#123; loader: 'style-loader' &#125;,</span></span><br><span class=\"line\"><span class=\"deletion\">-                  &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-                       loader: 'css-loader',</span></span><br><span class=\"line\"><span class=\"deletion\">-                       options: &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-                           modules: true</span></span><br><span class=\"line\"><span class=\"deletion\">-                       &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-                   &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-               ]</span></span><br><span class=\"line\"><span class=\"deletion\">-           &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+           &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+               test: /\\.css$/,</span></span><br><span class=\"line\"><span class=\"addition\">+               use: ExtractTextWebpackPlugin.extract(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                   fallback: \"style-loader\",</span></span><br><span class=\"line\"><span class=\"addition\">+                   use: [&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                       loader: 'css-loader',</span></span><br><span class=\"line\"><span class=\"addition\">+                       options: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                           modules: true,</span></span><br><span class=\"line\"><span class=\"addition\">+                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span></span><br><span class=\"line\"><span class=\"addition\">+                       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+                   &#125;]</span></span><br><span class=\"line\"><span class=\"addition\">+               &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+           &#125;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+plugins: [</span></span><br><span class=\"line\"><span class=\"addition\">+       new ExtractTextWebpackPlugin(\"style.css\")</span></span><br><span class=\"line\"><span class=\"addition\">+   ]</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>index.html</strong><br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span><br><span class=\"line\">    &lt;title&gt;hello webpack&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta name=\"description\" content=\"\"&gt;</span><br><span class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;</span><br><span class=\"line\"><span class=\"addition\">+   &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"./dist/style.css\"/&gt;</span></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script src=\"./dist/index.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use: ExtractTextWebpackPlugin.extract(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">fallback</span>: <span class=\"string\">\"style-loader\"</span>, <span class=\"comment\">// 编译后用什么loader来提取css文件</span></span><br><span class=\"line\">        use: <span class=\"string\">\"css-loader\"</span> <span class=\"comment\">// 指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>clean-webpack-plugin</strong></p>\n<p><a href=\"https://www.npmjs.com/package/clean-webpack-plugin\">clean-webpack-plugin</a>：对目标文件的清理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\">const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span><br><span class=\"line\"><span class=\"addition\">+const CleanWebpackPlugin = require('clean-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               test: /\\.css$/,</span><br><span class=\"line\">               use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class=\"line\">                   fallback: \"style-loader\",</span><br><span class=\"line\">                   use: [&#123;</span><br><span class=\"line\">                       loader: 'css-loader',</span><br><span class=\"line\">                       options: &#123;</span><br><span class=\"line\">                           modules: true,</span><br><span class=\"line\">                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"addition\">+       new CleanWebpackPlugin(['dist']),</span></span><br><span class=\"line\">        new ExtractTextWebpackPlugin(\"style.css\")</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数说明</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> CleanWebpackPlugin(</span><br><span class=\"line\">    [<span class=\"string\">'dist/main.*.js'</span>,<span class=\"string\">'dist/manifest.*.js'</span>],　  <span class=\"comment\">//匹配删除的文件</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: __dirname,       　　　　　　　　　　<span class=\"comment\">//根目录</span></span><br><span class=\"line\">        verbose:  <span class=\"literal\">true</span>,        　　　　　　　　　　<span class=\"comment\">//开启在控制台输出信息</span></span><br><span class=\"line\">        dry:      <span class=\"literal\">false</span>        　　　　　　　　　　<span class=\"comment\">//启用删除文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>html-webpack-plugin</strong><br><a href=\"https://doc.webpack-china.org/plugins/html-webpack-plugin\">html-webpack-plugin</a>：简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\">const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span><br><span class=\"line\">const CleanWebpackPlugin = require('clean-webpack-plugin');</span><br><span class=\"line\"><span class=\"addition\">+const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               test: /\\.css$/,</span><br><span class=\"line\">               use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class=\"line\">                   fallback: \"style-loader\",</span><br><span class=\"line\">                   use: [&#123;</span><br><span class=\"line\">                       loader: 'css-loader',</span><br><span class=\"line\">                       options: &#123;</span><br><span class=\"line\">                           modules: true,</span><br><span class=\"line\">                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"addition\">+       new HtmlWebpackPlugin(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+           filename: 'main.html',</span></span><br><span class=\"line\"><span class=\"addition\">+           template: './src/template.html',</span></span><br><span class=\"line\"><span class=\"addition\">+           title: 'Webpack App title from webpack'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;),</span></span><br><span class=\"line\">        new CleanWebpackPlugin(['dist']),</span><br><span class=\"line\">        new ExtractTextWebpackPlugin(\"style.css\")</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>src/template.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">htmlWebpackPlugin.options.title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数说明</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'Webpack App title from webpack'</span>, <span class=\"comment\">// 用来生成页面的 title 元素</span></span><br><span class=\"line\">        filename: <span class=\"string\">'main.html'</span>, <span class=\"comment\">// 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。</span></span><br><span class=\"line\">        template: <span class=\"string\">'./src/template.html'</span> <span class=\"comment\">// 模板文件路径，支持加载器，比如 html!./index.html</span></span><br><span class=\"line\">        inject: <span class=\"string\">'head'</span>, <span class=\"comment\">// true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者    templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。</span></span><br><span class=\"line\">        favicon: <span class=\"string\">'path/to/yourfile.ico'</span>, <span class=\"comment\">// 添加特定的 favicon 路径到输出的 HTML 文件中。</span></span><br><span class=\"line\">        minify: &#123; <span class=\"comment\">// &#123;&#125; | false , 传递 html-minifier 选项给 minify 输出</span></span><br><span class=\"line\">            removeAttributeQuotes: <span class=\"literal\">true</span> <span class=\"comment\">// 移除属性的引号</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS件，对于解除 cache 很有用。&lt;script type=text/javascript src=bundle.js?22b9692e22e7be37b57e&gt;&lt;/script&gt;</span></span><br><span class=\"line\">        cache: <span class=\"literal\">true</span>, <span class=\"comment\">// true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。</span></span><br><span class=\"line\">        showErrors:<span class=\"literal\">true</span>, <span class=\"comment\">// true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中</span></span><br><span class=\"line\">        chunks: [<span class=\"string\">'chunk1'</span>,<span class=\"string\">'chunk2'</span>], <span class=\"comment\">// 允许只添加某些块 (比如，仅仅 unit test 块)</span></span><br><span class=\"line\">        excludeChunks: [<span class=\"string\">'chunk3'</span>,<span class=\"string\">'chunk4'</span>],<span class=\"comment\">// 允许跳过某些块，(比如，跳过单元测试的块)        </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考<a href=\"https://segmentfault.com/a/1190000007294861\">https://segmentfault.com/a/1190000007294861</a></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj9nidf9a0000mwrcstjuzhbj","category_id":"cj9nidf9o0002mwrcbpx1oujc","_id":"cj9nidf9z0005mwrc32qrhjj8"},{"post_id":"cj9nidf9i0001mwrctlmp73jd","category_id":"cj9nidf9o0002mwrcbpx1oujc","_id":"cj9nikhwy0000zurcttt8w26u"}],"PostTag":[{"post_id":"cj9nidf9a0000mwrcstjuzhbj","tag_id":"cj9nidf9w0003mwrcyb4ysf14","_id":"cj9nidfa3000amwrcevpe12c2"},{"post_id":"cj9nidf9a0000mwrcstjuzhbj","tag_id":"cj9nidf9z0004mwrcpp7fc3dw","_id":"cj9nidfa3000bmwrcu7at6bxo"},{"post_id":"cj9nidf9a0000mwrcstjuzhbj","tag_id":"cj9nidfa00006mwrc51uobdy6","_id":"cj9nidfa4000dmwrccijqiqy0"},{"post_id":"cj9nidf9a0000mwrcstjuzhbj","tag_id":"cj9nidfa00007mwrchw4tma3n","_id":"cj9nidfa4000emwrc5cakvjz6"},{"post_id":"cj9nidf9a0000mwrcstjuzhbj","tag_id":"cj9nidfa00008mwrcet0ro7zy","_id":"cj9nidfa4000gmwrcp2abm6yf"},{"post_id":"cj9nidf9i0001mwrctlmp73jd","tag_id":"cj9nidf9w0003mwrcyb4ysf14","_id":"cj9nidfa8000imwrccrqm2gav"},{"post_id":"cj9nidf9i0001mwrctlmp73jd","tag_id":"cj9nidf9z0004mwrcpp7fc3dw","_id":"cj9nidfa8000jmwrcy33ot586"},{"post_id":"cj9nidf9i0001mwrctlmp73jd","tag_id":"cj9nidfa00006mwrc51uobdy6","_id":"cj9nidfa9000kmwrc2bfydf7m"},{"post_id":"cj9nidf9i0001mwrctlmp73jd","tag_id":"cj9nidfa00007mwrchw4tma3n","_id":"cj9nidfab000lmwrc3ws9tj21"}],"Tag":[{"name":"webpack","_id":"cj9nidf9w0003mwrcyb4ysf14"},{"name":"前端","_id":"cj9nidf9z0004mwrcpp7fc3dw"},{"name":"js","_id":"cj9nidfa00006mwrc51uobdy6"},{"name":"javascript","_id":"cj9nidfa00007mwrchw4tma3n"},{"name":"shimming","_id":"cj9nidfa00008mwrcet0ro7zy"}]}}