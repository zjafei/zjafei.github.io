{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.507b3a.css","path":"main.507b3a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.507b3a.js","path":"main.507b3a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.fdc4b7.js","path":"mobile.fdc4b7.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1513425035675},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1513425035680},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1513425035682},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1513425035687},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1513425035692},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1513425035700},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1513425035693},{"_id":"themes/yilia/_config.yml","hash":"92f66c9e48f7206be82d8b584978e2b3755a5bf0","modified":1513425035709},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1513425036095},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1513425036609},{"_id":"source/_posts/css布局：两栏、三栏，从圣杯到双飞翼.md","hash":"a32c8104a596806d313c49292a90a529aef4ed0c","modified":1513425034834},{"_id":"source/_posts/react的state和基于props的父子组件和兄弟组件沟通.md","hash":"04294a16cc097606f360c1715107e0ef18bc7a6f","modified":1513425034889},{"_id":"source/_posts/npm对包版本管理的机制.md","hash":"c39cb5a1c305caa676428a0fdca50aaf1e01608e","modified":1513425034883},{"_id":"source/_posts/react通过redux和redux-saga管理状态.md","hash":"ca1037e2ae5d25a3884e6ec512a23e721286963b","modified":1513425396021},{"_id":"source/_posts/ubuntu安装Jenkins.md","hash":"6c0f648335e386d29dcbd053ae9159b2202fffab","modified":1513425034924},{"_id":"source/_posts/ubuntu16-0-4上python版本切换的问题.md","hash":"dc0b1a023657f778dffbbd40d5acefecb805a8e6","modified":1513425034904},{"_id":"source/_posts/webpack的常用插件.md","hash":"3d1fd3cfbe950d9c51fd12b0f9366cd9983a8176","modified":1513425034959},{"_id":"source/_posts/webpack-集成-Integrations-翻译.md","hash":"484143c3e10490c9f22bdd1e730c432bf6286302","modified":1513425034932},{"_id":"source/_posts/从高阶函数到高阶组件.md","hash":"6af0404fbb061b7769c1e65e7e8a1a29816ba81f","modified":1513425034975},{"_id":"source/_posts/使您的JavaScript纯净.md","hash":"6d06ab8d1d8e88ad64da4861085a0c3e42ea02be","modified":1513425034990},{"_id":"source/_posts/webpack的shimming的翻译.md","hash":"3f39ac7fce545bc44fdb17a5986bee8abc71be2b","modified":1513425034949},{"_id":"source/_posts/高阶组件：react应用设计模式.md","hash":"3530f6762d654a55cd762d8707d8042b393d5276","modified":1513425035007},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1513425035711},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1513425035712},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1513425035713},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1513425035714},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1513425035715},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1513425035718},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1513425035717},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1513425036065},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1513425036069},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1513425036074},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1513425036086},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1513425036091},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1513425036093},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1513425036094},{"_id":"themes/yilia/source/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1513425036444},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1513425036599},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1513425036100},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1513425036401},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513425036034},{"_id":"themes/yilia/source/main.507b3a.js","hash":"1be71323e357bcc2d99568bc622f23f152811f2e","modified":1513425036490},{"_id":"themes/yilia/source/mobile.fdc4b7.js","hash":"6bfff9bfe4d7e067b6289e851a4c424ac815af5e","modified":1513425036549},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1513425035727},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1513425035734},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1513425035774},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1513425035733},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1513425035776},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1513425035793},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"b011d92be321ebe09fa2b3179c08aa435b9d051c","modified":1513425035800},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"42d97cc3bd098ff95d1f37dc9a84443da0af311a","modified":1513425035801},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1513425035802},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1513425035820},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1513425035840},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1513425035828},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1513425035850},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1513425035861},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1513425036055},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1513425036060},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1513425036407},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1513425036413},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1513425036420},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1513425036426},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1513425036432},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1513425036435},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1513425036433},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1513425036436},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1513425036438},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1513425036106},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1513425036112},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1513425036117},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1513425036123},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1513425036129},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1513425036134},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1513425036140},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1513425036146},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1513425036152},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1513425036186},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1513425036224},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1513425036232},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1513425036230},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1513425036233},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1513425036243},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1513425036248},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1513425036253},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1513425036255},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1513425036254},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1513425036257},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1513425036264},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1513425036258},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1513425036269},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1513425036274},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1513425036275},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1513425036281},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1513425036286},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1513425036308},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1513425036322},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1513425036334},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1513425036336},{"_id":"themes/yilia/source-src/js/fix.js","hash":"7f9599ffd5c5551538e90b97023e7d6c599d1ee6","modified":1513425036343},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1513425036344},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1513425036346},{"_id":"themes/yilia/source-src/js/report.js","hash":"1f6c25cba98abdbf51dd7fda1b75ab655a24327f","modified":1513425036355},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1513425036356},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1513425036357},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1513425036376},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"e8a35d4497fe1e0f119662ae08bd8404e5dab2a4","modified":1513425036384},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"439f2afa6c3515a7edd67d512aae6eba5b1b0d0b","modified":1513425036034},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1513425035872},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"ec71ffc2023cebd933c96bd35a7a23d44a30a422","modified":1513425035898},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1513425035904},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1513425035924},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1513425035915},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1513425035929},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1513425035931},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1513425035941},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1513425035943},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1513425035951},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1513425036155},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1513425036163},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1513425036174},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1513425036185},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1513425036183},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1513425036200},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1513425036213},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1513425036207},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1513425036219},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1513425036235},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1513425036241},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1513425036236},{"_id":"public/content.json","hash":"f977311790ba3400ba2da91d2ae13c459e3cfe23","modified":1513425420128},{"_id":"public/2017/12/16/react通过redux和redux-saga管理状态/index.html","hash":"bfdde9b65a2f6bc5609f746607f794128903ee24","modified":1513425420225},{"_id":"public/2017/12/16/react的state和基于props的父子组件和兄弟组件沟通/index.html","hash":"7703b62c1534436ebce0de19b1f8c72d16f24857","modified":1513425420226},{"_id":"public/2017/12/11/ubuntu16-0-4上python版本切换的问题/index.html","hash":"dfcfdb390dc395fff64795f5bf0778c974417e6e","modified":1513425420226},{"_id":"public/2017/12/11/npm对包版本管理的机制/index.html","hash":"1404b32d93a1983210d8a61dd02e7513ef8648d9","modified":1513425420226},{"_id":"public/2017/12/06/ubuntu安装Jenkins/index.html","hash":"96b2d629408dafd3dec98348f35bc2ce3387dbaa","modified":1513425420226},{"_id":"public/2017/11/23/css布局：两栏、三栏，从圣杯到双飞翼/index.html","hash":"62d9e1b38b173807dc41c065cbeb5fadd719c297","modified":1513425420227},{"_id":"public/2017/11/15/从高阶函数到高阶组件/index.html","hash":"552f34a1b7090703c98db36480838c6f3ba3f506","modified":1513425420227},{"_id":"public/2017/11/12/高阶组件：react应用设计模式/index.html","hash":"24e32cb3cb507531e3938d4e5676d36066580d8e","modified":1513425420227},{"_id":"public/2017/11/11/使您的JavaScript纯净/index.html","hash":"07e8525b74f09b2d97797e34dc748da28bbe86cf","modified":1513425420227},{"_id":"public/2017/11/11/webpack-集成-Integrations-翻译/index.html","hash":"220224ebf3b8b7d9171d6cc3ca14c6134c302ee9","modified":1513425420228},{"_id":"public/2017/11/05/webpack的常用插件/index.html","hash":"ab702196dab47ef20d6b10d84477684ffee5924f","modified":1513425420228},{"_id":"public/2017/11/03/webpack的shimming的翻译/index.html","hash":"77cb370e9c8952352fa9889499749ca600daf31b","modified":1513425420228},{"_id":"public/archives/index.html","hash":"ca890a159651efc346a70be2338325417792e3ae","modified":1513425420228},{"_id":"public/archives/2017/index.html","hash":"349776ff191faff7ff091cfa3edb941b23b985df","modified":1513425420229},{"_id":"public/archives/2017/11/index.html","hash":"9ca0748c6cd8d8fec3a77dec724725d06e2fe47d","modified":1513425420229},{"_id":"public/archives/2017/12/index.html","hash":"70a0e47b13c6cc5596c60a494ea9b11080d07e35","modified":1513425420229},{"_id":"public/categories/coding/index.html","hash":"da0c6094f541db8eefaf965da9aecf63efedb2b5","modified":1513425420229},{"_id":"public/categories/coding/page/2/index.html","hash":"49bea1489c0f0d720100af7242036e757444f5e2","modified":1513425420230},{"_id":"public/index.html","hash":"086e72d7cd0cf00672c2a1d91c19afd4c2d5a399","modified":1513425420230},{"_id":"public/page/2/index.html","hash":"bbd5f0a6050965b8997c3c98a651cd40014d8168","modified":1513425420230},{"_id":"public/tags/css布局/index.html","hash":"f9206174466edb12265d94953bfdda86a6cb08e3","modified":1513425420230},{"_id":"public/tags/css/index.html","hash":"b845ff3c4de71e8b37d11052664009dd43187764","modified":1513425420230},{"_id":"public/tags/两栏/index.html","hash":"876359c3dc58b9482698362b29bb4a61b3ca96ce","modified":1513425420231},{"_id":"public/tags/三栏/index.html","hash":"649ae10b3626d9d925815f4fa29a599da12d0008","modified":1513425420231},{"_id":"public/tags/圣杯/index.html","hash":"49c38c28b6c0d6d47235f81c0bfbe476786aa266","modified":1513425420231},{"_id":"public/tags/双飞翼/index.html","hash":"c410b1a36a212291f5c44b2fe934a0b76d2403f2","modified":1513425420231},{"_id":"public/tags/bfc/index.html","hash":"bb4cd4ab2ec5b0b65d74a2f90943045007b0065c","modified":1513425420231},{"_id":"public/tags/块格式化上下文/index.html","hash":"b4402138f2932b65a2bad3bc754c573652de0592","modified":1513425420232},{"_id":"public/tags/react/index.html","hash":"16297d7f020c8f584f21bd757fc5dfdb379f7c81","modified":1513425420232},{"_id":"public/tags/state/index.html","hash":"952bdf5e651b30e9239b67da50fe3586d925d5d7","modified":1513425420232},{"_id":"public/tags/props/index.html","hash":"e3f47e2d3a79e7f551ef5f74e8072e667fed4758","modified":1513425420232},{"_id":"public/tags/组件沟通/index.html","hash":"441286ee46624d05bf64962fd44073c0fd4db71f","modified":1513425420233},{"_id":"public/tags/信息传递/index.html","hash":"ee411dfde55d669ad3d6712a08ff8506408014f2","modified":1513425420233},{"_id":"public/tags/ubuntu/index.html","hash":"18ada84c4d373dfa62dd5915da4fe7fdbfde912f","modified":1513425420233},{"_id":"public/tags/python/index.html","hash":"acd6bd4a5982bebc0980998b05da2912d94af1f5","modified":1513425420233},{"_id":"public/tags/版本/index.html","hash":"b1ddcff48ba2ee1355fb0f0d9f0911bbcf52bfa6","modified":1513425420233},{"_id":"public/tags/版本管理/index.html","hash":"3531d79851c24395e03692578e4ba5fa1442c970","modified":1513425420234},{"_id":"public/tags/切换/index.html","hash":"9bc6e5466ea2e92615e216cc6c705cdf488d358d","modified":1513425420234},{"_id":"public/tags/webpack/index.html","hash":"21ffe5d7f6200a8cbe43d4ba38876bf24a8a739a","modified":1513425420234},{"_id":"public/tags/前端/index.html","hash":"93363a5a4e2cb4ec4e5978a8a93a3c5e62ed6948","modified":1513425420234},{"_id":"public/tags/js/index.html","hash":"4c70d347ea9191f80c28523c4b234377b96bf649","modified":1513425420234},{"_id":"public/tags/javascript/index.html","hash":"74533a72f892a9c161d1886f5b3661925a28606c","modified":1513425420235},{"_id":"public/tags/integrations/index.html","hash":"9f047d7330e3d2788856a2026153647fafd82b4f","modified":1513425420235},{"_id":"public/tags/高阶函数/index.html","hash":"634c20be260e9c46d9fac1d41945c593a176a82e","modified":1513425420235},{"_id":"public/tags/纯函数/index.html","hash":"e445b743ea31e1394d51cbd5a64c6f8c2e0e395b","modified":1513425420235},{"_id":"public/tags/高阶组件/index.html","hash":"e2661564e1d350afe916599c697d87aaba01d877","modified":1513425420235},{"_id":"public/tags/pure-funtion/index.html","hash":"c31fbdc8499feb64a05cce8c9f752a4aa0bde8f2","modified":1513425420236},{"_id":"public/tags/side-effects/index.html","hash":"3584b4c100dfa90f5ff2777d5b45e38b86ebc804","modified":1513425420236},{"_id":"public/tags/副作用/index.html","hash":"79bf6d54824993a7c7c471d368134beb8d8f47cd","modified":1513425420236},{"_id":"public/tags/shimming/index.html","hash":"8c55c23b1dad5225dd038f385e6a896708c2cfda","modified":1513425420236},{"_id":"public/tags/reduxe/index.html","hash":"0fb4fc84f1d240d6e82eac783bb5fce664d9d14d","modified":1513425420237},{"_id":"public/tags/redux-saga/index.html","hash":"9e1f7cd4be755e21ec165de69dd63576d4aa2172","modified":1513425420237},{"_id":"public/tags/effect/index.html","hash":"1c8e67e51a962f4bc9a08df1ae4212d5ce3200cc","modified":1513425420237},{"_id":"public/tags/dispatch/index.html","hash":"e6ef80618e952f19e0cabcf7105f19d09508ebec","modified":1513425420237},{"_id":"public/tags/reducer/index.html","hash":"14680136cfacdf85576941604f6f549adba7867e","modified":1513425420238},{"_id":"public/tags/npm/index.html","hash":"581d1eca0ebc93c8fcb2efe6f6c235c85e873d46","modified":1513425420238},{"_id":"public/tags/semver/index.html","hash":"b6426dea490fe1de6870fe33991a0012773005bd","modified":1513425420238},{"_id":"public/tags/package/index.html","hash":"467f53835b956679d7c0268eae374d66ccae9bdd","modified":1513425420238},{"_id":"public/tags/包版本管理/index.html","hash":"9519e866a10b9617269720a015979a99b09c78d5","modified":1513425420239},{"_id":"public/tags/CI/index.html","hash":"8f0e81ca55e62dce7b455fbc9856bed026e2612c","modified":1513425420239},{"_id":"public/tags/持续集成/index.html","hash":"95489356250e9fd0aa4b91e29da8418d9f2b3416","modified":1513425420239},{"_id":"public/tags/jenkins/index.html","hash":"698dc8ab941fa6885a306890254eba555f55fe35","modified":1513425420239},{"_id":"public/tags/continuous-integration/index.html","hash":"c080bd856ed3ed3cae40a2449709ffed55a04b6d","modified":1513425420240},{"_id":"public/tags/组件/index.html","hash":"731d02c86b80622f47a2792d5ab5f8609eebe0eb","modified":1513425420240},{"_id":"public/tags/Higher-Order-Components/index.html","hash":"1f58211d4d562c2746ac77f88f835e7794401d7a","modified":1513425420240},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1513425420244},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1513425420244},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1513425420244},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1513425420244},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1513425420245},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1513425420245},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1513425420245},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1513425420245},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1513425420245},{"_id":"public/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1513425420252},{"_id":"public/main.507b3a.js","hash":"1be71323e357bcc2d99568bc622f23f152811f2e","modified":1513425420252},{"_id":"public/mobile.fdc4b7.js","hash":"6bfff9bfe4d7e067b6289e851a4c424ac815af5e","modified":1513425420253},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1513425420253}],"Category":[{"name":"coding","_id":"cjb9af1vk0002m6i6xvvbtxty"}],"Data":[],"Page":[],"Post":[{"title":"css布局：两栏、三栏，从圣杯到双飞翼","date":"2017-11-23T14:45:40.000Z","_content":"\n## 常规的垂直布局\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .header{\n            background-color: red;\n            height: 100px;\n        }\n        .bodyer{\n            background-color: green;\n            height: 500px;\n        }\n        .footer{\n            background-color: yellow;\n            height: 50px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"header\">\n        Hello CSS layout\n    </div> \n    <div class=\"bodyer\">\n        some thing\n    </div> \n    <div class=\"footer\">copyright</div>\n</body>\n\n</html>\n```\n<!--more-->\n垂直布局就是这样的简单，因为垂直布局可以充分的利用[区块元素](https://zh.wikipedia.org/wiki/HTML元素#.E5.8D.80.E5.A1.8A.E5.85.83.E7.B4.A0)的特点就可以实现。\n\n## 常规的水平布局\n### 通过inline-block实现（inline与inline-block的区别）\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .bodyer {\n            background-color: green;\n            height: 500px;\n        }\n        .col {\n            background-color: red;\n            display: inline-block;\n            width: 200px;\n            height: 200px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"col\">0</div>\n        <div class=\"col\">1</div>\n        <div class=\"col\">2</div>\n        <div class=\"col\">3</div>\n        <div class=\"col\">4</div>\n        <div class=\"col\">5</div>\n        <div class=\"col\">6</div>\n        <div class=\"col\">7</div>\n        <div class=\"col\">8</div>\n        <div class=\"col\">9</div>\n    </div>\n</body>\n\n</html>\n```\n\n### 通过float\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        \n        .bodyer {\n            background-color: green;\n        }\n        .col {\n            background-color: red;\n            float: left;\n            width: 200px;\n            height: 200px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <span class=\"col\">0</span>\n        <span class=\"col\">1</span>\n        <span class=\"col\">2</span>\n        <span class=\"col\">3</span>\n        <span class=\"col\">4</span>\n        <span class=\"col\">5</span>\n        <span class=\"col\">6</span>\n        <span class=\"col\">7</span>\n        <span class=\"col\">8</span>\n        <span class=\"col\">9</span>\n    </div>\n</body>\n\n</html>\n```\n\n通过 `direction: rtl` 我们可以看出来 `display: inline-block` 只是利用了从左到右的 `普通流（normal flow）`。\n\n### 两栏布局\n#### bodyer:bfc sidebar:float content:float \n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n            overflow: hidden;\n        }\n        .sidebar {\n            background-color: red;\n            float: left;\n            width: 200px;\n            height: 500px;\n            margin-right: 10px;\n        }\n        .content {\n            background-color: yellow;\n            float: left;\n            width: 720px;\n            height: 500px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"sidebar\">sidebar</div>\n        <div class=\"content\">content</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：好理解，左右的间距不取决于sidebar的宽度。\n+ 缺点：sidebar content 要定宽，无法自适应。父级元素要 `bfc`。\n\n#### sidebar:float \n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n        }\n        .sidebar {\n            background-color: red;\n            float: left;\n            width: 200px;\n            height: 500px;\n        }\n        .content {\n            background-color: yellow;\n            height: 500px;\n            margin-left: 210px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"sidebar\">sidebar</div>\n        <div class=\"content\">content</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应，父级元素无须 `bfc`。\n+ 缺点：左右的间距要根据 sidebar 的宽度来决定。\n\n#### sidebar:float content:bfc\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n        }\n        .sidebar {\n            background-color: red;\n            float: left;\n            width: 200px;\n            height: 500px;\n            margin-right: 10px;\n        }\n        .content {\n            background-color: yellow;\n            height: 500px;\n            overflow: auto;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"sidebar\">sidebar</div>\n        <div class=\"content\">content</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应，父级元素无须 `bfc`，左右的间距不取决于sidebar的宽度。\n+ 缺点：bfc带的副作用\n\n### 三栏布局\n#### sidebar:float content:bfc\n  \n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .fl{\n            float: left;\n            margin-right: 10px;\n        }\n        .fr{\n            float: right;\n            margin-left: 10px;\n        }\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n        }\n        .sidebar {\n            background-color: red;\n            width: 200px;\n            height: 500px;\n        }\n        .content {\n            background-color: yellow;\n            height: 500px;\n            overflow: auto;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"sidebar fl\">sidebar</div>\n        <div class=\"sidebar fr\">sidebar</div>\n        <div class=\"content\">content</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应，父级元素无须 `bfc`，左右的间距不取决于sidebar的宽度。元素、css较少。\n+ 缺点：sidebar会下榻 子元素的顺序有要求\n\n#### 圣杯布局\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .fl {\n            float: left;\n            height: 500px;\n        }\n\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n            overflow: auto;\n            padding: 0 210px;\n        }\n\n        .sidebar {\n            background-color: red;\n            position: relative;\n            width: 200px;\n        }\n\n        .left-sidebar {\n            margin-left: -100%;\n            left: -210px;\n        }\n        .right-sidebar {\n            margin-left: -200px;\n            right: -210px;\n        }\n\n        .content {\n            width: 100%;\n            background-color: yellow;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"content fl\">content</div>\n        <div class=\"sidebar fl left-sidebar\">sidebar</div>\n        <div class=\"sidebar fl right-sidebar\">sidebar</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应， 子元素的顺序无要求。\n+ 缺点：sidebar会下榻，左右的间距取决于sidebar的宽度\n\n\n#### 双飞翼布局\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .fl {\n            float: left;\n        }\n\n        .bodyer {\n            width: 100%;\n            background-color: green;\n            padding-bottom: 20px;\n        }\n\n        .content {\n            width: 100%;\n        }\n\n        .content-main {\n            margin-left: 210px;\n            margin-right: 210px;\n            background-color: yellow;\n            height: 500px;\n        }\n\n        .sidebar {\n            width: 200px;\n            background-color: red;\n            height: 500px;\n        }\n\n        .left-sidebar {\n            margin-left: -100%;\n        }\n\n        .right-sidebar {\n            margin-left: -200px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer fl\">\n        <div class=\"content fl\">\n            <div class=\"content-main\">\n                content\n            </div>\n        </div>\n        <div class=\"sidebar left-sidebar fl\">sidebar</div>\n        <div class=\"sidebar right-sidebar fl\">sidebar</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应， 子元素的顺序无要求，塌陷的机会更小。\n+ 缺点：sidebar会下榻，左右的间距取决于sidebar的宽度\n\n\n## 参考\n+ [学习CSS布局](http://zh.learnlayout.com/)\n+ [BFC块格式化上下文](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context)\n+ [浮动元素的规则](http://blog.csdn.net/gemingzhu/article/details/51623761) \n\n","source":"_posts/css布局：两栏、三栏，从圣杯到双飞翼.md","raw":"---\ntitle: css布局：两栏、三栏，从圣杯到双飞翼\ndate: 2017-11-23 22:45:40\ntags: ['css布局','css','两栏','三栏','圣杯','双飞翼','bfc','块格式化上下文']\ncategory: 'coding'\n---\n\n## 常规的垂直布局\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .header{\n            background-color: red;\n            height: 100px;\n        }\n        .bodyer{\n            background-color: green;\n            height: 500px;\n        }\n        .footer{\n            background-color: yellow;\n            height: 50px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"header\">\n        Hello CSS layout\n    </div> \n    <div class=\"bodyer\">\n        some thing\n    </div> \n    <div class=\"footer\">copyright</div>\n</body>\n\n</html>\n```\n<!--more-->\n垂直布局就是这样的简单，因为垂直布局可以充分的利用[区块元素](https://zh.wikipedia.org/wiki/HTML元素#.E5.8D.80.E5.A1.8A.E5.85.83.E7.B4.A0)的特点就可以实现。\n\n## 常规的水平布局\n### 通过inline-block实现（inline与inline-block的区别）\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .bodyer {\n            background-color: green;\n            height: 500px;\n        }\n        .col {\n            background-color: red;\n            display: inline-block;\n            width: 200px;\n            height: 200px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"col\">0</div>\n        <div class=\"col\">1</div>\n        <div class=\"col\">2</div>\n        <div class=\"col\">3</div>\n        <div class=\"col\">4</div>\n        <div class=\"col\">5</div>\n        <div class=\"col\">6</div>\n        <div class=\"col\">7</div>\n        <div class=\"col\">8</div>\n        <div class=\"col\">9</div>\n    </div>\n</body>\n\n</html>\n```\n\n### 通过float\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        \n        .bodyer {\n            background-color: green;\n        }\n        .col {\n            background-color: red;\n            float: left;\n            width: 200px;\n            height: 200px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <span class=\"col\">0</span>\n        <span class=\"col\">1</span>\n        <span class=\"col\">2</span>\n        <span class=\"col\">3</span>\n        <span class=\"col\">4</span>\n        <span class=\"col\">5</span>\n        <span class=\"col\">6</span>\n        <span class=\"col\">7</span>\n        <span class=\"col\">8</span>\n        <span class=\"col\">9</span>\n    </div>\n</body>\n\n</html>\n```\n\n通过 `direction: rtl` 我们可以看出来 `display: inline-block` 只是利用了从左到右的 `普通流（normal flow）`。\n\n### 两栏布局\n#### bodyer:bfc sidebar:float content:float \n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n            overflow: hidden;\n        }\n        .sidebar {\n            background-color: red;\n            float: left;\n            width: 200px;\n            height: 500px;\n            margin-right: 10px;\n        }\n        .content {\n            background-color: yellow;\n            float: left;\n            width: 720px;\n            height: 500px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"sidebar\">sidebar</div>\n        <div class=\"content\">content</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：好理解，左右的间距不取决于sidebar的宽度。\n+ 缺点：sidebar content 要定宽，无法自适应。父级元素要 `bfc`。\n\n#### sidebar:float \n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n        }\n        .sidebar {\n            background-color: red;\n            float: left;\n            width: 200px;\n            height: 500px;\n        }\n        .content {\n            background-color: yellow;\n            height: 500px;\n            margin-left: 210px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"sidebar\">sidebar</div>\n        <div class=\"content\">content</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应，父级元素无须 `bfc`。\n+ 缺点：左右的间距要根据 sidebar 的宽度来决定。\n\n#### sidebar:float content:bfc\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n        }\n        .sidebar {\n            background-color: red;\n            float: left;\n            width: 200px;\n            height: 500px;\n            margin-right: 10px;\n        }\n        .content {\n            background-color: yellow;\n            height: 500px;\n            overflow: auto;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"sidebar\">sidebar</div>\n        <div class=\"content\">content</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应，父级元素无须 `bfc`，左右的间距不取决于sidebar的宽度。\n+ 缺点：bfc带的副作用\n\n### 三栏布局\n#### sidebar:float content:bfc\n  \n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .fl{\n            float: left;\n            margin-right: 10px;\n        }\n        .fr{\n            float: right;\n            margin-left: 10px;\n        }\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n        }\n        .sidebar {\n            background-color: red;\n            width: 200px;\n            height: 500px;\n        }\n        .content {\n            background-color: yellow;\n            height: 500px;\n            overflow: auto;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"sidebar fl\">sidebar</div>\n        <div class=\"sidebar fr\">sidebar</div>\n        <div class=\"content\">content</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应，父级元素无须 `bfc`，左右的间距不取决于sidebar的宽度。元素、css较少。\n+ 缺点：sidebar会下榻 子元素的顺序有要求\n\n#### 圣杯布局\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .fl {\n            float: left;\n            height: 500px;\n        }\n\n        .bodyer {\n            background-color: green;\n            padding-bottom: 20px;\n            overflow: auto;\n            padding: 0 210px;\n        }\n\n        .sidebar {\n            background-color: red;\n            position: relative;\n            width: 200px;\n        }\n\n        .left-sidebar {\n            margin-left: -100%;\n            left: -210px;\n        }\n        .right-sidebar {\n            margin-left: -200px;\n            right: -210px;\n        }\n\n        .content {\n            width: 100%;\n            background-color: yellow;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer\">\n        <div class=\"content fl\">content</div>\n        <div class=\"sidebar fl left-sidebar\">sidebar</div>\n        <div class=\"sidebar fl right-sidebar\">sidebar</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应， 子元素的顺序无要求。\n+ 缺点：sidebar会下榻，左右的间距取决于sidebar的宽度\n\n\n#### 双飞翼布局\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .fl {\n            float: left;\n        }\n\n        .bodyer {\n            width: 100%;\n            background-color: green;\n            padding-bottom: 20px;\n        }\n\n        .content {\n            width: 100%;\n        }\n\n        .content-main {\n            margin-left: 210px;\n            margin-right: 210px;\n            background-color: yellow;\n            height: 500px;\n        }\n\n        .sidebar {\n            width: 200px;\n            background-color: red;\n            height: 500px;\n        }\n\n        .left-sidebar {\n            margin-left: -100%;\n        }\n\n        .right-sidebar {\n            margin-left: -200px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"bodyer fl\">\n        <div class=\"content fl\">\n            <div class=\"content-main\">\n                content\n            </div>\n        </div>\n        <div class=\"sidebar left-sidebar fl\">sidebar</div>\n        <div class=\"sidebar right-sidebar fl\">sidebar</div>\n    </div>\n</body>\n\n</html>\n```\n\n+ 优点：可以自适应， 子元素的顺序无要求，塌陷的机会更小。\n+ 缺点：sidebar会下榻，左右的间距取决于sidebar的宽度\n\n\n## 参考\n+ [学习CSS布局](http://zh.learnlayout.com/)\n+ [BFC块格式化上下文](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context)\n+ [浮动元素的规则](http://blog.csdn.net/gemingzhu/article/details/51623761) \n\n","slug":"css布局：两栏、三栏，从圣杯到双飞翼","published":1,"updated":"2017-12-16T11:50:34.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1va0000m6i6e9ln7nni","content":"<h2 id=\"常规的垂直布局\"><a href=\"#常规的垂直布局\" class=\"headerlink\" title=\"常规的垂直布局\"></a>常规的垂直布局</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .header&#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            height: 100px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .bodyer&#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .footer&#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 50px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">        Hello CSS layout</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        some thing</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span>copyright<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>垂直布局就是这样的简单，因为垂直布局可以充分的利用<a href=\"https://zh.wikipedia.org/wiki/HTML元素#.E5.8D.80.E5.A1.8A.E5.85.83.E7.B4.A0\" target=\"_blank\" rel=\"external\">区块元素</a>的特点就可以实现。</p>\n<h2 id=\"常规的水平布局\"><a href=\"#常规的水平布局\" class=\"headerlink\" title=\"常规的水平布局\"></a>常规的水平布局</h2><h3 id=\"通过inline-block实现（inline与inline-block的区别）\"><a href=\"#通过inline-block实现（inline与inline-block的区别）\" class=\"headerlink\" title=\"通过inline-block实现（inline与inline-block的区别）\"></a>通过inline-block实现（inline与inline-block的区别）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .col &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            display: inline-block;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"通过float\"><a href=\"#通过float\" class=\"headerlink\" title=\"通过float\"></a>通过float</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .col &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过 <code>direction: rtl</code> 我们可以看出来 <code>display: inline-block</code> 只是利用了从左到右的 <code>普通流（normal flow）</code>。</p>\n<h3 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h3><h4 id=\"bodyer-bfc-sidebar-float-content-float\"><a href=\"#bodyer-bfc-sidebar-float-content-float\" class=\"headerlink\" title=\"bodyer:bfc sidebar:float content:float\"></a>bodyer:bfc sidebar:float content:float</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            margin-right: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 720px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：好理解，左右的间距不取决于sidebar的宽度。</li>\n<li>缺点：sidebar content 要定宽，无法自适应。父级元素要 <code>bfc</code>。</li>\n</ul>\n<h4 id=\"sidebar-float\"><a href=\"#sidebar-float\" class=\"headerlink\" title=\"sidebar:float\"></a>sidebar:float</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            margin-left: 210px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应，父级元素无须 <code>bfc</code>。</li>\n<li>缺点：左右的间距要根据 sidebar 的宽度来决定。</li>\n</ul>\n<h4 id=\"sidebar-float-content-bfc\"><a href=\"#sidebar-float-content-bfc\" class=\"headerlink\" title=\"sidebar:float content:bfc\"></a>sidebar:float content:bfc</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            margin-right: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            overflow: auto;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应，父级元素无须 <code>bfc</code>，左右的间距不取决于sidebar的宽度。</li>\n<li>缺点：bfc带的副作用</li>\n</ul>\n<h3 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h3><h4 id=\"sidebar-float-content-bfc-1\"><a href=\"#sidebar-float-content-bfc-1\" class=\"headerlink\" title=\"sidebar:float content:bfc\"></a>sidebar:float content:bfc</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .fl&#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            margin-right: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .fr&#123;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">            margin-left: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            overflow: auto;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar fl\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar fr\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应，父级元素无须 <code>bfc</code>，左右的间距不取决于sidebar的宽度。元素、css较少。</li>\n<li>缺点：sidebar会下榻 子元素的顺序有要求</li>\n</ul>\n<h4 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .fl &#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">            overflow: auto;</span><br><span class=\"line\">            padding: 0 210px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            position: relative;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .left-sidebar &#123;</span><br><span class=\"line\">            margin-left: -100%;</span><br><span class=\"line\">            left: -210px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .right-sidebar &#123;</span><br><span class=\"line\">            margin-left: -200px;</span><br><span class=\"line\">            right: -210px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content fl\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar fl left-sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar fl right-sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应， 子元素的顺序无要求。</li>\n<li>缺点：sidebar会下榻，左右的间距取决于sidebar的宽度</li>\n</ul>\n<h4 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .fl &#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .content-main &#123;</span><br><span class=\"line\">            margin-left: 210px;</span><br><span class=\"line\">            margin-right: 210px;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .left-sidebar &#123;</span><br><span class=\"line\">            margin-left: -100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .right-sidebar &#123;</span><br><span class=\"line\">            margin-left: -200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer fl\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content fl\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-main\"</span>&gt;</span></span><br><span class=\"line\">                content</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar left-sidebar fl\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar right-sidebar fl\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应， 子元素的顺序无要求，塌陷的机会更小。</li>\n<li>缺点：sidebar会下榻，左右的间距取决于sidebar的宽度</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://zh.learnlayout.com/\" target=\"_blank\" rel=\"external\">学习CSS布局</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\" rel=\"external\">BFC块格式化上下文</a></li>\n<li><a href=\"http://blog.csdn.net/gemingzhu/article/details/51623761\" target=\"_blank\" rel=\"external\">浮动元素的规则</a> </li>\n</ul>\n","excerpt":"<h2 id=\"常规的垂直布局\"><a href=\"#常规的垂直布局\" class=\"headerlink\" title=\"常规的垂直布局\"></a>常规的垂直布局</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .header&#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            height: 100px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .bodyer&#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .footer&#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 50px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">        Hello CSS layout</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        some thing</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span>copyright<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p>垂直布局就是这样的简单，因为垂直布局可以充分的利用<a href=\"https://zh.wikipedia.org/wiki/HTML元素#.E5.8D.80.E5.A1.8A.E5.85.83.E7.B4.A0\">区块元素</a>的特点就可以实现。</p>\n<h2 id=\"常规的水平布局\"><a href=\"#常规的水平布局\" class=\"headerlink\" title=\"常规的水平布局\"></a>常规的水平布局</h2><h3 id=\"通过inline-block实现（inline与inline-block的区别）\"><a href=\"#通过inline-block实现（inline与inline-block的区别）\" class=\"headerlink\" title=\"通过inline-block实现（inline与inline-block的区别）\"></a>通过inline-block实现（inline与inline-block的区别）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .col &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            display: inline-block;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"通过float\"><a href=\"#通过float\" class=\"headerlink\" title=\"通过float\"></a>通过float</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .col &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过 <code>direction: rtl</code> 我们可以看出来 <code>display: inline-block</code> 只是利用了从左到右的 <code>普通流（normal flow）</code>。</p>\n<h3 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h3><h4 id=\"bodyer-bfc-sidebar-float-content-float\"><a href=\"#bodyer-bfc-sidebar-float-content-float\" class=\"headerlink\" title=\"bodyer:bfc sidebar:float content:float\"></a>bodyer:bfc sidebar:float content:float</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">            overflow: hidden;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            margin-right: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 720px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：好理解，左右的间距不取决于sidebar的宽度。</li>\n<li>缺点：sidebar content 要定宽，无法自适应。父级元素要 <code>bfc</code>。</li>\n</ul>\n<h4 id=\"sidebar-float\"><a href=\"#sidebar-float\" class=\"headerlink\" title=\"sidebar:float\"></a>sidebar:float</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            margin-left: 210px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应，父级元素无须 <code>bfc</code>。</li>\n<li>缺点：左右的间距要根据 sidebar 的宽度来决定。</li>\n</ul>\n<h4 id=\"sidebar-float-content-bfc\"><a href=\"#sidebar-float-content-bfc\" class=\"headerlink\" title=\"sidebar:float content:bfc\"></a>sidebar:float content:bfc</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            margin-right: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            overflow: auto;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应，父级元素无须 <code>bfc</code>，左右的间距不取决于sidebar的宽度。</li>\n<li>缺点：bfc带的副作用</li>\n</ul>\n<h3 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h3><h4 id=\"sidebar-float-content-bfc-1\"><a href=\"#sidebar-float-content-bfc-1\" class=\"headerlink\" title=\"sidebar:float content:bfc\"></a>sidebar:float content:bfc</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .fl&#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            margin-right: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .fr&#123;</span><br><span class=\"line\">            float: right;</span><br><span class=\"line\">            margin-left: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            overflow: auto;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar fl\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar fr\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应，父级元素无须 <code>bfc</code>，左右的间距不取决于sidebar的宽度。元素、css较少。</li>\n<li>缺点：sidebar会下榻 子元素的顺序有要求</li>\n</ul>\n<h4 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .fl &#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">            overflow: auto;</span><br><span class=\"line\">            padding: 0 210px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            position: relative;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .left-sidebar &#123;</span><br><span class=\"line\">            margin-left: -100%;</span><br><span class=\"line\">            left: -210px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .right-sidebar &#123;</span><br><span class=\"line\">            margin-left: -200px;</span><br><span class=\"line\">            right: -210px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content fl\"</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar fl left-sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar fl right-sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应， 子元素的顺序无要求。</li>\n<li>缺点：sidebar会下榻，左右的间距取决于sidebar的宽度</li>\n</ul>\n<h4 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">        .fl &#123;</span><br><span class=\"line\">            float: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .bodyer &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            background-color: green;</span><br><span class=\"line\">            padding-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .content &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .content-main &#123;</span><br><span class=\"line\">            margin-left: 210px;</span><br><span class=\"line\">            margin-right: 210px;</span><br><span class=\"line\">            background-color: yellow;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .sidebar &#123;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            background-color: red;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .left-sidebar &#123;</span><br><span class=\"line\">            margin-left: -100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .right-sidebar &#123;</span><br><span class=\"line\">            margin-left: -200px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bodyer fl\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content fl\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-main\"</span>&gt;</span></span><br><span class=\"line\">                content</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar left-sidebar fl\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar right-sidebar fl\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以自适应， 子元素的顺序无要求，塌陷的机会更小。</li>\n<li>缺点：sidebar会下榻，左右的间距取决于sidebar的宽度</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://zh.learnlayout.com/\">学习CSS布局</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\">BFC块格式化上下文</a></li>\n<li><a href=\"http://blog.csdn.net/gemingzhu/article/details/51623761\">浮动元素的规则</a> </li>\n</ul>"},{"title":"react基于state和props的父子组件和兄弟组件沟通","date":"2017-12-16T06:05:41.000Z","_content":"\n# react-state react状态管理\n\nReact是Facebook开源的一个用于构建用户界面的Javascript库，React专注于MVC架构中的V，即视图。\n\n## Virtual DOM\n\n是一个模拟 DOM 树的 JavaScript 对象。 React 使用 Virtual DOM 来渲染 UI， 同时监听 Virtual DOM 上数据的变化并自动迁移这些变化到 UI 上。\n\n## React Elements\n\n代表 HTML 元素的 JavaScript 对象。 这些 JavaScript 对象最后被编译成对应的 HTML 元素。\n\n## JSX\n\nReact 定义的一种 JavaScript 语法扩展，类似于 XML 。 JSX 是可选的， 我们完全可以使用 JavaScript 来编写 React 应用， 不过 JSX 提供了一套更为简便的方式来写 React 应用。<!--more-->\n\n```JSX\nvar div = React.createElement('div', null, \"Hello React\");\n// 使用 JSX\nvar div = <div>Hello React</div>;\n```\n\n## Components\n\n封装 React Elements， 包含一个或者多个 React Elements。 Components 用于创建可以复用的 UI 模块，例如 分页，侧栏导航等。\n\n```JSX\nvar HelloMessage = React.createClass({\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n## Props\n\n在上一个例子中，可以看到有一个特殊的引用： `this.props.name`。 这个引用称之为 `Props`，可以将他想象成 Component 的设置选项。\n\n在使用上， Props 类似于 HTML 中的属性：\n\n```JSX\nvar HelloMessage = React.createClass({\n  render() {\n    return <HelloMessage name=\"foo\" />;\n  }\n});\n```\n\n在 Component 内部，通过 this.props.name 来引用这个 Props：\n\n```JSX\nvar HelloMessage = React.createClass({\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n需要注意的是， Props 仅用来定制 Component， 这些数据不应该被改动。 如果涉及到需要做改动的数据， 得考虑使用 `state`。\n\n## Stateful Component\nState 数据代表 Component 的状态， 用于维护 Component 内部的状态。 当 State 发生改变之后， React 将会重新渲染 UI 。State 数据通过 this.state 访问：\n\n```JSX\nvar Greeting = React.createClass({\n  constructor () {\n    this.state = { greeted: false };\n  },\n  render() {\n    var response = this.state.greeted ? 'Yes' : 'No';\n\n    return (\n      <div>\n        <div>Hello React</div>\n        <span>{response}</span>\n        <button onClick={()=>{\n            this.setState({\n                    greeted: !this.state.greeted\n                });\n            },}>\n            Hi\n        </button>\n      </div>\n    );\n  }\n});\n```\n![dom action state的关系图](/0/state.png)\n\n当 State 发生改变后， React 将 Component 渲染到 Virtual DOM，新的 Virtual DOM 与 旧版本的进行比对，检查出改变的部分并更新浏览器的 DOM。 在这个例子中，当按钮被点击后， `greeted`状态数据发生了变化，UI 跟随着更新。\n\n\n## Props与State的结合\n```JSX\nvar Greeting = React.createClass({\n  constructor () {\n    this.state = { greeted: false };\n  },\n  \n  render() {\n    var response = this.state.greeted ? 'Yes' : 'No';\n\n    return (\n      <div>\n        <div>Hello {this.props.name}</div>\n        <span>{response}</span>\n         <button onClick={()=>{\n            this.setState({\n                    greeted: !this.state.greeted\n                });\n            },}>\n            Hi\n        </button>\n      </div>\n    );\n  }\n});\n\nvar users = [\"foo\", \"bar\", \"baz\"];\n\nvar GreetingApp = React.createClass({\n  render() {\n    var greetings = this.props.users.map((user)=>{\n      return <Greeting name={user} />;\n    });\n\n    return <div>{greetings}</div>;\n  }\n});\n```\n\n## 单向数据流\n\nReact是单向数据流，数据主要从父节点传递到子节点（通过props）。\n\n如果父级的某个props改变了，React会重渲染所有的子节点。\n\n### 父子组件沟通\n* 父组件更新组件状态  -----props----->　子组件更新\n* 子组件更新父组件状态   -----需要父组件传递回调函数----->  子组件调用触发\n\n>`子组件更新父组件就需要 父组件通过props传递一个回调函数到子组件中，这个回调函数可以更新父组件，子组件就是通过触发这个回调函数，从而使父组件得到更新。`\n\n![父子组件沟通](/0/propsFlow.png)\n\n```JSX\nconst Greeting = React.createClass({\n  constructor () {\n    this.state = { greeted: false };\n  },\n  render() {\n    var response = this.state.greeted ? 'Yes' : 'No';\n\n    return (\n      <div>\n        <div>Hello {this.props.name}</div>\n        <span>{response}</span>\n        <button onClick={()=>{\n            const greeted = !this.state.greeted;\n            this.setState({\n                    greeted: greeted,\n                });\n            this.props.changeName(greeted?'eric':'mazheng');   \n            },}>\n            Hi\n        </button>\n      </div>\n    );\n  }\n});\n\nconst UseGreeting = React.createClass({\n  constructor () {\n    this.state = { name: 'eric' };\n  },\n  render() {\n    return (\n        <Greeting\n            name={this.state.name}\n            changeName={(newName)=>{\n                this.setState({\n                    name: newName,\n                }); \n            }}\n        />\n    );\n  }\n});\n```\n\n### 兄弟组件沟通\n\n* 按照React单向数据流方式，我们需要借助父组件进行传递，通过父组件回调函数改变兄弟组件的props。\n\n![兄弟组件沟通](/0/brothers.png)\n\n","source":"_posts/react的state和基于props的父子组件和兄弟组件沟通.md","raw":"---\ntitle: react基于state和props的父子组件和兄弟组件沟通\ndate: 2017-12-16 14:05:41\ntags: ['react','state','props','组件沟通','信息传递']\ncategory: 'coding'\n---\n\n# react-state react状态管理\n\nReact是Facebook开源的一个用于构建用户界面的Javascript库，React专注于MVC架构中的V，即视图。\n\n## Virtual DOM\n\n是一个模拟 DOM 树的 JavaScript 对象。 React 使用 Virtual DOM 来渲染 UI， 同时监听 Virtual DOM 上数据的变化并自动迁移这些变化到 UI 上。\n\n## React Elements\n\n代表 HTML 元素的 JavaScript 对象。 这些 JavaScript 对象最后被编译成对应的 HTML 元素。\n\n## JSX\n\nReact 定义的一种 JavaScript 语法扩展，类似于 XML 。 JSX 是可选的， 我们完全可以使用 JavaScript 来编写 React 应用， 不过 JSX 提供了一套更为简便的方式来写 React 应用。<!--more-->\n\n```JSX\nvar div = React.createElement('div', null, \"Hello React\");\n// 使用 JSX\nvar div = <div>Hello React</div>;\n```\n\n## Components\n\n封装 React Elements， 包含一个或者多个 React Elements。 Components 用于创建可以复用的 UI 模块，例如 分页，侧栏导航等。\n\n```JSX\nvar HelloMessage = React.createClass({\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n## Props\n\n在上一个例子中，可以看到有一个特殊的引用： `this.props.name`。 这个引用称之为 `Props`，可以将他想象成 Component 的设置选项。\n\n在使用上， Props 类似于 HTML 中的属性：\n\n```JSX\nvar HelloMessage = React.createClass({\n  render() {\n    return <HelloMessage name=\"foo\" />;\n  }\n});\n```\n\n在 Component 内部，通过 this.props.name 来引用这个 Props：\n\n```JSX\nvar HelloMessage = React.createClass({\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n需要注意的是， Props 仅用来定制 Component， 这些数据不应该被改动。 如果涉及到需要做改动的数据， 得考虑使用 `state`。\n\n## Stateful Component\nState 数据代表 Component 的状态， 用于维护 Component 内部的状态。 当 State 发生改变之后， React 将会重新渲染 UI 。State 数据通过 this.state 访问：\n\n```JSX\nvar Greeting = React.createClass({\n  constructor () {\n    this.state = { greeted: false };\n  },\n  render() {\n    var response = this.state.greeted ? 'Yes' : 'No';\n\n    return (\n      <div>\n        <div>Hello React</div>\n        <span>{response}</span>\n        <button onClick={()=>{\n            this.setState({\n                    greeted: !this.state.greeted\n                });\n            },}>\n            Hi\n        </button>\n      </div>\n    );\n  }\n});\n```\n![dom action state的关系图](/0/state.png)\n\n当 State 发生改变后， React 将 Component 渲染到 Virtual DOM，新的 Virtual DOM 与 旧版本的进行比对，检查出改变的部分并更新浏览器的 DOM。 在这个例子中，当按钮被点击后， `greeted`状态数据发生了变化，UI 跟随着更新。\n\n\n## Props与State的结合\n```JSX\nvar Greeting = React.createClass({\n  constructor () {\n    this.state = { greeted: false };\n  },\n  \n  render() {\n    var response = this.state.greeted ? 'Yes' : 'No';\n\n    return (\n      <div>\n        <div>Hello {this.props.name}</div>\n        <span>{response}</span>\n         <button onClick={()=>{\n            this.setState({\n                    greeted: !this.state.greeted\n                });\n            },}>\n            Hi\n        </button>\n      </div>\n    );\n  }\n});\n\nvar users = [\"foo\", \"bar\", \"baz\"];\n\nvar GreetingApp = React.createClass({\n  render() {\n    var greetings = this.props.users.map((user)=>{\n      return <Greeting name={user} />;\n    });\n\n    return <div>{greetings}</div>;\n  }\n});\n```\n\n## 单向数据流\n\nReact是单向数据流，数据主要从父节点传递到子节点（通过props）。\n\n如果父级的某个props改变了，React会重渲染所有的子节点。\n\n### 父子组件沟通\n* 父组件更新组件状态  -----props----->　子组件更新\n* 子组件更新父组件状态   -----需要父组件传递回调函数----->  子组件调用触发\n\n>`子组件更新父组件就需要 父组件通过props传递一个回调函数到子组件中，这个回调函数可以更新父组件，子组件就是通过触发这个回调函数，从而使父组件得到更新。`\n\n![父子组件沟通](/0/propsFlow.png)\n\n```JSX\nconst Greeting = React.createClass({\n  constructor () {\n    this.state = { greeted: false };\n  },\n  render() {\n    var response = this.state.greeted ? 'Yes' : 'No';\n\n    return (\n      <div>\n        <div>Hello {this.props.name}</div>\n        <span>{response}</span>\n        <button onClick={()=>{\n            const greeted = !this.state.greeted;\n            this.setState({\n                    greeted: greeted,\n                });\n            this.props.changeName(greeted?'eric':'mazheng');   \n            },}>\n            Hi\n        </button>\n      </div>\n    );\n  }\n});\n\nconst UseGreeting = React.createClass({\n  constructor () {\n    this.state = { name: 'eric' };\n  },\n  render() {\n    return (\n        <Greeting\n            name={this.state.name}\n            changeName={(newName)=>{\n                this.setState({\n                    name: newName,\n                }); \n            }}\n        />\n    );\n  }\n});\n```\n\n### 兄弟组件沟通\n\n* 按照React单向数据流方式，我们需要借助父组件进行传递，通过父组件回调函数改变兄弟组件的props。\n\n![兄弟组件沟通](/0/brothers.png)\n\n","slug":"react的state和基于props的父子组件和兄弟组件沟通","published":1,"updated":"2017-12-16T11:50:34.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1vi0001m6i6u1px7q3m","content":"<h1 id=\"react-state-react状态管理\"><a href=\"#react-state-react状态管理\" class=\"headerlink\" title=\"react-state react状态管理\"></a>react-state react状态管理</h1><p>React是Facebook开源的一个用于构建用户界面的Javascript库，React专注于MVC架构中的V，即视图。</p>\n<h2 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h2><p>是一个模拟 DOM 树的 JavaScript 对象。 React 使用 Virtual DOM 来渲染 UI， 同时监听 Virtual DOM 上数据的变化并自动迁移这些变化到 UI 上。</p>\n<h2 id=\"React-Elements\"><a href=\"#React-Elements\" class=\"headerlink\" title=\"React Elements\"></a>React Elements</h2><p>代表 HTML 元素的 JavaScript 对象。 这些 JavaScript 对象最后被编译成对应的 HTML 元素。</p>\n<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h2><p>React 定义的一种 JavaScript 语法扩展，类似于 XML 。 JSX 是可选的， 我们完全可以使用 JavaScript 来编写 React 应用， 不过 JSX 提供了一套更为简便的方式来写 React 应用。<a id=\"more\"></a></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = React.createElement(<span class=\"string\">'div'</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"Hello React\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用 JSX</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>封装 React Elements， 包含一个或者多个 React Elements。 Components 用于创建可以复用的 UI 模块，例如 分页，侧栏导航等。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><p>在上一个例子中，可以看到有一个特殊的引用： <code>this.props.name</code>。 这个引用称之为 <code>Props</code>，可以将他想象成 Component 的设置选项。</p>\n<p>在使用上， Props 类似于 HTML 中的属性：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">HelloMessage</span> <span class=\"attr\">name</span>=<span class=\"string\">\"foo\"</span> /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<p>在 Component 内部，通过 this.props.name 来引用这个 Props：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是， Props 仅用来定制 Component， 这些数据不应该被改动。 如果涉及到需要做改动的数据， 得考虑使用 <code>state</code>。</p>\n<h2 id=\"Stateful-Component\"><a href=\"#Stateful-Component\" class=\"headerlink\" title=\"Stateful Component\"></a>Stateful Component</h2><p>State 数据代表 Component 的状态， 用于维护 Component 内部的状态。 当 State 发生改变之后， React 将会重新渲染 UI 。State 数据通过 this.state 访问：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Greeting = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">greeted</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">this</span>.state.greeted ? <span class=\"string\">'Yes'</span> : <span class=\"string\">'No'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;response&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            this.setState(&#123;</span><br><span class=\"line\">                    greeted: !this.state.greeted</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,&#125;&gt;</span><br><span class=\"line\">            Hi</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/0/state.png\" alt=\"dom action state的关系图\"></p>\n<p>当 State 发生改变后， React 将 Component 渲染到 Virtual DOM，新的 Virtual DOM 与 旧版本的进行比对，检查出改变的部分并更新浏览器的 DOM。 在这个例子中，当按钮被点击后， <code>greeted</code>状态数据发生了变化，UI 跟随着更新。</p>\n<h2 id=\"Props与State的结合\"><a href=\"#Props与State的结合\" class=\"headerlink\" title=\"Props与State的结合\"></a>Props与State的结合</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Greeting = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">greeted</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">this</span>.state.greeted ? <span class=\"string\">'Yes'</span> : <span class=\"string\">'No'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;response&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            this.setState(&#123;</span><br><span class=\"line\">                    greeted: !this.state.greeted</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,&#125;&gt;</span><br><span class=\"line\">            Hi</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> GreetingApp = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greetings = <span class=\"keyword\">this</span>.props.users.map(<span class=\"function\">(<span class=\"params\">user</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;user&#125;</span> /&gt;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;greetings&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h2><p>React是单向数据流，数据主要从父节点传递到子节点（通过props）。</p>\n<p>如果父级的某个props改变了，React会重渲染所有的子节点。</p>\n<h3 id=\"父子组件沟通\"><a href=\"#父子组件沟通\" class=\"headerlink\" title=\"父子组件沟通\"></a>父子组件沟通</h3><ul>\n<li>父组件更新组件状态  —–props—–&gt;　子组件更新</li>\n<li>子组件更新父组件状态   —–需要父组件传递回调函数—–&gt;  子组件调用触发</li>\n</ul>\n<blockquote>\n<p><code>子组件更新父组件就需要 父组件通过props传递一个回调函数到子组件中，这个回调函数可以更新父组件，子组件就是通过触发这个回调函数，从而使父组件得到更新。</code></p>\n</blockquote>\n<p><img src=\"/0/propsFlow.png\" alt=\"父子组件沟通\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Greeting = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">greeted</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">this</span>.state.greeted ? <span class=\"string\">'Yes'</span> : <span class=\"string\">'No'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;response&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            const greeted = !this.state.greeted;</span><br><span class=\"line\">            this.setState(&#123;</span><br><span class=\"line\">                    greeted: greeted,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            this.props.changeName(greeted?'eric':'mazheng');   </span><br><span class=\"line\">            &#125;,&#125;&gt;</span><br><span class=\"line\">            Hi</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UseGreeting = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'eric'</span> &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeting</span></span><br><span class=\"line\">            <span class=\"attr\">name</span>=<span class=\"string\">&#123;this.state.name&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">changeName</span>=<span class=\"string\">&#123;(newName)</span>=&gt;</span>&#123;</span><br><span class=\"line\">                this.setState(&#123;</span><br><span class=\"line\">                    name: newName,</span><br><span class=\"line\">                &#125;); </span><br><span class=\"line\">            &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"兄弟组件沟通\"><a href=\"#兄弟组件沟通\" class=\"headerlink\" title=\"兄弟组件沟通\"></a>兄弟组件沟通</h3><ul>\n<li>按照React单向数据流方式，我们需要借助父组件进行传递，通过父组件回调函数改变兄弟组件的props。</li>\n</ul>\n<p><img src=\"/0/brothers.png\" alt=\"兄弟组件沟通\"></p>\n","excerpt":"<h1 id=\"react-state-react状态管理\"><a href=\"#react-state-react状态管理\" class=\"headerlink\" title=\"react-state react状态管理\"></a>react-state react状态管理</h1><p>React是Facebook开源的一个用于构建用户界面的Javascript库，React专注于MVC架构中的V，即视图。</p>\n<h2 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h2><p>是一个模拟 DOM 树的 JavaScript 对象。 React 使用 Virtual DOM 来渲染 UI， 同时监听 Virtual DOM 上数据的变化并自动迁移这些变化到 UI 上。</p>\n<h2 id=\"React-Elements\"><a href=\"#React-Elements\" class=\"headerlink\" title=\"React Elements\"></a>React Elements</h2><p>代表 HTML 元素的 JavaScript 对象。 这些 JavaScript 对象最后被编译成对应的 HTML 元素。</p>\n<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h2><p>React 定义的一种 JavaScript 语法扩展，类似于 XML 。 JSX 是可选的， 我们完全可以使用 JavaScript 来编写 React 应用， 不过 JSX 提供了一套更为简便的方式来写 React 应用。","more":"</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = React.createElement(<span class=\"string\">'div'</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"Hello React\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用 JSX</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>封装 React Elements， 包含一个或者多个 React Elements。 Components 用于创建可以复用的 UI 模块，例如 分页，侧栏导航等。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><p>在上一个例子中，可以看到有一个特殊的引用： <code>this.props.name</code>。 这个引用称之为 <code>Props</code>，可以将他想象成 Component 的设置选项。</p>\n<p>在使用上， Props 类似于 HTML 中的属性：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">HelloMessage</span> <span class=\"attr\">name</span>=<span class=\"string\">\"foo\"</span> /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<p>在 Component 内部，通过 this.props.name 来引用这个 Props：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是， Props 仅用来定制 Component， 这些数据不应该被改动。 如果涉及到需要做改动的数据， 得考虑使用 <code>state</code>。</p>\n<h2 id=\"Stateful-Component\"><a href=\"#Stateful-Component\" class=\"headerlink\" title=\"Stateful Component\"></a>Stateful Component</h2><p>State 数据代表 Component 的状态， 用于维护 Component 内部的状态。 当 State 发生改变之后， React 将会重新渲染 UI 。State 数据通过 this.state 访问：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Greeting = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">greeted</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">this</span>.state.greeted ? <span class=\"string\">'Yes'</span> : <span class=\"string\">'No'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;response&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            this.setState(&#123;</span><br><span class=\"line\">                    greeted: !this.state.greeted</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,&#125;&gt;</span><br><span class=\"line\">            Hi</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/0/state.png\" alt=\"dom action state的关系图\"></p>\n<p>当 State 发生改变后， React 将 Component 渲染到 Virtual DOM，新的 Virtual DOM 与 旧版本的进行比对，检查出改变的部分并更新浏览器的 DOM。 在这个例子中，当按钮被点击后， <code>greeted</code>状态数据发生了变化，UI 跟随着更新。</p>\n<h2 id=\"Props与State的结合\"><a href=\"#Props与State的结合\" class=\"headerlink\" title=\"Props与State的结合\"></a>Props与State的结合</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Greeting = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">greeted</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">this</span>.state.greeted ? <span class=\"string\">'Yes'</span> : <span class=\"string\">'No'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;response&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            this.setState(&#123;</span><br><span class=\"line\">                    greeted: !this.state.greeted</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,&#125;&gt;</span><br><span class=\"line\">            Hi</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> GreetingApp = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greetings = <span class=\"keyword\">this</span>.props.users.map(<span class=\"function\">(<span class=\"params\">user</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;user&#125;</span> /&gt;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;greetings&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h2><p>React是单向数据流，数据主要从父节点传递到子节点（通过props）。</p>\n<p>如果父级的某个props改变了，React会重渲染所有的子节点。</p>\n<h3 id=\"父子组件沟通\"><a href=\"#父子组件沟通\" class=\"headerlink\" title=\"父子组件沟通\"></a>父子组件沟通</h3><ul>\n<li>父组件更新组件状态  —–props—–&gt;　子组件更新</li>\n<li>子组件更新父组件状态   —–需要父组件传递回调函数—–&gt;  子组件调用触发</li>\n</ul>\n<blockquote>\n<p><code>子组件更新父组件就需要 父组件通过props传递一个回调函数到子组件中，这个回调函数可以更新父组件，子组件就是通过触发这个回调函数，从而使父组件得到更新。</code></p>\n</blockquote>\n<p><img src=\"/0/propsFlow.png\" alt=\"父子组件沟通\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Greeting = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">greeted</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">this</span>.state.greeted ? <span class=\"string\">'Yes'</span> : <span class=\"string\">'No'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;response&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            const greeted = !this.state.greeted;</span><br><span class=\"line\">            this.setState(&#123;</span><br><span class=\"line\">                    greeted: greeted,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            this.props.changeName(greeted?'eric':'mazheng');   </span><br><span class=\"line\">            &#125;,&#125;&gt;</span><br><span class=\"line\">            Hi</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UseGreeting = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'eric'</span> &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeting</span></span><br><span class=\"line\">            <span class=\"attr\">name</span>=<span class=\"string\">&#123;this.state.name&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">changeName</span>=<span class=\"string\">&#123;(newName)</span>=&gt;</span>&#123;</span><br><span class=\"line\">                this.setState(&#123;</span><br><span class=\"line\">                    name: newName,</span><br><span class=\"line\">                &#125;); </span><br><span class=\"line\">            &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"兄弟组件沟通\"><a href=\"#兄弟组件沟通\" class=\"headerlink\" title=\"兄弟组件沟通\"></a>兄弟组件沟通</h3><ul>\n<li>按照React单向数据流方式，我们需要借助父组件进行传递，通过父组件回调函数改变兄弟组件的props。</li>\n</ul>\n<p><img src=\"/0/brothers.png\" alt=\"兄弟组件沟通\"></p>"},{"title":"ubuntu16.0.4上python版本切换的问题","date":"2017-12-11T12:53:18.000Z","_content":"事情的经过是这样的：\n> 在安装一个npm项目的时候，终端输出了一行这样的错误\n\n```bash\ngyp verb check python checking for Python executable \"python2\" in the PATH\ngyp verb `which` failed Error: not found: python2\n```\n<!--more-->\n执行\n\n```bash\nwhich python\n```\n\n输出结果\n\n```bash\n/usr/bin/python\n```\n\n看来是版本的问题，\n于是安装python2\n\n```bash \napt-get update     \napt-get install python2.7\n```\n\n终端还是输出了错误\n\n```bash\ngyp verb check python checking for Python executable \"python2\" in the PATH\ngyp verb `which` failed Error: not found: python2\n```\n\n郁闷中，于是打开/usr/bin查看python\n\n```bash\nlrwxrwxrwx 1 root   root          18 Dec  9 17:39 python -> /usr/bin/python3.5*\n```\n\n原来python只是个软连接，执行命令\n\n```bash\nrm /usr/bin/python\nln -s /usr/bin/python2.7 /usr/bin/python \n```\n\n修改软连接，python版本修改成功，npm包顺利安装成功！\n","source":"_posts/ubuntu16-0-4上python版本切换的问题.md","raw":"---\ntitle: ubuntu16.0.4上python版本切换的问题\ndate: 2017-12-11 20:53:18\ntags: ['ubuntu','python','版本','版本管理','切换']\ncategory: 'coding'\n---\n事情的经过是这样的：\n> 在安装一个npm项目的时候，终端输出了一行这样的错误\n\n```bash\ngyp verb check python checking for Python executable \"python2\" in the PATH\ngyp verb `which` failed Error: not found: python2\n```\n<!--more-->\n执行\n\n```bash\nwhich python\n```\n\n输出结果\n\n```bash\n/usr/bin/python\n```\n\n看来是版本的问题，\n于是安装python2\n\n```bash \napt-get update     \napt-get install python2.7\n```\n\n终端还是输出了错误\n\n```bash\ngyp verb check python checking for Python executable \"python2\" in the PATH\ngyp verb `which` failed Error: not found: python2\n```\n\n郁闷中，于是打开/usr/bin查看python\n\n```bash\nlrwxrwxrwx 1 root   root          18 Dec  9 17:39 python -> /usr/bin/python3.5*\n```\n\n原来python只是个软连接，执行命令\n\n```bash\nrm /usr/bin/python\nln -s /usr/bin/python2.7 /usr/bin/python \n```\n\n修改软连接，python版本修改成功，npm包顺利安装成功！\n","slug":"ubuntu16-0-4上python版本切换的问题","published":1,"updated":"2017-12-16T11:50:34.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1vn0004m6i6ju6syv0g","content":"<p>事情的经过是这样的：</p>\n<blockquote>\n<p>在安装一个npm项目的时候，终端输出了一行这样的错误</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp verb check python checking <span class=\"keyword\">for</span> Python executable <span class=\"string\">\"python2\"</span> <span class=\"keyword\">in</span> the PATH</span><br><span class=\"line\">gyp verb `<span class=\"built_in\">which</span>` failed Error: not found: python2</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> python</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python</span><br></pre></td></tr></table></figure>\n<p>看来是版本的问题，<br>于是安装python2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update     </span><br><span class=\"line\">apt-get install python2.7</span><br></pre></td></tr></table></figure>\n<p>终端还是输出了错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp verb check python checking <span class=\"keyword\">for</span> Python executable <span class=\"string\">\"python2\"</span> <span class=\"keyword\">in</span> the PATH</span><br><span class=\"line\">gyp verb `<span class=\"built_in\">which</span>` failed Error: not found: python2</span><br></pre></td></tr></table></figure>\n<p>郁闷中，于是打开/usr/bin查看python</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrwxrwxrwx 1 root   root          18 Dec  9 17:39 python -&gt; /usr/bin/python3.5*</span><br></pre></td></tr></table></figure>\n<p>原来python只是个软连接，执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm /usr/bin/python</span><br><span class=\"line\">ln -s /usr/bin/python2.7 /usr/bin/python</span><br></pre></td></tr></table></figure>\n<p>修改软连接，python版本修改成功，npm包顺利安装成功！</p>\n","excerpt":"<p>事情的经过是这样的：</p>\n<blockquote>\n<p>在安装一个npm项目的时候，终端输出了一行这样的错误</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp verb check python checking <span class=\"keyword\">for</span> Python executable <span class=\"string\">\"python2\"</span> <span class=\"keyword\">in</span> the PATH</span><br><span class=\"line\">gyp verb `<span class=\"built_in\">which</span>` failed Error: not found: python2</span><br></pre></td></tr></table></figure>","more":"<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> python</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python</span><br></pre></td></tr></table></figure>\n<p>看来是版本的问题，<br>于是安装python2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update     </span><br><span class=\"line\">apt-get install python2.7</span><br></pre></td></tr></table></figure>\n<p>终端还是输出了错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp verb check python checking <span class=\"keyword\">for</span> Python executable <span class=\"string\">\"python2\"</span> <span class=\"keyword\">in</span> the PATH</span><br><span class=\"line\">gyp verb `<span class=\"built_in\">which</span>` failed Error: not found: python2</span><br></pre></td></tr></table></figure>\n<p>郁闷中，于是打开/usr/bin查看python</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrwxrwxrwx 1 root   root          18 Dec  9 17:39 python -&gt; /usr/bin/python3.5*</span><br></pre></td></tr></table></figure>\n<p>原来python只是个软连接，执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm /usr/bin/python</span><br><span class=\"line\">ln -s /usr/bin/python2.7 /usr/bin/python</span><br></pre></td></tr></table></figure>\n<p>修改软连接，python版本修改成功，npm包顺利安装成功！</p>"},{"title":"webpack的常用插件","date":"2017-11-05T12:29:15.000Z","_content":"\n__project__\n\n``` diff\nhtml-webpack-plugin\n|- package.json\n|- webpack.config.js\n|- /src\n  |- index.js\n  |- style.css\n|- /index.html\n|- /node_modules\n```\n\n<!--more -->\n__index.html__\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<script src=\"./dist/index.js\"></script>\n</body>\n</html>\n```\n__package.json__\n\n``` javascript\n{\n  \"name\": \"html-webpack-plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n  },\n  \"repository\": {},\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"css-loader\": \"^0.28.7\",\n    \"style-loader\": \"^0.19.0\",\n    \"webpack\": \"^3.8.1\"\n  }\n}\n```\n__webpack.config.js__\n\n``` javascript\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    { loader: 'style-loader' },\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            modules: true\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n};\n```\n\n\n__src/index.js__\n\n``` javascript\nimport style from './style.css';\n\nconst h1 = document.createElement('h1');\nh1.className = style.danger;\nh1.innerHTML = 'hello webpack';\ndocument.body.appendChild(h1);\n```\n\n__src/style.css__\n\n``` css\n.danger{\n    color: red\n}\n```\n\n```bash\nnpm i\nnpm run build\n```\n__extract-text-webpack-plugin__\n\n[extract-text-webpack-plugin](https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/)：从捆绑包或捆绑包中提取文本到单独的文件中。\n\n```bash\nnpm install --save-dev extract-text-webpack-plugin\n```\n\n``` diff \nconst path = require('path');\n+const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n-           {\n-               test: /\\.css$/,\n-               use: [\n-                  { loader: 'style-loader' },\n-                  {\n-                       loader: 'css-loader',\n-                       options: {\n-                           modules: true\n-                       }\n-                   }\n-               ]\n-           }\n+           {\n+               test: /\\.css$/,\n+               use: ExtractTextWebpackPlugin.extract({\n+                   fallback: \"style-loader\",\n+                   use: [{\n+                       loader: 'css-loader',\n+                       options: {\n+                           modules: true,\n+                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n+                       }\n+                   }]\n+               })\n+           }\n        ]\n-   }\n+   },\n+plugins: [\n+       new ExtractTextWebpackPlugin(\"style.css\")\n+   ]\n};\n```\n__index.html__\n``` diff\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+   <link type=\"text/css\" rel=\"stylesheet\" href=\"./dist/style.css\"/>\n</head>\n<body>\n<script src=\"./dist/index.js\"></script>\n</body>\n</html>\n```\n```bash\nnpm run build\n```\n```javascript\nuse: ExtractTextWebpackPlugin.extract(\n    {\n        fallback: \"style-loader\", // 编译后用什么loader来提取css文件\n        use: \"css-loader\" // 指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader\n    }\n)\n\n```\n__clean-webpack-plugin__\n\n[clean-webpack-plugin](https://www.npmjs.com/package/clean-webpack-plugin)：对目标文件的清理\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n``` diff \nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\n+const CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n           {\n               test: /\\.css$/,\n               use: ExtractTextWebpackPlugin.extract({\n                   fallback: \"style-loader\",\n                   use: [{\n                       loader: 'css-loader',\n                       options: {\n                           modules: true,\n                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n                       }\n                   }]\n               })\n           }\n        ]\n     },\nplugins: [\n+       new CleanWebpackPlugin(['dist']),\n        new ExtractTextWebpackPlugin(\"style.css\")\n    ]\n};\n```\n```bash\nnpm run build\n```\n```javascript\n//参数说明\nnew CleanWebpackPlugin(\n    ['dist/main.*.js','dist/manifest.*.js'],　  //匹配删除的文件\n    {\n        root: __dirname,       　　　　　　　　　　//根目录\n        verbose:  true,        　　　　　　　　　　//开启在控制台输出信息\n        dry:      false        　　　　　　　　　　//启用删除文件\n    }\n)\n```\n\n__html-webpack-plugin__\n[html-webpack-plugin](https://doc.webpack-china.org/plugins/html-webpack-plugin)：简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n``` diff \nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n+const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n           {\n               test: /\\.css$/,\n               use: ExtractTextWebpackPlugin.extract({\n                   fallback: \"style-loader\",\n                   use: [{\n                       loader: 'css-loader',\n                       options: {\n                           modules: true,\n                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n                       }\n                   }]\n               })\n           }\n        ]\n     },\nplugins: [\n+       new HtmlWebpackPlugin({\n+           filename: 'main.html',\n+           template: './src/template.html',\n+           title: 'Webpack App title from webpack'\n+       }),\n        new CleanWebpackPlugin(['dist']),\n        new ExtractTextWebpackPlugin(\"style.css\")\n    ]\n};\n```\n\n\n__src/template.html__\n\n``` html\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body></body>\n</html>\n```\n```bash\nnpm run build  \n```\n```javascript\n//参数说明\nnew HtmlWebpackPlugin(\n    {\n        title: 'Webpack App title from webpack', // 用来生成页面的 title 元素\n        filename: 'main.html', // 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。\n        template: './src/template.html' // 模板文件路径，支持加载器，比如 html!./index.html\n        inject: 'head', // true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者    templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。\n        favicon: 'path/to/yourfile.ico', // 添加特定的 favicon 路径到输出的 HTML 文件中。\n        minify: { // {} | false , 传递 html-minifier 选项给 minify 输出\n            removeAttributeQuotes: true // 移除属性的引号\n        },\n        hash: true, // true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS件，对于解除 cache 很有用。<script type=text/javascript src=bundle.js?22b9692e22e7be37b57e></script>\n        cache: true, // true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。\n        showErrors:true, // true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中\n        chunks: ['chunk1','chunk2'], // 允许只添加某些块 (比如，仅仅 unit test 块)\n        excludeChunks: ['chunk3','chunk4'],// 允许跳过某些块，(比如，跳过单元测试的块)        \n    }\n)\n```\n>参考https://segmentfault.com/a/1190000007294861\n","source":"_posts/webpack的常用插件.md","raw":"---\ntitle: webpack的常用插件\ndate: 2017-11-05 20:29:15\ntags: ['webpack','前端','js','javascript']\ncategory: 'coding'\n---\n\n__project__\n\n``` diff\nhtml-webpack-plugin\n|- package.json\n|- webpack.config.js\n|- /src\n  |- index.js\n  |- style.css\n|- /index.html\n|- /node_modules\n```\n\n<!--more -->\n__index.html__\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<script src=\"./dist/index.js\"></script>\n</body>\n</html>\n```\n__package.json__\n\n``` javascript\n{\n  \"name\": \"html-webpack-plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n  },\n  \"repository\": {},\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"css-loader\": \"^0.28.7\",\n    \"style-loader\": \"^0.19.0\",\n    \"webpack\": \"^3.8.1\"\n  }\n}\n```\n__webpack.config.js__\n\n``` javascript\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    { loader: 'style-loader' },\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            modules: true\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n};\n```\n\n\n__src/index.js__\n\n``` javascript\nimport style from './style.css';\n\nconst h1 = document.createElement('h1');\nh1.className = style.danger;\nh1.innerHTML = 'hello webpack';\ndocument.body.appendChild(h1);\n```\n\n__src/style.css__\n\n``` css\n.danger{\n    color: red\n}\n```\n\n```bash\nnpm i\nnpm run build\n```\n__extract-text-webpack-plugin__\n\n[extract-text-webpack-plugin](https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/)：从捆绑包或捆绑包中提取文本到单独的文件中。\n\n```bash\nnpm install --save-dev extract-text-webpack-plugin\n```\n\n``` diff \nconst path = require('path');\n+const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n-           {\n-               test: /\\.css$/,\n-               use: [\n-                  { loader: 'style-loader' },\n-                  {\n-                       loader: 'css-loader',\n-                       options: {\n-                           modules: true\n-                       }\n-                   }\n-               ]\n-           }\n+           {\n+               test: /\\.css$/,\n+               use: ExtractTextWebpackPlugin.extract({\n+                   fallback: \"style-loader\",\n+                   use: [{\n+                       loader: 'css-loader',\n+                       options: {\n+                           modules: true,\n+                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n+                       }\n+                   }]\n+               })\n+           }\n        ]\n-   }\n+   },\n+plugins: [\n+       new ExtractTextWebpackPlugin(\"style.css\")\n+   ]\n};\n```\n__index.html__\n``` diff\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+   <link type=\"text/css\" rel=\"stylesheet\" href=\"./dist/style.css\"/>\n</head>\n<body>\n<script src=\"./dist/index.js\"></script>\n</body>\n</html>\n```\n```bash\nnpm run build\n```\n```javascript\nuse: ExtractTextWebpackPlugin.extract(\n    {\n        fallback: \"style-loader\", // 编译后用什么loader来提取css文件\n        use: \"css-loader\" // 指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader\n    }\n)\n\n```\n__clean-webpack-plugin__\n\n[clean-webpack-plugin](https://www.npmjs.com/package/clean-webpack-plugin)：对目标文件的清理\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n``` diff \nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\n+const CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n           {\n               test: /\\.css$/,\n               use: ExtractTextWebpackPlugin.extract({\n                   fallback: \"style-loader\",\n                   use: [{\n                       loader: 'css-loader',\n                       options: {\n                           modules: true,\n                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n                       }\n                   }]\n               })\n           }\n        ]\n     },\nplugins: [\n+       new CleanWebpackPlugin(['dist']),\n        new ExtractTextWebpackPlugin(\"style.css\")\n    ]\n};\n```\n```bash\nnpm run build\n```\n```javascript\n//参数说明\nnew CleanWebpackPlugin(\n    ['dist/main.*.js','dist/manifest.*.js'],　  //匹配删除的文件\n    {\n        root: __dirname,       　　　　　　　　　　//根目录\n        verbose:  true,        　　　　　　　　　　//开启在控制台输出信息\n        dry:      false        　　　　　　　　　　//启用删除文件\n    }\n)\n```\n\n__html-webpack-plugin__\n[html-webpack-plugin](https://doc.webpack-china.org/plugins/html-webpack-plugin)：简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n``` diff \nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n+const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module: {\n        rules: [\n           {\n               test: /\\.css$/,\n               use: ExtractTextWebpackPlugin.extract({\n                   fallback: \"style-loader\",\n                   use: [{\n                       loader: 'css-loader',\n                       options: {\n                           modules: true,\n                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n                       }\n                   }]\n               })\n           }\n        ]\n     },\nplugins: [\n+       new HtmlWebpackPlugin({\n+           filename: 'main.html',\n+           template: './src/template.html',\n+           title: 'Webpack App title from webpack'\n+       }),\n        new CleanWebpackPlugin(['dist']),\n        new ExtractTextWebpackPlugin(\"style.css\")\n    ]\n};\n```\n\n\n__src/template.html__\n\n``` html\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body></body>\n</html>\n```\n```bash\nnpm run build  \n```\n```javascript\n//参数说明\nnew HtmlWebpackPlugin(\n    {\n        title: 'Webpack App title from webpack', // 用来生成页面的 title 元素\n        filename: 'main.html', // 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。\n        template: './src/template.html' // 模板文件路径，支持加载器，比如 html!./index.html\n        inject: 'head', // true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者    templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。\n        favicon: 'path/to/yourfile.ico', // 添加特定的 favicon 路径到输出的 HTML 文件中。\n        minify: { // {} | false , 传递 html-minifier 选项给 minify 输出\n            removeAttributeQuotes: true // 移除属性的引号\n        },\n        hash: true, // true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS件，对于解除 cache 很有用。<script type=text/javascript src=bundle.js?22b9692e22e7be37b57e></script>\n        cache: true, // true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。\n        showErrors:true, // true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中\n        chunks: ['chunk1','chunk2'], // 允许只添加某些块 (比如，仅仅 unit test 块)\n        excludeChunks: ['chunk3','chunk4'],// 允许跳过某些块，(比如，跳过单元测试的块)        \n    }\n)\n```\n>参考https://segmentfault.com/a/1190000007294861\n","slug":"webpack的常用插件","published":1,"updated":"2017-12-16T11:50:34.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1vp0005m6i6h2cjpz47","content":"<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html-webpack-plugin</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- /src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">  |- style.css</span><br><span class=\"line\">|- /index.html</span><br><span class=\"line\">|- /node_modules</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>index.html</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./dist/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"html-webpack-plugin\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.config.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^3.8.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader'</span> &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">loader</span>: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">modules</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">'./style.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> h1 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'h1'</span>);</span><br><span class=\"line\">h1.className = style.danger;</span><br><span class=\"line\">h1.innerHTML = <span class=\"string\">'hello webpack'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(h1);</span><br></pre></td></tr></table></figure>\n<p><strong>src/style.css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.danger</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p><strong>extract-text-webpack-plugin</strong></p>\n<p><a href=\"https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/\" target=\"_blank\" rel=\"external\">extract-text-webpack-plugin</a>：从捆绑包或捆绑包中提取文本到单独的文件中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev extract-text-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\"><span class=\"addition\">+const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\"><span class=\"deletion\">-           &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-               test: /\\.css$/,</span></span><br><span class=\"line\"><span class=\"deletion\">-               use: [</span></span><br><span class=\"line\"><span class=\"deletion\">-                  &#123; loader: 'style-loader' &#125;,</span></span><br><span class=\"line\"><span class=\"deletion\">-                  &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-                       loader: 'css-loader',</span></span><br><span class=\"line\"><span class=\"deletion\">-                       options: &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-                           modules: true</span></span><br><span class=\"line\"><span class=\"deletion\">-                       &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-                   &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-               ]</span></span><br><span class=\"line\"><span class=\"deletion\">-           &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+           &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+               test: /\\.css$/,</span></span><br><span class=\"line\"><span class=\"addition\">+               use: ExtractTextWebpackPlugin.extract(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                   fallback: \"style-loader\",</span></span><br><span class=\"line\"><span class=\"addition\">+                   use: [&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                       loader: 'css-loader',</span></span><br><span class=\"line\"><span class=\"addition\">+                       options: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                           modules: true,</span></span><br><span class=\"line\"><span class=\"addition\">+                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span></span><br><span class=\"line\"><span class=\"addition\">+                       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+                   &#125;]</span></span><br><span class=\"line\"><span class=\"addition\">+               &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+           &#125;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+plugins: [</span></span><br><span class=\"line\"><span class=\"addition\">+       new ExtractTextWebpackPlugin(\"style.css\")</span></span><br><span class=\"line\"><span class=\"addition\">+   ]</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>index.html</strong><br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span><br><span class=\"line\">    &lt;title&gt;hello webpack&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta name=\"description\" content=\"\"&gt;</span><br><span class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;</span><br><span class=\"line\"><span class=\"addition\">+   &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"./dist/style.css\"/&gt;</span></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script src=\"./dist/index.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use: ExtractTextWebpackPlugin.extract(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">fallback</span>: <span class=\"string\">\"style-loader\"</span>, <span class=\"comment\">// 编译后用什么loader来提取css文件</span></span><br><span class=\"line\">        use: <span class=\"string\">\"css-loader\"</span> <span class=\"comment\">// 指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>clean-webpack-plugin</strong></p>\n<p><a href=\"https://www.npmjs.com/package/clean-webpack-plugin\" target=\"_blank\" rel=\"external\">clean-webpack-plugin</a>：对目标文件的清理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\">const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span><br><span class=\"line\"><span class=\"addition\">+const CleanWebpackPlugin = require('clean-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               test: /\\.css$/,</span><br><span class=\"line\">               use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class=\"line\">                   fallback: \"style-loader\",</span><br><span class=\"line\">                   use: [&#123;</span><br><span class=\"line\">                       loader: 'css-loader',</span><br><span class=\"line\">                       options: &#123;</span><br><span class=\"line\">                           modules: true,</span><br><span class=\"line\">                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"addition\">+       new CleanWebpackPlugin(['dist']),</span></span><br><span class=\"line\">        new ExtractTextWebpackPlugin(\"style.css\")</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数说明</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> CleanWebpackPlugin(</span><br><span class=\"line\">    [<span class=\"string\">'dist/main.*.js'</span>,<span class=\"string\">'dist/manifest.*.js'</span>],　  <span class=\"comment\">//匹配删除的文件</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: __dirname,       　　　　　　　　　　<span class=\"comment\">//根目录</span></span><br><span class=\"line\">        verbose:  <span class=\"literal\">true</span>,        　　　　　　　　　　<span class=\"comment\">//开启在控制台输出信息</span></span><br><span class=\"line\">        dry:      <span class=\"literal\">false</span>        　　　　　　　　　　<span class=\"comment\">//启用删除文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>html-webpack-plugin</strong><br><a href=\"https://doc.webpack-china.org/plugins/html-webpack-plugin\" target=\"_blank\" rel=\"external\">html-webpack-plugin</a>：简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\">const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span><br><span class=\"line\">const CleanWebpackPlugin = require('clean-webpack-plugin');</span><br><span class=\"line\"><span class=\"addition\">+const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               test: /\\.css$/,</span><br><span class=\"line\">               use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class=\"line\">                   fallback: \"style-loader\",</span><br><span class=\"line\">                   use: [&#123;</span><br><span class=\"line\">                       loader: 'css-loader',</span><br><span class=\"line\">                       options: &#123;</span><br><span class=\"line\">                           modules: true,</span><br><span class=\"line\">                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"addition\">+       new HtmlWebpackPlugin(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+           filename: 'main.html',</span></span><br><span class=\"line\"><span class=\"addition\">+           template: './src/template.html',</span></span><br><span class=\"line\"><span class=\"addition\">+           title: 'Webpack App title from webpack'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;),</span></span><br><span class=\"line\">        new CleanWebpackPlugin(['dist']),</span><br><span class=\"line\">        new ExtractTextWebpackPlugin(\"style.css\")</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>src/template.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">htmlWebpackPlugin.options.title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数说明</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'Webpack App title from webpack'</span>, <span class=\"comment\">// 用来生成页面的 title 元素</span></span><br><span class=\"line\">        filename: <span class=\"string\">'main.html'</span>, <span class=\"comment\">// 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。</span></span><br><span class=\"line\">        template: <span class=\"string\">'./src/template.html'</span> <span class=\"comment\">// 模板文件路径，支持加载器，比如 html!./index.html</span></span><br><span class=\"line\">        inject: <span class=\"string\">'head'</span>, <span class=\"comment\">// true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者    templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。</span></span><br><span class=\"line\">        favicon: <span class=\"string\">'path/to/yourfile.ico'</span>, <span class=\"comment\">// 添加特定的 favicon 路径到输出的 HTML 文件中。</span></span><br><span class=\"line\">        minify: &#123; <span class=\"comment\">// &#123;&#125; | false , 传递 html-minifier 选项给 minify 输出</span></span><br><span class=\"line\">            removeAttributeQuotes: <span class=\"literal\">true</span> <span class=\"comment\">// 移除属性的引号</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS件，对于解除 cache 很有用。&lt;script type=text/javascript src=bundle.js?22b9692e22e7be37b57e&gt;&lt;/script&gt;</span></span><br><span class=\"line\">        cache: <span class=\"literal\">true</span>, <span class=\"comment\">// true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。</span></span><br><span class=\"line\">        showErrors:<span class=\"literal\">true</span>, <span class=\"comment\">// true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中</span></span><br><span class=\"line\">        chunks: [<span class=\"string\">'chunk1'</span>,<span class=\"string\">'chunk2'</span>], <span class=\"comment\">// 允许只添加某些块 (比如，仅仅 unit test 块)</span></span><br><span class=\"line\">        excludeChunks: [<span class=\"string\">'chunk3'</span>,<span class=\"string\">'chunk4'</span>],<span class=\"comment\">// 允许跳过某些块，(比如，跳过单元测试的块)        </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考<a href=\"https://segmentfault.com/a/1190000007294861\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000007294861</a></p>\n</blockquote>\n","excerpt":"<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html-webpack-plugin</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- /src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">  |- style.css</span><br><span class=\"line\">|- /index.html</span><br><span class=\"line\">|- /node_modules</span><br></pre></td></tr></table></figure>","more":"<p><strong>index.html</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./dist/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"html-webpack-plugin\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.config.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^3.8.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader'</span> &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">loader</span>: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">modules</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">'./style.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> h1 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'h1'</span>);</span><br><span class=\"line\">h1.className = style.danger;</span><br><span class=\"line\">h1.innerHTML = <span class=\"string\">'hello webpack'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(h1);</span><br></pre></td></tr></table></figure>\n<p><strong>src/style.css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.danger</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p><strong>extract-text-webpack-plugin</strong></p>\n<p><a href=\"https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/\">extract-text-webpack-plugin</a>：从捆绑包或捆绑包中提取文本到单独的文件中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev extract-text-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\"><span class=\"addition\">+const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\"><span class=\"deletion\">-           &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-               test: /\\.css$/,</span></span><br><span class=\"line\"><span class=\"deletion\">-               use: [</span></span><br><span class=\"line\"><span class=\"deletion\">-                  &#123; loader: 'style-loader' &#125;,</span></span><br><span class=\"line\"><span class=\"deletion\">-                  &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-                       loader: 'css-loader',</span></span><br><span class=\"line\"><span class=\"deletion\">-                       options: &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-                           modules: true</span></span><br><span class=\"line\"><span class=\"deletion\">-                       &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-                   &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-               ]</span></span><br><span class=\"line\"><span class=\"deletion\">-           &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+           &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+               test: /\\.css$/,</span></span><br><span class=\"line\"><span class=\"addition\">+               use: ExtractTextWebpackPlugin.extract(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                   fallback: \"style-loader\",</span></span><br><span class=\"line\"><span class=\"addition\">+                   use: [&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                       loader: 'css-loader',</span></span><br><span class=\"line\"><span class=\"addition\">+                       options: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+                           modules: true,</span></span><br><span class=\"line\"><span class=\"addition\">+                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span></span><br><span class=\"line\"><span class=\"addition\">+                       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+                   &#125;]</span></span><br><span class=\"line\"><span class=\"addition\">+               &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+           &#125;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+plugins: [</span></span><br><span class=\"line\"><span class=\"addition\">+       new ExtractTextWebpackPlugin(\"style.css\")</span></span><br><span class=\"line\"><span class=\"addition\">+   ]</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>index.html</strong><br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span><br><span class=\"line\">    &lt;title&gt;hello webpack&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta name=\"description\" content=\"\"&gt;</span><br><span class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;</span><br><span class=\"line\"><span class=\"addition\">+   &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"./dist/style.css\"/&gt;</span></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script src=\"./dist/index.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use: ExtractTextWebpackPlugin.extract(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">fallback</span>: <span class=\"string\">\"style-loader\"</span>, <span class=\"comment\">// 编译后用什么loader来提取css文件</span></span><br><span class=\"line\">        use: <span class=\"string\">\"css-loader\"</span> <span class=\"comment\">// 指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>clean-webpack-plugin</strong></p>\n<p><a href=\"https://www.npmjs.com/package/clean-webpack-plugin\">clean-webpack-plugin</a>：对目标文件的清理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\">const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span><br><span class=\"line\"><span class=\"addition\">+const CleanWebpackPlugin = require('clean-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               test: /\\.css$/,</span><br><span class=\"line\">               use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class=\"line\">                   fallback: \"style-loader\",</span><br><span class=\"line\">                   use: [&#123;</span><br><span class=\"line\">                       loader: 'css-loader',</span><br><span class=\"line\">                       options: &#123;</span><br><span class=\"line\">                           modules: true,</span><br><span class=\"line\">                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"addition\">+       new CleanWebpackPlugin(['dist']),</span></span><br><span class=\"line\">        new ExtractTextWebpackPlugin(\"style.css\")</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数说明</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> CleanWebpackPlugin(</span><br><span class=\"line\">    [<span class=\"string\">'dist/main.*.js'</span>,<span class=\"string\">'dist/manifest.*.js'</span>],　  <span class=\"comment\">//匹配删除的文件</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: __dirname,       　　　　　　　　　　<span class=\"comment\">//根目录</span></span><br><span class=\"line\">        verbose:  <span class=\"literal\">true</span>,        　　　　　　　　　　<span class=\"comment\">//开启在控制台输出信息</span></span><br><span class=\"line\">        dry:      <span class=\"literal\">false</span>        　　　　　　　　　　<span class=\"comment\">//启用删除文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>html-webpack-plugin</strong><br><a href=\"https://doc.webpack-china.org/plugins/html-webpack-plugin\">html-webpack-plugin</a>：简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require('path');</span><br><span class=\"line\">const ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');</span><br><span class=\"line\">const CleanWebpackPlugin = require('clean-webpack-plugin');</span><br><span class=\"line\"><span class=\"addition\">+const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: './src/index.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: '[name].js',</span><br><span class=\"line\">        path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               test: /\\.css$/,</span><br><span class=\"line\">               use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class=\"line\">                   fallback: \"style-loader\",</span><br><span class=\"line\">                   use: [&#123;</span><br><span class=\"line\">                       loader: 'css-loader',</span><br><span class=\"line\">                       options: &#123;</span><br><span class=\"line\">                           modules: true,</span><br><span class=\"line\">                           localIdentName: '[path]_[name]_[local]_[hash:base64:5]'</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"addition\">+       new HtmlWebpackPlugin(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+           filename: 'main.html',</span></span><br><span class=\"line\"><span class=\"addition\">+           template: './src/template.html',</span></span><br><span class=\"line\"><span class=\"addition\">+           title: 'Webpack App title from webpack'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;),</span></span><br><span class=\"line\">        new CleanWebpackPlugin(['dist']),</span><br><span class=\"line\">        new ExtractTextWebpackPlugin(\"style.css\")</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>src/template.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">htmlWebpackPlugin.options.title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数说明</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'Webpack App title from webpack'</span>, <span class=\"comment\">// 用来生成页面的 title 元素</span></span><br><span class=\"line\">        filename: <span class=\"string\">'main.html'</span>, <span class=\"comment\">// 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。</span></span><br><span class=\"line\">        template: <span class=\"string\">'./src/template.html'</span> <span class=\"comment\">// 模板文件路径，支持加载器，比如 html!./index.html</span></span><br><span class=\"line\">        inject: <span class=\"string\">'head'</span>, <span class=\"comment\">// true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者    templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。</span></span><br><span class=\"line\">        favicon: <span class=\"string\">'path/to/yourfile.ico'</span>, <span class=\"comment\">// 添加特定的 favicon 路径到输出的 HTML 文件中。</span></span><br><span class=\"line\">        minify: &#123; <span class=\"comment\">// &#123;&#125; | false , 传递 html-minifier 选项给 minify 输出</span></span><br><span class=\"line\">            removeAttributeQuotes: <span class=\"literal\">true</span> <span class=\"comment\">// 移除属性的引号</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">hash</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS件，对于解除 cache 很有用。&lt;script type=text/javascript src=bundle.js?22b9692e22e7be37b57e&gt;&lt;/script&gt;</span></span><br><span class=\"line\">        cache: <span class=\"literal\">true</span>, <span class=\"comment\">// true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。</span></span><br><span class=\"line\">        showErrors:<span class=\"literal\">true</span>, <span class=\"comment\">// true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中</span></span><br><span class=\"line\">        chunks: [<span class=\"string\">'chunk1'</span>,<span class=\"string\">'chunk2'</span>], <span class=\"comment\">// 允许只添加某些块 (比如，仅仅 unit test 块)</span></span><br><span class=\"line\">        excludeChunks: [<span class=\"string\">'chunk3'</span>,<span class=\"string\">'chunk4'</span>],<span class=\"comment\">// 允许跳过某些块，(比如，跳过单元测试的块)        </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考<a href=\"https://segmentfault.com/a/1190000007294861\">https://segmentfault.com/a/1190000007294861</a></p>\n</blockquote>"},{"title":"webpack 集成(Integrations) 翻译","date":"2017-11-11T02:29:53.000Z","_content":"\n\n首先我们要消除一个常见的误解。webpack 是一个模块打包器(module bundler)（例如，[Browserify](http://browserify.org/) 或 [Brunch](http://brunch.io/)）。它不是一个任务执行器(task runner)（例如，[Make](https://www.gnu.org/software/make/), [Grunt](https://gruntjs.com/) 或者 [Gulp](https://gulpjs.com/) ）。任务执行器就是用来自动化处理常见的开发任务，例如项目的检查(lint)、构建(build)、测试(test)。相对于*打包器(bundler)*，任务执行器则聚焦在偏重上层的问题上面。你可以得益于，使用上层的工具，而将打包部分的问题留给 webpack。\n\n打包器(bundler)帮助您取得准备用于部署的 JavaScript 和样式表，将它们转换为适合浏览器的可用格式。例如，JavaScript 可以[压缩](/plugins/uglifyjs-webpack-plugin)、[拆分 chunk](/guides/code-splitting) 和[懒加载](/guides/lazy-loading)，以提高性能。打包是 web 开发中最重要的挑战之一，解决此问题可以消除开发过程中的大部分痛点。\n\n好消息是，虽然有一些功能重复，但如果以正确的方式处理，任务运行器和模块打包器能够一起协同工作。本指南提供了关于如何将 webpack 与一些流行的任务运行器集成在一起的高度概述。<!--more-->\n\n\n## NPM Scripts\n\n通常 webpack 用户使用 npm [`scripts`](https://docs.npmjs.com/misc/scripts) 来作为任务执行器。这是比较好的开始。然而跨平台支持是一个问题，为此有一些解决方案。许多用户，但不是大多数用户，直接使用 npm `scripts` 和各种级别的 webpack 配置和工具，来应对构建任务。\n\n因此，当 webpack 的核心焦点专注于打包时，有多种扩展可以供你使用，可以将其用于任务运行者常见的工作。集成一个单独的工具会增加复杂度，所以一定要权衡集成前后的利弊。\n\n\n## Grunt\n\n对于那些使用Grunt的人，我们推荐使用 [`grunt-webpack`](https://www.npmjs.com/package/grunt-webpack) 软件包。使用 `grunt-webpack` 你可以运行 webpack或 [webpack-dev-server](https://github.com/webpack/webpack-dev-server) 作为一项任务，访问[模板标签](https://gruntjs.com/api/grunt.template)中的统计信息，拆分开发和生产配置等等。如果您尚未安装 `grunt-webpack` 以及 `webpack` 本身，请首先安装：\n\n``` bash\nnpm i --save-dev grunt-webpack webpack\n```\n\n然后注册一个配置并加载任务：\n\n__Gruntfile.js__\n\n``` js\nconst webpackConfig = require('./webpack.config.js');\n\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    webpack: {\n      options: {\n        stats: !process.env.NODE_ENV || process.env.NODE_ENV === 'development'\n      },\n      prod: webpackConfig,\n      dev: Object.assign({ watch: true }, webpackConfig)\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-webpack');\n};\n```\n\n获取更多信息，请查看[知识库](https://github.com/webpack-contrib/grunt-webpack)。\n\n\n## Gulp\n\n在 [`webpack-stream`](https://github.com/shama/webpack-stream)包（a.k.a. `gulp-webpack`） 的帮助下，Gulp也可以很方便的完成集成。在这种情况下，不需要单独安装 `webpack` ，因为它是`webpack-stream`的直接依赖：\n\n``` bash\nnpm i --save-dev webpack-stream\n```\n\n只需要把 `webpack`（'webpack-stream'）替换为 `require('webpack-stream')`，并传递一个配置文件就可以了：\n\n__gulpfile.js__\n\n``` js\nvar gulp = require('gulp');\nvar webpack = require('webpack-stream');\ngulp.task('default', function() {\n  return gulp.src('src/entry.js')\n    .pipe(webpack({\n      // 一些配置选项……\n    }))\n    .pipe(gulp.dest('dist/'));\n});\n```\n\n获取更多信息，请查看[知识库](https://github.com/shama/webpack-stream)。\n\n## Mocha\n\n[`mocha-webpack`](https://github.com/zinserjan/mocha-webpack) 可以用来与 Mocha 整合。\n知识库提供了很多关于工具优缺点的细节，但 `mocha-webpack` 还算一个简单的封装，提供与 Mocha 几乎相同的CLI，并提供各种 webpack 功能，如改进了 watch 模式和优化了路径的分析。这里是一个如何安装并使用它来运行测试套件的小例子（在./test中找到）：\n\n``` bash\nnpm i --save-dev webpack mocha mocha-webpack\nmocha-webpack 'test/**/*.js'\n```\n\n获取更多信息，请查看[知识库](https://github.com/zinserjan/mocha-webpack)。\n\n\n## Karma\n\n[`karma-webpack`](https://github.com/webpack-contrib/karma-webpack) 软件包允许您使用webpack预处理 [Karma](http://karma-runner.github.io/1.0/index.html) 中的文件。它也可以使用[`webpack-dev-middleware`](https://github.com/webpack/webpack-dev-middleware)，并允许传递两者的配置。下面是一个简单的例子：\n\n``` bash\nnpm i --save-dev webpack karma karma-webpack\n```\n\n__karma.conf.js__\n\n``` js\nmodule.exports = function(config) {\n  config.set({\n    files: [\n      { pattern: 'test/*_test.js', watched: false },\n      { pattern: 'test/**/*_test.js', watched: false }\n    ],\n    preprocessors: {\n      'test/*_test.js': [ 'webpack' ],\n      'test/**/*_test.js': [ 'webpack' ]\n    },\n    webpack: {\n      // 一些自定义的webpack配置……\n    },\n    webpackMiddleware: {\n      // 一些定制的webpack-dev-middleware配置……\n    }\n  });\n};\n```\n\n获取更多信息，请访问[知识库](https://github.com/webpack-contrib/karma-webpack)。\n","source":"_posts/webpack-集成-Integrations-翻译.md","raw":"---\ntitle: webpack 集成(Integrations) 翻译\ndate: 2017-11-11 10:29:53\ntags: ['webpack','前端','js','javascript','integrations']\ncategory: 'coding'\n---\n\n\n首先我们要消除一个常见的误解。webpack 是一个模块打包器(module bundler)（例如，[Browserify](http://browserify.org/) 或 [Brunch](http://brunch.io/)）。它不是一个任务执行器(task runner)（例如，[Make](https://www.gnu.org/software/make/), [Grunt](https://gruntjs.com/) 或者 [Gulp](https://gulpjs.com/) ）。任务执行器就是用来自动化处理常见的开发任务，例如项目的检查(lint)、构建(build)、测试(test)。相对于*打包器(bundler)*，任务执行器则聚焦在偏重上层的问题上面。你可以得益于，使用上层的工具，而将打包部分的问题留给 webpack。\n\n打包器(bundler)帮助您取得准备用于部署的 JavaScript 和样式表，将它们转换为适合浏览器的可用格式。例如，JavaScript 可以[压缩](/plugins/uglifyjs-webpack-plugin)、[拆分 chunk](/guides/code-splitting) 和[懒加载](/guides/lazy-loading)，以提高性能。打包是 web 开发中最重要的挑战之一，解决此问题可以消除开发过程中的大部分痛点。\n\n好消息是，虽然有一些功能重复，但如果以正确的方式处理，任务运行器和模块打包器能够一起协同工作。本指南提供了关于如何将 webpack 与一些流行的任务运行器集成在一起的高度概述。<!--more-->\n\n\n## NPM Scripts\n\n通常 webpack 用户使用 npm [`scripts`](https://docs.npmjs.com/misc/scripts) 来作为任务执行器。这是比较好的开始。然而跨平台支持是一个问题，为此有一些解决方案。许多用户，但不是大多数用户，直接使用 npm `scripts` 和各种级别的 webpack 配置和工具，来应对构建任务。\n\n因此，当 webpack 的核心焦点专注于打包时，有多种扩展可以供你使用，可以将其用于任务运行者常见的工作。集成一个单独的工具会增加复杂度，所以一定要权衡集成前后的利弊。\n\n\n## Grunt\n\n对于那些使用Grunt的人，我们推荐使用 [`grunt-webpack`](https://www.npmjs.com/package/grunt-webpack) 软件包。使用 `grunt-webpack` 你可以运行 webpack或 [webpack-dev-server](https://github.com/webpack/webpack-dev-server) 作为一项任务，访问[模板标签](https://gruntjs.com/api/grunt.template)中的统计信息，拆分开发和生产配置等等。如果您尚未安装 `grunt-webpack` 以及 `webpack` 本身，请首先安装：\n\n``` bash\nnpm i --save-dev grunt-webpack webpack\n```\n\n然后注册一个配置并加载任务：\n\n__Gruntfile.js__\n\n``` js\nconst webpackConfig = require('./webpack.config.js');\n\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    webpack: {\n      options: {\n        stats: !process.env.NODE_ENV || process.env.NODE_ENV === 'development'\n      },\n      prod: webpackConfig,\n      dev: Object.assign({ watch: true }, webpackConfig)\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-webpack');\n};\n```\n\n获取更多信息，请查看[知识库](https://github.com/webpack-contrib/grunt-webpack)。\n\n\n## Gulp\n\n在 [`webpack-stream`](https://github.com/shama/webpack-stream)包（a.k.a. `gulp-webpack`） 的帮助下，Gulp也可以很方便的完成集成。在这种情况下，不需要单独安装 `webpack` ，因为它是`webpack-stream`的直接依赖：\n\n``` bash\nnpm i --save-dev webpack-stream\n```\n\n只需要把 `webpack`（'webpack-stream'）替换为 `require('webpack-stream')`，并传递一个配置文件就可以了：\n\n__gulpfile.js__\n\n``` js\nvar gulp = require('gulp');\nvar webpack = require('webpack-stream');\ngulp.task('default', function() {\n  return gulp.src('src/entry.js')\n    .pipe(webpack({\n      // 一些配置选项……\n    }))\n    .pipe(gulp.dest('dist/'));\n});\n```\n\n获取更多信息，请查看[知识库](https://github.com/shama/webpack-stream)。\n\n## Mocha\n\n[`mocha-webpack`](https://github.com/zinserjan/mocha-webpack) 可以用来与 Mocha 整合。\n知识库提供了很多关于工具优缺点的细节，但 `mocha-webpack` 还算一个简单的封装，提供与 Mocha 几乎相同的CLI，并提供各种 webpack 功能，如改进了 watch 模式和优化了路径的分析。这里是一个如何安装并使用它来运行测试套件的小例子（在./test中找到）：\n\n``` bash\nnpm i --save-dev webpack mocha mocha-webpack\nmocha-webpack 'test/**/*.js'\n```\n\n获取更多信息，请查看[知识库](https://github.com/zinserjan/mocha-webpack)。\n\n\n## Karma\n\n[`karma-webpack`](https://github.com/webpack-contrib/karma-webpack) 软件包允许您使用webpack预处理 [Karma](http://karma-runner.github.io/1.0/index.html) 中的文件。它也可以使用[`webpack-dev-middleware`](https://github.com/webpack/webpack-dev-middleware)，并允许传递两者的配置。下面是一个简单的例子：\n\n``` bash\nnpm i --save-dev webpack karma karma-webpack\n```\n\n__karma.conf.js__\n\n``` js\nmodule.exports = function(config) {\n  config.set({\n    files: [\n      { pattern: 'test/*_test.js', watched: false },\n      { pattern: 'test/**/*_test.js', watched: false }\n    ],\n    preprocessors: {\n      'test/*_test.js': [ 'webpack' ],\n      'test/**/*_test.js': [ 'webpack' ]\n    },\n    webpack: {\n      // 一些自定义的webpack配置……\n    },\n    webpackMiddleware: {\n      // 一些定制的webpack-dev-middleware配置……\n    }\n  });\n};\n```\n\n获取更多信息，请访问[知识库](https://github.com/webpack-contrib/karma-webpack)。\n","slug":"webpack-集成-Integrations-翻译","published":1,"updated":"2017-12-16T11:50:34.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1vq0006m6i6fi0gs0rx","content":"<p>首先我们要消除一个常见的误解。webpack 是一个模块打包器(module bundler)（例如，<a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">Browserify</a> 或 <a href=\"http://brunch.io/\" target=\"_blank\" rel=\"external\">Brunch</a>）。它不是一个任务执行器(task runner)（例如，<a href=\"https://www.gnu.org/software/make/\" target=\"_blank\" rel=\"external\">Make</a>, <a href=\"https://gruntjs.com/\" target=\"_blank\" rel=\"external\">Grunt</a> 或者 <a href=\"https://gulpjs.com/\" target=\"_blank\" rel=\"external\">Gulp</a> ）。任务执行器就是用来自动化处理常见的开发任务，例如项目的检查(lint)、构建(build)、测试(test)。相对于<em>打包器(bundler)</em>，任务执行器则聚焦在偏重上层的问题上面。你可以得益于，使用上层的工具，而将打包部分的问题留给 webpack。</p>\n<p>打包器(bundler)帮助您取得准备用于部署的 JavaScript 和样式表，将它们转换为适合浏览器的可用格式。例如，JavaScript 可以<a href=\"/plugins/uglifyjs-webpack-plugin\">压缩</a>、<a href=\"/guides/code-splitting\">拆分 chunk</a> 和<a href=\"/guides/lazy-loading\">懒加载</a>，以提高性能。打包是 web 开发中最重要的挑战之一，解决此问题可以消除开发过程中的大部分痛点。</p>\n<p>好消息是，虽然有一些功能重复，但如果以正确的方式处理，任务运行器和模块打包器能够一起协同工作。本指南提供了关于如何将 webpack 与一些流行的任务运行器集成在一起的高度概述。<a id=\"more\"></a></p>\n<h2 id=\"NPM-Scripts\"><a href=\"#NPM-Scripts\" class=\"headerlink\" title=\"NPM Scripts\"></a>NPM Scripts</h2><p>通常 webpack 用户使用 npm <a href=\"https://docs.npmjs.com/misc/scripts\" target=\"_blank\" rel=\"external\"><code>scripts</code></a> 来作为任务执行器。这是比较好的开始。然而跨平台支持是一个问题，为此有一些解决方案。许多用户，但不是大多数用户，直接使用 npm <code>scripts</code> 和各种级别的 webpack 配置和工具，来应对构建任务。</p>\n<p>因此，当 webpack 的核心焦点专注于打包时，有多种扩展可以供你使用，可以将其用于任务运行者常见的工作。集成一个单独的工具会增加复杂度，所以一定要权衡集成前后的利弊。</p>\n<h2 id=\"Grunt\"><a href=\"#Grunt\" class=\"headerlink\" title=\"Grunt\"></a>Grunt</h2><p>对于那些使用Grunt的人，我们推荐使用 <a href=\"https://www.npmjs.com/package/grunt-webpack\" target=\"_blank\" rel=\"external\"><code>grunt-webpack</code></a> 软件包。使用 <code>grunt-webpack</code> 你可以运行 webpack或 <a href=\"https://github.com/webpack/webpack-dev-server\" target=\"_blank\" rel=\"external\">webpack-dev-server</a> 作为一项任务，访问<a href=\"https://gruntjs.com/api/grunt.template\" target=\"_blank\" rel=\"external\">模板标签</a>中的统计信息，拆分开发和生产配置等等。如果您尚未安装 <code>grunt-webpack</code> 以及 <code>webpack</code> 本身，请首先安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev grunt-webpack webpack</span><br></pre></td></tr></table></figure>\n<p>然后注册一个配置并加载任务：</p>\n<p><strong>Gruntfile.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\">  grunt.initConfig(&#123;</span><br><span class=\"line\">    <span class=\"attr\">webpack</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">stats</span>: !process.env.NODE_ENV || process.env.NODE_ENV === <span class=\"string\">'development'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">prod</span>: webpackConfig,</span><br><span class=\"line\">      <span class=\"attr\">dev</span>: <span class=\"built_in\">Object</span>.assign(&#123; <span class=\"attr\">watch</span>: <span class=\"literal\">true</span> &#125;, webpackConfig)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-webpack'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>获取更多信息，请查看<a href=\"https://github.com/webpack-contrib/grunt-webpack\" target=\"_blank\" rel=\"external\">知识库</a>。</p>\n<h2 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h2><p>在 <a href=\"https://github.com/shama/webpack-stream\" target=\"_blank\" rel=\"external\"><code>webpack-stream</code></a>包（a.k.a. <code>gulp-webpack</code>） 的帮助下，Gulp也可以很方便的完成集成。在这种情况下，不需要单独安装 <code>webpack</code> ，因为它是<code>webpack-stream</code>的直接依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev webpack-stream</span><br></pre></td></tr></table></figure>\n<p>只需要把 <code>webpack</code>（’webpack-stream’）替换为 <code>require(&#39;webpack-stream&#39;)</code>，并传递一个配置文件就可以了：</p>\n<p><strong>gulpfile.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-stream'</span>);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/entry.js'</span>)</span><br><span class=\"line\">    .pipe(webpack(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 一些配置选项……</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>获取更多信息，请查看<a href=\"https://github.com/shama/webpack-stream\" target=\"_blank\" rel=\"external\">知识库</a>。</p>\n<h2 id=\"Mocha\"><a href=\"#Mocha\" class=\"headerlink\" title=\"Mocha\"></a>Mocha</h2><p><a href=\"https://github.com/zinserjan/mocha-webpack\" target=\"_blank\" rel=\"external\"><code>mocha-webpack</code></a> 可以用来与 Mocha 整合。<br>知识库提供了很多关于工具优缺点的细节，但 <code>mocha-webpack</code> 还算一个简单的封装，提供与 Mocha 几乎相同的CLI，并提供各种 webpack 功能，如改进了 watch 模式和优化了路径的分析。这里是一个如何安装并使用它来运行测试套件的小例子（在./test中找到）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev webpack mocha mocha-webpack</span><br><span class=\"line\">mocha-webpack <span class=\"string\">'test/**/*.js'</span></span><br></pre></td></tr></table></figure>\n<p>获取更多信息，请查看<a href=\"https://github.com/zinserjan/mocha-webpack\" target=\"_blank\" rel=\"external\">知识库</a>。</p>\n<h2 id=\"Karma\"><a href=\"#Karma\" class=\"headerlink\" title=\"Karma\"></a>Karma</h2><p><a href=\"https://github.com/webpack-contrib/karma-webpack\" target=\"_blank\" rel=\"external\"><code>karma-webpack</code></a> 软件包允许您使用webpack预处理 <a href=\"http://karma-runner.github.io/1.0/index.html\" target=\"_blank\" rel=\"external\">Karma</a> 中的文件。它也可以使用<a href=\"https://github.com/webpack/webpack-dev-middleware\" target=\"_blank\" rel=\"external\"><code>webpack-dev-middleware</code></a>，并允许传递两者的配置。下面是一个简单的例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev webpack karma karma-webpack</span><br></pre></td></tr></table></figure>\n<p><strong>karma.conf.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    <span class=\"attr\">files</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">pattern</span>: <span class=\"string\">'test/*_test.js'</span>, <span class=\"attr\">watched</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">pattern</span>: <span class=\"string\">'test/**/*_test.js'</span>, <span class=\"attr\">watched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">preprocessors</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">'test/*_test.js'</span>: [ <span class=\"string\">'webpack'</span> ],</span><br><span class=\"line\">      <span class=\"string\">'test/**/*_test.js'</span>: [ <span class=\"string\">'webpack'</span> ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">webpack</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 一些自定义的webpack配置……</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">webpackMiddleware</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 一些定制的webpack-dev-middleware配置……</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>获取更多信息，请访问<a href=\"https://github.com/webpack-contrib/karma-webpack\" target=\"_blank\" rel=\"external\">知识库</a>。</p>\n","excerpt":"<p>首先我们要消除一个常见的误解。webpack 是一个模块打包器(module bundler)（例如，<a href=\"http://browserify.org/\">Browserify</a> 或 <a href=\"http://brunch.io/\">Brunch</a>）。它不是一个任务执行器(task runner)（例如，<a href=\"https://www.gnu.org/software/make/\">Make</a>, <a href=\"https://gruntjs.com/\">Grunt</a> 或者 <a href=\"https://gulpjs.com/\">Gulp</a> ）。任务执行器就是用来自动化处理常见的开发任务，例如项目的检查(lint)、构建(build)、测试(test)。相对于<em>打包器(bundler)</em>，任务执行器则聚焦在偏重上层的问题上面。你可以得益于，使用上层的工具，而将打包部分的问题留给 webpack。</p>\n<p>打包器(bundler)帮助您取得准备用于部署的 JavaScript 和样式表，将它们转换为适合浏览器的可用格式。例如，JavaScript 可以<a href=\"/plugins/uglifyjs-webpack-plugin\">压缩</a>、<a href=\"/guides/code-splitting\">拆分 chunk</a> 和<a href=\"/guides/lazy-loading\">懒加载</a>，以提高性能。打包是 web 开发中最重要的挑战之一，解决此问题可以消除开发过程中的大部分痛点。</p>\n<p>好消息是，虽然有一些功能重复，但如果以正确的方式处理，任务运行器和模块打包器能够一起协同工作。本指南提供了关于如何将 webpack 与一些流行的任务运行器集成在一起的高度概述。","more":"</p>\n<h2 id=\"NPM-Scripts\"><a href=\"#NPM-Scripts\" class=\"headerlink\" title=\"NPM Scripts\"></a>NPM Scripts</h2><p>通常 webpack 用户使用 npm <a href=\"https://docs.npmjs.com/misc/scripts\"><code>scripts</code></a> 来作为任务执行器。这是比较好的开始。然而跨平台支持是一个问题，为此有一些解决方案。许多用户，但不是大多数用户，直接使用 npm <code>scripts</code> 和各种级别的 webpack 配置和工具，来应对构建任务。</p>\n<p>因此，当 webpack 的核心焦点专注于打包时，有多种扩展可以供你使用，可以将其用于任务运行者常见的工作。集成一个单独的工具会增加复杂度，所以一定要权衡集成前后的利弊。</p>\n<h2 id=\"Grunt\"><a href=\"#Grunt\" class=\"headerlink\" title=\"Grunt\"></a>Grunt</h2><p>对于那些使用Grunt的人，我们推荐使用 <a href=\"https://www.npmjs.com/package/grunt-webpack\"><code>grunt-webpack</code></a> 软件包。使用 <code>grunt-webpack</code> 你可以运行 webpack或 <a href=\"https://github.com/webpack/webpack-dev-server\">webpack-dev-server</a> 作为一项任务，访问<a href=\"https://gruntjs.com/api/grunt.template\">模板标签</a>中的统计信息，拆分开发和生产配置等等。如果您尚未安装 <code>grunt-webpack</code> 以及 <code>webpack</code> 本身，请首先安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev grunt-webpack webpack</span><br></pre></td></tr></table></figure>\n<p>然后注册一个配置并加载任务：</p>\n<p><strong>Gruntfile.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\">  grunt.initConfig(&#123;</span><br><span class=\"line\">    <span class=\"attr\">webpack</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">stats</span>: !process.env.NODE_ENV || process.env.NODE_ENV === <span class=\"string\">'development'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">prod</span>: webpackConfig,</span><br><span class=\"line\">      <span class=\"attr\">dev</span>: <span class=\"built_in\">Object</span>.assign(&#123; <span class=\"attr\">watch</span>: <span class=\"literal\">true</span> &#125;, webpackConfig)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-webpack'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>获取更多信息，请查看<a href=\"https://github.com/webpack-contrib/grunt-webpack\">知识库</a>。</p>\n<h2 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h2><p>在 <a href=\"https://github.com/shama/webpack-stream\"><code>webpack-stream</code></a>包（a.k.a. <code>gulp-webpack</code>） 的帮助下，Gulp也可以很方便的完成集成。在这种情况下，不需要单独安装 <code>webpack</code> ，因为它是<code>webpack-stream</code>的直接依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev webpack-stream</span><br></pre></td></tr></table></figure>\n<p>只需要把 <code>webpack</code>（’webpack-stream’）替换为 <code>require(&#39;webpack-stream&#39;)</code>，并传递一个配置文件就可以了：</p>\n<p><strong>gulpfile.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-stream'</span>);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/entry.js'</span>)</span><br><span class=\"line\">    .pipe(webpack(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 一些配置选项……</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>获取更多信息，请查看<a href=\"https://github.com/shama/webpack-stream\">知识库</a>。</p>\n<h2 id=\"Mocha\"><a href=\"#Mocha\" class=\"headerlink\" title=\"Mocha\"></a>Mocha</h2><p><a href=\"https://github.com/zinserjan/mocha-webpack\"><code>mocha-webpack</code></a> 可以用来与 Mocha 整合。<br>知识库提供了很多关于工具优缺点的细节，但 <code>mocha-webpack</code> 还算一个简单的封装，提供与 Mocha 几乎相同的CLI，并提供各种 webpack 功能，如改进了 watch 模式和优化了路径的分析。这里是一个如何安装并使用它来运行测试套件的小例子（在./test中找到）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev webpack mocha mocha-webpack</span><br><span class=\"line\">mocha-webpack <span class=\"string\">'test/**/*.js'</span></span><br></pre></td></tr></table></figure>\n<p>获取更多信息，请查看<a href=\"https://github.com/zinserjan/mocha-webpack\">知识库</a>。</p>\n<h2 id=\"Karma\"><a href=\"#Karma\" class=\"headerlink\" title=\"Karma\"></a>Karma</h2><p><a href=\"https://github.com/webpack-contrib/karma-webpack\"><code>karma-webpack</code></a> 软件包允许您使用webpack预处理 <a href=\"http://karma-runner.github.io/1.0/index.html\">Karma</a> 中的文件。它也可以使用<a href=\"https://github.com/webpack/webpack-dev-middleware\"><code>webpack-dev-middleware</code></a>，并允许传递两者的配置。下面是一个简单的例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev webpack karma karma-webpack</span><br></pre></td></tr></table></figure>\n<p><strong>karma.conf.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    <span class=\"attr\">files</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">pattern</span>: <span class=\"string\">'test/*_test.js'</span>, <span class=\"attr\">watched</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">pattern</span>: <span class=\"string\">'test/**/*_test.js'</span>, <span class=\"attr\">watched</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">preprocessors</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">'test/*_test.js'</span>: [ <span class=\"string\">'webpack'</span> ],</span><br><span class=\"line\">      <span class=\"string\">'test/**/*_test.js'</span>: [ <span class=\"string\">'webpack'</span> ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">webpack</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 一些自定义的webpack配置……</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">webpackMiddleware</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 一些定制的webpack-dev-middleware配置……</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>获取更多信息，请访问<a href=\"https://github.com/webpack-contrib/karma-webpack\">知识库</a>。</p>"},{"title":"从高阶函数到高阶组件","date":"2017-11-15T01:33:02.000Z","_content":"## 纯函数([https://zh.wikipedia.org/wiki/纯函数](https://zh.wikipedia.org/wiki/%E7%BA%AF%E5%87%BD%E6%95%B0))\n如果一个函数遵循以下几个规则那么他就是纯函数：\n+ 函数处理的数据都是通过参数传递给函数。\n+ 他不接受不确定的数据或者任何其他数据（他们通常是[副作用](https://zh.wikipedia.org/wiki/函数副作用)的）。\n+ 同样的输入，函数将得到同样的输出。\n\n纯函数的好处主要有几点：\n+ 无状态。线程安全。不需要线程同步。\n+ `纯函数相互调用组装起来的函数，还是纯函数`。\n+ 应用程序或者运行环境（Runtime）可以对纯函数的运算结果进行缓存，运算加快速度。<!--more-->\n\n例子：\n```javascript\n//纯函数\nfunction add(x, y) {\n    return x + y;\n}\n```\n```javascript\n//不是纯函数\nvar y = 2;\n\nfunction badAdd(x) {\n    return x + y;\n} \n```\n\n## 高阶函数([https://zh.wikipedia.org/wiki/高阶函数](https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0))\n在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：\n+ 接受一个或多个函数作为输入\n+ 输出一个函数\n\n例子：\n```javascript\nfunction addition(x, y) {\n    return X + Y;\n}\n```\n业务发生改变需要console，addition不能修改，因为你不知道add都用在了哪里，你的修改会对现有代码参数什么样的后果。于是有了下面的结果：\n```javascript\nfunction additionAndLog(x, y) {\n    var result = addition(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\n由于你的修改没有对现有代码产生不好的影响，所以减法、乘法、除法都要做console的添加：\n```javascript\nfunction subtractionAndLog(x, y) {\n    var result = subtraction(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\n```javascript\nfunction multiplicationAndLog(x, y) {\n    var result = multiplication(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\n```javascript\nfunction divisionAndLog(x, y) {\n    var result = division(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\n由于你的修改没有对现有代码产生不好的影响，所以n个函数都要做console的添加！！！\n改变思路：\n\n```javascript\nfunction logAndReturn(func) {\n    return function() {\n        var args = Array.prototype.slice.call(arguments)\n        // arguments是个类数组 {0:42, 1:52, 2:63, length:3}\n        // Array的实例的slice给arguments使用\n        var result = func.apply(null, args);\n        // Function.apply(obj,args)能接受两个参数：\n        // obj: 这个对象将代替Function类中的this对象\n        // args： 这是个数组，它将作为参数传递给Function类\n        // function Person(name,age){\n        //     this.name=name;\n        //     this.age=age;\n        //     this.sayhello=function(){alert(\"hello\")//};\n        // } \n        // function Student(name,age,grade,school){\n        //     Person.apply(this,arguments);\n        //     this.grade=grade;\n        //     this.school=school;\n        // } \n        console.log('Result', result);\n        return result;\n    }\n}\n\nconst additionAndLog =  logAndReturn(addition);\nconst subtractionAndLog =  logAndReturn(subtraction);\nconst multiplicationAndLog =  logAndReturn(multiplication);\nconst divisionAndLog =  logAndReturn(division);\n```\n## 高阶组件\n一个路由组件的例子：\n```html\n<Link to=\"/\" activeClassName=\"active-link\"> Home </Link>\n<Link to=\"/about\" activeClassName=\"active-link\"> About</Link>\n<Link to=\"/contact\" activeClassName=\"active-link\"> Contact</Link>\n```\n初步优化，提取相同的代码：\n```javascript\nvar AppLink=React.createClass({\n    render:function(){\n        return(\n            <Link to={this.props.to} activeClassName=\"active-link\">\n                {this.props.children}\n            </Link>;\n        );\n    }\n});\n```\n改变现在的路由组件：\n```html\n<AppLink to=\"/\">Home</AppLink>\n<AppLink to=\"/about\">About</AppLink>\n<AppLink to=\"/contact\">Contact</AppLink>\n```\n进一步优化，对props的覆盖控制：\n```javascript\n//高阶组件覆盖，强调统一\nvar AppLink=React.createClass({\n    render:function(){\n        const {children, props} = this.props;\n        return(\n            <Link {...props} activeClassName=\"active-link\">\n                {children}\n            </Link>;\n        );\n    }\n});\n\n//调用组件覆盖，强调默认值和定制化\nvar AppLink=React.createClass({\n    render:function(){\n        const {children, props} = this.props;\n        return(\n            <Link activeClassName=\"active-link\" {...props}>\n                {children}\n            </Link>;\n        );\n    }\n});\n```\n## SAAS项目的应用实例-----<AuthControl>权限控制组件\n\n```Javascript\nclass AuthControl extends React.Component {\n    render() {\n        const { roles, userRoles, deniedAuth, children } = this.props;\n\n        if (_.intersection(roles, userRoles).length === 0) {\n            if (deniedAuth !== undefined) {\n                return deniedAuth;\n            }\n            return null;\n        } else {\n            return (children);\n        }\n    }\n}\n\nAuthControl.propTypes = {\n    roles: React.PropTypes.array.isRequired,\n    userRoles: React.PropTypes.array.isRequired,\n    children: React.PropTypes.element,\n    deniedAuth: React.PropTypes.element,\n};\n\n<AuthControl\n    roles={['admin']} \n    userRoles={[‘user’]}\n    deniedAuth={<div>没有权限</div>}\n>\n    <div>有权限</div>\n</AuthControl>\n```\n## 结论\n通过将纯函数和高阶函数的函数式编程的原理应用到React，您可以创建一个更容易维护和使用的代码库。","source":"_posts/从高阶函数到高阶组件.md","raw":"---\ntitle: 从高阶函数到高阶组件\ndate: 2017-11-15 09:33:02\ntags: ['前端','js','javascript','react','高阶函数','纯函数','高阶组件']\ncategory: 'coding'\n---\n## 纯函数([https://zh.wikipedia.org/wiki/纯函数](https://zh.wikipedia.org/wiki/%E7%BA%AF%E5%87%BD%E6%95%B0))\n如果一个函数遵循以下几个规则那么他就是纯函数：\n+ 函数处理的数据都是通过参数传递给函数。\n+ 他不接受不确定的数据或者任何其他数据（他们通常是[副作用](https://zh.wikipedia.org/wiki/函数副作用)的）。\n+ 同样的输入，函数将得到同样的输出。\n\n纯函数的好处主要有几点：\n+ 无状态。线程安全。不需要线程同步。\n+ `纯函数相互调用组装起来的函数，还是纯函数`。\n+ 应用程序或者运行环境（Runtime）可以对纯函数的运算结果进行缓存，运算加快速度。<!--more-->\n\n例子：\n```javascript\n//纯函数\nfunction add(x, y) {\n    return x + y;\n}\n```\n```javascript\n//不是纯函数\nvar y = 2;\n\nfunction badAdd(x) {\n    return x + y;\n} \n```\n\n## 高阶函数([https://zh.wikipedia.org/wiki/高阶函数](https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0))\n在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：\n+ 接受一个或多个函数作为输入\n+ 输出一个函数\n\n例子：\n```javascript\nfunction addition(x, y) {\n    return X + Y;\n}\n```\n业务发生改变需要console，addition不能修改，因为你不知道add都用在了哪里，你的修改会对现有代码参数什么样的后果。于是有了下面的结果：\n```javascript\nfunction additionAndLog(x, y) {\n    var result = addition(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\n由于你的修改没有对现有代码产生不好的影响，所以减法、乘法、除法都要做console的添加：\n```javascript\nfunction subtractionAndLog(x, y) {\n    var result = subtraction(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\n```javascript\nfunction multiplicationAndLog(x, y) {\n    var result = multiplication(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\n```javascript\nfunction divisionAndLog(x, y) {\n    var result = division(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\n由于你的修改没有对现有代码产生不好的影响，所以n个函数都要做console的添加！！！\n改变思路：\n\n```javascript\nfunction logAndReturn(func) {\n    return function() {\n        var args = Array.prototype.slice.call(arguments)\n        // arguments是个类数组 {0:42, 1:52, 2:63, length:3}\n        // Array的实例的slice给arguments使用\n        var result = func.apply(null, args);\n        // Function.apply(obj,args)能接受两个参数：\n        // obj: 这个对象将代替Function类中的this对象\n        // args： 这是个数组，它将作为参数传递给Function类\n        // function Person(name,age){\n        //     this.name=name;\n        //     this.age=age;\n        //     this.sayhello=function(){alert(\"hello\")//};\n        // } \n        // function Student(name,age,grade,school){\n        //     Person.apply(this,arguments);\n        //     this.grade=grade;\n        //     this.school=school;\n        // } \n        console.log('Result', result);\n        return result;\n    }\n}\n\nconst additionAndLog =  logAndReturn(addition);\nconst subtractionAndLog =  logAndReturn(subtraction);\nconst multiplicationAndLog =  logAndReturn(multiplication);\nconst divisionAndLog =  logAndReturn(division);\n```\n## 高阶组件\n一个路由组件的例子：\n```html\n<Link to=\"/\" activeClassName=\"active-link\"> Home </Link>\n<Link to=\"/about\" activeClassName=\"active-link\"> About</Link>\n<Link to=\"/contact\" activeClassName=\"active-link\"> Contact</Link>\n```\n初步优化，提取相同的代码：\n```javascript\nvar AppLink=React.createClass({\n    render:function(){\n        return(\n            <Link to={this.props.to} activeClassName=\"active-link\">\n                {this.props.children}\n            </Link>;\n        );\n    }\n});\n```\n改变现在的路由组件：\n```html\n<AppLink to=\"/\">Home</AppLink>\n<AppLink to=\"/about\">About</AppLink>\n<AppLink to=\"/contact\">Contact</AppLink>\n```\n进一步优化，对props的覆盖控制：\n```javascript\n//高阶组件覆盖，强调统一\nvar AppLink=React.createClass({\n    render:function(){\n        const {children, props} = this.props;\n        return(\n            <Link {...props} activeClassName=\"active-link\">\n                {children}\n            </Link>;\n        );\n    }\n});\n\n//调用组件覆盖，强调默认值和定制化\nvar AppLink=React.createClass({\n    render:function(){\n        const {children, props} = this.props;\n        return(\n            <Link activeClassName=\"active-link\" {...props}>\n                {children}\n            </Link>;\n        );\n    }\n});\n```\n## SAAS项目的应用实例-----<AuthControl>权限控制组件\n\n```Javascript\nclass AuthControl extends React.Component {\n    render() {\n        const { roles, userRoles, deniedAuth, children } = this.props;\n\n        if (_.intersection(roles, userRoles).length === 0) {\n            if (deniedAuth !== undefined) {\n                return deniedAuth;\n            }\n            return null;\n        } else {\n            return (children);\n        }\n    }\n}\n\nAuthControl.propTypes = {\n    roles: React.PropTypes.array.isRequired,\n    userRoles: React.PropTypes.array.isRequired,\n    children: React.PropTypes.element,\n    deniedAuth: React.PropTypes.element,\n};\n\n<AuthControl\n    roles={['admin']} \n    userRoles={[‘user’]}\n    deniedAuth={<div>没有权限</div>}\n>\n    <div>有权限</div>\n</AuthControl>\n```\n## 结论\n通过将纯函数和高阶函数的函数式编程的原理应用到React，您可以创建一个更容易维护和使用的代码库。","slug":"从高阶函数到高阶组件","published":1,"updated":"2017-12-16T11:50:34.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1vu0009m6i60e3h3ho4","content":"<h2 id=\"纯函数-https-zh-wikipedia-org-wiki-纯函数\"><a href=\"#纯函数-https-zh-wikipedia-org-wiki-纯函数\" class=\"headerlink\" title=\"纯函数(https://zh.wikipedia.org/wiki/纯函数)\"></a>纯函数(<a href=\"https://zh.wikipedia.org/wiki/%E7%BA%AF%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/纯函数</a>)</h2><p>如果一个函数遵循以下几个规则那么他就是纯函数：</p>\n<ul>\n<li>函数处理的数据都是通过参数传递给函数。</li>\n<li>他不接受不确定的数据或者任何其他数据（他们通常是<a href=\"https://zh.wikipedia.org/wiki/函数副作用\" target=\"_blank\" rel=\"external\">副作用</a>的）。</li>\n<li>同样的输入，函数将得到同样的输出。</li>\n</ul>\n<p>纯函数的好处主要有几点：</p>\n<ul>\n<li>无状态。线程安全。不需要线程同步。</li>\n<li><code>纯函数相互调用组装起来的函数，还是纯函数</code>。</li>\n<li>应用程序或者运行环境（Runtime）可以对纯函数的运算结果进行缓存，运算加快速度。<a id=\"more\"></a></li>\n</ul>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//纯函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不是纯函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">badAdd</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高阶函数-https-zh-wikipedia-org-wiki-高阶函数\"><a href=\"#高阶函数-https-zh-wikipedia-org-wiki-高阶函数\" class=\"headerlink\" title=\"高阶函数(https://zh.wikipedia.org/wiki/高阶函数)\"></a>高阶函数(<a href=\"https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/高阶函数</a>)</h2><p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：</p>\n<ul>\n<li>接受一个或多个函数作为输入</li>\n<li>输出一个函数</li>\n</ul>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addition</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> X + Y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>业务发生改变需要console，addition不能修改，因为你不知道add都用在了哪里，你的修改会对现有代码参数什么样的后果。于是有了下面的结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">additionAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = addition(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于你的修改没有对现有代码产生不好的影响，所以减法、乘法、除法都要做console的添加：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subtractionAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = subtraction(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiplicationAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = multiplication(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divisionAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = division(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于你的修改没有对现有代码产生不好的影响，所以n个函数都要做console的添加！！！<br>改变思路：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logAndReturn</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        <span class=\"comment\">// arguments是个类数组 &#123;0:42, 1:52, 2:63, length:3&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// Array的实例的slice给arguments使用</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = func.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">        <span class=\"comment\">// Function.apply(obj,args)能接受两个参数：</span></span><br><span class=\"line\">        <span class=\"comment\">// obj: 这个对象将代替Function类中的this对象</span></span><br><span class=\"line\">        <span class=\"comment\">// args： 这是个数组，它将作为参数传递给Function类</span></span><br><span class=\"line\">        <span class=\"comment\">// function Person(name,age)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.name=name;</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.age=age;</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.sayhello=function()&#123;alert(\"hello\")//&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125; </span></span><br><span class=\"line\">        <span class=\"comment\">// function Student(name,age,grade,school)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     Person.apply(this,arguments);</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.grade=grade;</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.school=school;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125; </span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> additionAndLog =  logAndReturn(addition);</span><br><span class=\"line\"><span class=\"keyword\">const</span> subtractionAndLog =  logAndReturn(subtraction);</span><br><span class=\"line\"><span class=\"keyword\">const</span> multiplicationAndLog =  logAndReturn(multiplication);</span><br><span class=\"line\"><span class=\"keyword\">const</span> divisionAndLog =  logAndReturn(division);</span><br></pre></td></tr></table></figure>\n<h2 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h2><p>一个路由组件的例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> Home <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/contact\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> Contact<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>初步优化，提取相同的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> AppLink=React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#123;this.props.to&#125;</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span></span><br><span class=\"line\">                &#123;this.props.children&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>改变现在的路由组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>进一步优化，对props的覆盖控制：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//高阶组件覆盖，强调统一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> AppLink=React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;children, props&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span></span><br><span class=\"line\">                &#123;children&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用组件覆盖，强调默认值和定制化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> AppLink=React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;children, props&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span></span><br><span class=\"line\">                &#123;children&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"SAAS项目的应用实例—–权限控制组件\"><a href=\"#SAAS项目的应用实例—–权限控制组件\" class=\"headerlink\" title=\"SAAS项目的应用实例—–权限控制组件\"></a>SAAS项目的应用实例—–<authcontrol>权限控制组件</authcontrol></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthControl</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; roles, userRoles, deniedAuth, children &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_.intersection(roles, userRoles).length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deniedAuth !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> deniedAuth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (children);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AuthControl.propTypes = &#123;</span><br><span class=\"line\">    <span class=\"attr\">roles</span>: React.PropTypes.array.isRequired,</span><br><span class=\"line\">    <span class=\"attr\">userRoles</span>: React.PropTypes.array.isRequired,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: React.PropTypes.element,</span><br><span class=\"line\">    <span class=\"attr\">deniedAuth</span>: React.PropTypes.element,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">AuthControl</span></span><br><span class=\"line\">    <span class=\"attr\">roles</span>=<span class=\"string\">&#123;[</span>'<span class=\"attr\">admin</span>']&#125; </span><br><span class=\"line\">    <span class=\"attr\">userRoles</span>=<span class=\"string\">&#123;[‘user’]&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">deniedAuth</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">div</span>&gt;</span>没有权限<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>有权限<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">AuthControl</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>通过将纯函数和高阶函数的函数式编程的原理应用到React，您可以创建一个更容易维护和使用的代码库。</p>\n","excerpt":"<h2 id=\"纯函数-https-zh-wikipedia-org-wiki-纯函数\"><a href=\"#纯函数-https-zh-wikipedia-org-wiki-纯函数\" class=\"headerlink\" title=\"纯函数(https://zh.wikipedia.org/wiki/纯函数)\"></a>纯函数(<a href=\"https://zh.wikipedia.org/wiki/%E7%BA%AF%E5%87%BD%E6%95%B0\">https://zh.wikipedia.org/wiki/纯函数</a>)</h2><p>如果一个函数遵循以下几个规则那么他就是纯函数：</p>\n<ul>\n<li>函数处理的数据都是通过参数传递给函数。</li>\n<li>他不接受不确定的数据或者任何其他数据（他们通常是<a href=\"https://zh.wikipedia.org/wiki/函数副作用\">副作用</a>的）。</li>\n<li>同样的输入，函数将得到同样的输出。</li>\n</ul>\n<p>纯函数的好处主要有几点：</p>\n<ul>\n<li>无状态。线程安全。不需要线程同步。</li>\n<li><code>纯函数相互调用组装起来的函数，还是纯函数</code>。</li>\n<li>应用程序或者运行环境（Runtime）可以对纯函数的运算结果进行缓存，运算加快速度。","more":"</li>\n</ul>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//纯函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不是纯函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">badAdd</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高阶函数-https-zh-wikipedia-org-wiki-高阶函数\"><a href=\"#高阶函数-https-zh-wikipedia-org-wiki-高阶函数\" class=\"headerlink\" title=\"高阶函数(https://zh.wikipedia.org/wiki/高阶函数)\"></a>高阶函数(<a href=\"https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\">https://zh.wikipedia.org/wiki/高阶函数</a>)</h2><p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：</p>\n<ul>\n<li>接受一个或多个函数作为输入</li>\n<li>输出一个函数</li>\n</ul>\n<p>例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addition</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> X + Y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>业务发生改变需要console，addition不能修改，因为你不知道add都用在了哪里，你的修改会对现有代码参数什么样的后果。于是有了下面的结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">additionAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = addition(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于你的修改没有对现有代码产生不好的影响，所以减法、乘法、除法都要做console的添加：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subtractionAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = subtraction(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiplicationAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = multiplication(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divisionAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = division(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于你的修改没有对现有代码产生不好的影响，所以n个函数都要做console的添加！！！<br>改变思路：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logAndReturn</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        <span class=\"comment\">// arguments是个类数组 &#123;0:42, 1:52, 2:63, length:3&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// Array的实例的slice给arguments使用</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = func.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">        <span class=\"comment\">// Function.apply(obj,args)能接受两个参数：</span></span><br><span class=\"line\">        <span class=\"comment\">// obj: 这个对象将代替Function类中的this对象</span></span><br><span class=\"line\">        <span class=\"comment\">// args： 这是个数组，它将作为参数传递给Function类</span></span><br><span class=\"line\">        <span class=\"comment\">// function Person(name,age)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.name=name;</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.age=age;</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.sayhello=function()&#123;alert(\"hello\")//&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125; </span></span><br><span class=\"line\">        <span class=\"comment\">// function Student(name,age,grade,school)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     Person.apply(this,arguments);</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.grade=grade;</span></span><br><span class=\"line\">        <span class=\"comment\">//     this.school=school;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125; </span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> additionAndLog =  logAndReturn(addition);</span><br><span class=\"line\"><span class=\"keyword\">const</span> subtractionAndLog =  logAndReturn(subtraction);</span><br><span class=\"line\"><span class=\"keyword\">const</span> multiplicationAndLog =  logAndReturn(multiplication);</span><br><span class=\"line\"><span class=\"keyword\">const</span> divisionAndLog =  logAndReturn(division);</span><br></pre></td></tr></table></figure>\n<h2 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h2><p>一个路由组件的例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> Home <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/contact\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> Contact<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>初步优化，提取相同的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> AppLink=React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#123;this.props.to&#125;</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span></span><br><span class=\"line\">                &#123;this.props.children&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>改变现在的路由组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>进一步优化，对props的覆盖控制：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//高阶组件覆盖，强调统一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> AppLink=React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;children, props&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span></span><br><span class=\"line\">                &#123;children&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用组件覆盖，强调默认值和定制化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> AppLink=React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;children, props&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span></span><br><span class=\"line\">                &#123;children&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"SAAS项目的应用实例—–权限控制组件\"><a href=\"#SAAS项目的应用实例—–权限控制组件\" class=\"headerlink\" title=\"SAAS项目的应用实例—–权限控制组件\"></a>SAAS项目的应用实例—–<AuthControl>权限控制组件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthControl</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; roles, userRoles, deniedAuth, children &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_.intersection(roles, userRoles).length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deniedAuth !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> deniedAuth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (children);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AuthControl.propTypes = &#123;</span><br><span class=\"line\">    <span class=\"attr\">roles</span>: React.PropTypes.array.isRequired,</span><br><span class=\"line\">    <span class=\"attr\">userRoles</span>: React.PropTypes.array.isRequired,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: React.PropTypes.element,</span><br><span class=\"line\">    <span class=\"attr\">deniedAuth</span>: React.PropTypes.element,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">AuthControl</span></span><br><span class=\"line\">    <span class=\"attr\">roles</span>=<span class=\"string\">&#123;[</span>'<span class=\"attr\">admin</span>']&#125; </span><br><span class=\"line\">    <span class=\"attr\">userRoles</span>=<span class=\"string\">&#123;[‘user’]&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">deniedAuth</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">div</span>&gt;</span>没有权限<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>有权限<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">AuthControl</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>通过将纯函数和高阶函数的函数式编程的原理应用到React，您可以创建一个更容易维护和使用的代码库。</p>"},{"title":"使您的JavaScript纯净","date":"2017-11-11T03:06:59.000Z","_content":"\nOnce your website or application goes past a small number of lines, it will inevitably contain bugs of some sort.\n\n一旦您的网站或应用程序达到一定的代码量，它将不可避免地包含某些类型的错误。\n\nThis isn’t specific to JavaScript but is shared by nearly all languages—it’s very tricky, if not impossible, to thoroughly rule out the chance of any bugs in your application.\n\n这不是JavaScript特有的，而是几乎所有的程序语言都面临这个问题 - 这个问题非常棘手，是不是有可能，彻底的排除掉你的程序中出现任何错误的机会。\n\nHowever, that doesn’t mean we can’t take precautions by coding in a way that lessens our vulnerability to bugs.\n\n然而，这并不意味着我们不能通过编码以某种方式采取预防措施，使我们在bugs面前不显得那么脆弱。<!--more-->\n\n## __Pure and impure functions__\n## __纯和不纯的函数__\n\nA pure function is defined as one that doesn’t depend on or modify variables outside of its scope. That’s a bit of a mouthful, so let’s dive into some code for a more practical example.\n\n纯函数定义为不依赖于或修改其范围之外的变量的函数。但看这个定义等于什么也没说，所以让我们来看看一些更实际的例子。\n\n```javascript\nfunction mouseOnLeftSide(mouseX){\n    return mouseX < window.innerWidth / 2;\n}\n\ndocument.onmousemove =function(e) {\n    console.log(mouseOnLeftSide(e.pageX));\n};\n```\n\n`mouseOnLeftSide()` takes an X coordinate and checks to see if it’s less than half the window width—which would place it on the left side. However, `mouseOnLeftSide()` is not a pure function. We know this because within the body of the function, it refers to a value that it wasn’t explicitly given:\n\n`mouseOnLeftSide()`采取X坐标并检查是否小于窗口宽度的一半----以便将其放在左侧。但是，`mouseOnLeftSide()`不是纯函数。我们知道这一点，因为在函数体内，参考值不是一个确定值：\n\n```javascript\nreturn mouseX < window.innerWidth / 2;\n```\n\nThe function is given `mouseX`, but not `window.innerWidth`. This means the function is reaching out to access data it wasn’t given, and hence it’s not pure.\n\n该函数给出了 `mouseX`，但是 `window.innerWidth` 却不明确。这意味着该函数正在访问不确定的数据，因此它是不纯的。\n\n## __The problem with impure functions__\n## __不纯的函数是个问题__\n\nYou might ask why this is an issue—this piece of code works just fine and does the job expected of it. Imagine that you get a bug report from a user that when the window is less than 500 pixels wide the function is incorrect. How do you test this? You’ve got two options:\n\n你也许会问这怎么就是个问题了，代码不就是找到并且做他要做的事就可以了么。你想象一下，当你从某个用户那里得知当窗口小于500像素的时候功能就不正常了。你怎么测试代码？您已经有两个选项：\n\n1.You could manually test by loading up your browser and moving your mouse around until you’ve found the problem.\n\n1.您可以手动测试，通过浏览器加载你的程序，并且移动鼠标。直到你发现的问题。\n\n2.You could write some unit tests (Rebecca Murphey’s Writing Testable JavaScript is a great introduction) to not only track down the bug, but also ensure that it doesn’t happen again.\n\n2.你可以写一些单元测试（Rebecca Murphey写的 可测试性的JavaScript 是一个很好的介绍）不仅跟踪的错误，也确保错误不再发生。\n\nYou could write some unit tests (Rebecca Murphey’s Writing `Testable JavaScript` is a great introduction) to not only track down the bug, but also ensure that it doesn’t happen again.\n\n你可以写一些单元测试（Rebecca Murphey写的 `可测试性的JavaScript` 是一个很好的介绍）不仅跟踪的错误，也确保错误不再发生。\n\nKeen to have a test in place to avoid this bug recurring, we pick the second option and get writing. Now we face a new problem, though: how do we set up our test correctly? We know we need to set up our test with the window width set to less than 500 pixels, but how? The function relies on `window.innerWidth`, and making sure that’s at a particular value is going to be a pain.\n\n热衷有一个测试中的地方，以避免此错误重复，我们选择第二个选项，现在就去写写。现在我们面对了新的问题，虽然：我们怎么才能确保我们的测试是正确的？我们知道这个测试需要一个窗口，而且窗口的宽度要小于500像素。但是怎么做呢？那个函数依赖 `window.innerWidth`，确保他是一个特定的值将会很头疼的。\n\n## __Benefits of pure functions__\n## __纯函数的好处__\n\n#### __SIMPLER TESTING__\n#### __简单的测试__\n\nWith that issue of how to test in mind, imagine we’d instead written the code like so:\n\n记住怎么去测试这个问题，想象一下我们并没有编写下面那样的代码：\n\n```javascript\nfunction mouseOnLeftSide(mouseX, windowWidth) {\n    return mouseX < windowWidth / 2;\n}\n\ndocument.onmousemove = function(e) {\n    console.log(mouseOnLeftSide(e.pageX, window.innerWidth));\n};\n```\n\nThe key difference here is that `mouseOnLeftSide()` now takes two arguments: the mouse X position and the window width. This means that `mouseOnLeftSide()` is now a pure function; all the data it needs it is explicitly given as inputs and it never has to reach out to access any data.\n\n关键不同点 `mouseOnLeftSide()` 函数有两个参数：鼠标X轴的坐标和窗口的宽度。这就表示 `mouseOnLeftSide()` 现在是个纯函数；函数需要的全部数据都能够通过输入明确给出并且没有引入外部的任何数据。\n\nIn terms of functionality, it’s identical to our previous example, but we’ve dramatically improved its maintainability and testability. Now we don’t have to hack around to fake `window.innerWidth` for any tests, but instead just call `mouseOnLeftSide()` with the exact arguments we need:\n\n在功能方面，就和前面的事例展示给我们的一样，但是我们的改善显著的提高了可维护性和可测试性。现在我们不需要为那个 `window.innerWidth` 进行测试，我们只需要调用有明确参数的 `mouseOnLeftSide()`：\n\n```javascript\nmouseOnLeftSide(5, 499) // 确保它的工作原理并且宽度小于500\n```\n\n#### __SELF-DOCUMENTING__\n#### __自记录__\n\nBesides being easier to test, pure functions have other characteristics that make them worth using whenever possible. By their very nature, pure functions are self-documenting. If you know that a function doesn’t reach out of its scope to get data, you know the only data it can possibly touch is passed in as arguments. Consider the following function definition:\n\n除了被更容易测试，纯函数有其他特性使他们值得使用尽可能。因为他们很自然，所以纯函数是自记录。如果函数没有使用自身作用域外的数据，那你可以明确的知道唯一的数据来源是传参。请考虑以下函数定义：\n\n```javascript\nfunction mouseOnLeftSide(mouseX, windowWidth)\n```\n\nYou know that this function deals with two pieces of data, and if the arguments are well named it should be clear what they are. We all have to deal with the pain of revisiting code that’s lain untouched for six months, and being able to regain familiarity with it quickly is a key skill.\n\n你知道这个函数有两个命名明确的数据。我们将在未来大半年的时间里会重温这些代码，能够快速的熟悉他们是个关键技能。\n\n#### __AVOIDING GLOBALS IN FUNCTIONS__\n#### __避免全局函数__\n\nThe problem of global variables is well documented in JavaScript—the language makes it trivial to store data globally where all functions can access it. This is a common source of bugs, too, because anything could have changed the value of a global variable, and hence the function could now behave differently.\n\n在JavaScript中全局变量是很好记录的。语言的特点使得他琐碎的仓储着全局数据，这样所有的函数都可以访问他。这是一切错误的根源，因为任何地方都可以改变全局变量的值，因此函数可能表现出不同的行为。\n\nAn additional property of pure functions is referential transparency. This is a rather complex term with a simple meaning: given the same inputs, the output is always the same. Going back to `mouseOnLeftSide`, let’s look at the first definition we had:\n\n一个额外的属性的引用对于纯函数来说是透明的。这个术语相当复杂，简而言之：给相同的参数，总是会有相同的结果。回去看看 `mouseOnLeftSide` 函数，第一次我们是怎么定义他的：\n\n```javascript\nfunction mouseOnLeftSide(mouseX) {\n    return mouseX < window.innerWidth / 2;\n}\n```\n\nThis function is not referentially transparent. I could call it with the input 5 multiple times, resize the window between calls, and the result would be different every time. This is a slightly contrived example, but functions that return different values even when their inputs are the same are always harder to work with. Reasoning about them is harder because you can’t guarantee their behavior. For the same reason, testing is trickier, because you don’t have full control over the data the function needs.\n\n这个函数是不透明的。无论我调试多少次，每当窗口大小发生变化，函数都会输出不同的结果。这还是一个简单的例子，但是输入相同值却返回不同值的函数总是难以使用的。理解他们更难，因为你不能保证他们的行为。同样的原因，测试很变得棘手，因为你没有完全控制功能需要的数据。\n\nOn the other hand, our improved mouseOnLeftSide function is referentially transparent because all its data comes from inputs and it never reaches outside itself:\n\n另一方面，我们改进的 `mouseOnLeftSide` 函数使其透明，因为它的所有数据都来自于参数，并且它永远不会调用函数外部数据：\n\n```javascript\nfunction mouseOnLeftSide(mouseX, windowWidth) {\n    return mouseX < windowWidth / 2;\n}\n```\n\nYou get referential transparency for free when following the rule of declaring all your data as inputs, and by doing this you eliminate an entire class of bugs around side effects and functions acting unexpectedly. If you have full control over the data, you can hunt down and replicate bugs much more quickly and reliably without chancing the lottery of global variables that could interfere.\n\n遵循将所有数据都由参数声明的规则，你可以很容易获得清晰的参考，这样做可以消除由于副作用函数带来的出人意料的错误。如果你完全控制数据，你可以更快速，更可靠地追踪和复制错误，而无需更改可能会干扰的全局变量。\n\n## __Choosing which functions to make pure__\n## __哪些函数要变为纯函数__\n\nIt’s impossible to have pure functions consistently—there will always be a time when you need to reach out and fetch data, the most common example of which is reaching into the DOM to grab a specific element to interact with. It’s a fact of JavaScript that you’ll have to do this, and you shouldn’t feel bad about reaching outside of your function. Instead, carefully consider if there is a way to structure your code so that impure functions can be isolated. Prevent them from having broad effects throughout your codebase, and try to use pure functions whenever appropriate.\n\n不可能总是使用纯函数的––毕竟需要一个函数来实现获取外部数据，其最常见的例子是DOM特定元素的获取和元素之进行交互。这是JavaScript的一个事实，你必须这样做，你的函数获取外部数据也不要感到不好。相反，请仔细考虑是否有办法构建你的代码，以使不纯的函数被隔离。防止它们在整个代码库中产生广泛的影响，并尽可能适当地使用纯函数。\n\nLet’s take a look at the code below, which grabs an element from the DOM and changes its background color to red:\n\n让我们看看下面的代码，从DOMA中获取一个元素并且把他的背景色改为红色：\n\n```javascript\nfunction changeElementToRed() {\n    var foo = document.getElementById('foo');\n    foo.style.backgroundColor = \"red\";\n}\nchangeElementToRed();\n```\n\nThere are two problems with this piece of code, both solvable by transitioning to a pure function:\n\n这行代码中有两个问题，都可以通过转换为纯函数来解决：\n\nThis function is not reusable at all; it’s directly tied to a specific DOM element. If we wanted to reuse it to change a different element, we couldn’t.\n\n这个函数根本不可复用；它直接绑定到一个特定的DOM元素。如果我们想复用它来改变一个不同的元素，那就不可以了。\n\nThis function is hard to test because it’s not pure. To test it, we would have to create an element with a specific ID rather than any generic element.\n\n这也不是个纯函数所以很难测试，要测试他，我们必须创建一个有特定id的元素而不是一个通用元素。\n\nGiven the two points above, I would rewrite this function to:\n\n就上面讲到的两点，我们需要重写函数：\n\n```javascript\nfunction changeElementToRed(elem) {\n    elem.style.backgroundColor = \"red\";\n}\n\nfunction changeFooToRed() {\n    var foo = document.getElementById('foo');\n    changeElementToRed(foo);\n}\n\nchangeFooToRed();\n```\n\nWe’ve now changed `changeelementtored()` to not be tied to a specific DOM element and to be more generic. At the same time, we’ve made it pure, bringing us all the benefits discussed previously.\n\n我们现在重写了 `changeelementtored()`，他不被捆绑到一个特定的DOM元素变得更通用。这样做，我们使他变得更纯粹，并且都来了我们先前所讨论的好处。\n\nIt’s important to note, though, that I’ve still got some impure code `changeFooToRed()` is impure. You can never avoid this, but it’s about spotting opportunities where turning a function pure would increase its readability, reusability, and testability. By keeping the places where you’re impure to a minimum and creating as many pure, reusable functions as you can, you’ll save yourself a huge amount of pain in the future and write better code.\n\n注意！我们的代码中还有不纯粹的地方，比如 `changeFooToRed()`，就是不纯粹的。在项目中不纯粹的代码是不可避免的，但是我们要尽可能的把他们变得纯粹，因为这样可以提高代码的可读性，可重用性和可测试性。把不纯粹的代码保持在最低限度，并尽可能多的创建可复用的纯粹函数可，您将在以后为自己减少痛苦，并可以编写出更好的代码。\n\n## __Conclusion__\n## __结论__\n\n“Pure functions,” “side effects,” and “referential transparency” are terms usually associated with purely functional languages, but that doesn’t mean we can’t take the principles and apply them to our JavaScript, too. By being mindful of these principles and applying them wisely when your code could benefit from them you’ll gain more reliable, self-documenting codebases that are easier to work with and that break less often. I encourage you to keep this in mind next time you’re writing new code, or even revisiting some existing code. It will take some time to get used to these ideas, but soon you’ll find yourself applying them without even thinking about it. Your fellow developers and your future self will thank you.\n\n“纯函数”，“副作用”和“参照透明度”通常与纯函数式语言相关联，但这并不意味着我们不能将这些原则应用到JavaScript中。通过注意这些原则并合理地应用它们，当你的的代码从中受益时，你将获得更多的可靠性。我鼓励你在下一次写新的代码时参考这些原则，甚至重新审视一些现有的代码。当然习惯这些想法需要一些时间，但很快你会发现自己抛弃原来的顾虑应用它们。你的同事和未来的你会为此感谢你。","source":"_posts/使您的JavaScript纯净.md","raw":"---\ntitle: 使您的JavaScript纯净\ndate: 2017-11-11 11:06:59\ntags: ['pure funtion','纯函数','前端','js','javascript','side effects','副作用']\ncategory: 'coding'\n---\n\nOnce your website or application goes past a small number of lines, it will inevitably contain bugs of some sort.\n\n一旦您的网站或应用程序达到一定的代码量，它将不可避免地包含某些类型的错误。\n\nThis isn’t specific to JavaScript but is shared by nearly all languages—it’s very tricky, if not impossible, to thoroughly rule out the chance of any bugs in your application.\n\n这不是JavaScript特有的，而是几乎所有的程序语言都面临这个问题 - 这个问题非常棘手，是不是有可能，彻底的排除掉你的程序中出现任何错误的机会。\n\nHowever, that doesn’t mean we can’t take precautions by coding in a way that lessens our vulnerability to bugs.\n\n然而，这并不意味着我们不能通过编码以某种方式采取预防措施，使我们在bugs面前不显得那么脆弱。<!--more-->\n\n## __Pure and impure functions__\n## __纯和不纯的函数__\n\nA pure function is defined as one that doesn’t depend on or modify variables outside of its scope. That’s a bit of a mouthful, so let’s dive into some code for a more practical example.\n\n纯函数定义为不依赖于或修改其范围之外的变量的函数。但看这个定义等于什么也没说，所以让我们来看看一些更实际的例子。\n\n```javascript\nfunction mouseOnLeftSide(mouseX){\n    return mouseX < window.innerWidth / 2;\n}\n\ndocument.onmousemove =function(e) {\n    console.log(mouseOnLeftSide(e.pageX));\n};\n```\n\n`mouseOnLeftSide()` takes an X coordinate and checks to see if it’s less than half the window width—which would place it on the left side. However, `mouseOnLeftSide()` is not a pure function. We know this because within the body of the function, it refers to a value that it wasn’t explicitly given:\n\n`mouseOnLeftSide()`采取X坐标并检查是否小于窗口宽度的一半----以便将其放在左侧。但是，`mouseOnLeftSide()`不是纯函数。我们知道这一点，因为在函数体内，参考值不是一个确定值：\n\n```javascript\nreturn mouseX < window.innerWidth / 2;\n```\n\nThe function is given `mouseX`, but not `window.innerWidth`. This means the function is reaching out to access data it wasn’t given, and hence it’s not pure.\n\n该函数给出了 `mouseX`，但是 `window.innerWidth` 却不明确。这意味着该函数正在访问不确定的数据，因此它是不纯的。\n\n## __The problem with impure functions__\n## __不纯的函数是个问题__\n\nYou might ask why this is an issue—this piece of code works just fine and does the job expected of it. Imagine that you get a bug report from a user that when the window is less than 500 pixels wide the function is incorrect. How do you test this? You’ve got two options:\n\n你也许会问这怎么就是个问题了，代码不就是找到并且做他要做的事就可以了么。你想象一下，当你从某个用户那里得知当窗口小于500像素的时候功能就不正常了。你怎么测试代码？您已经有两个选项：\n\n1.You could manually test by loading up your browser and moving your mouse around until you’ve found the problem.\n\n1.您可以手动测试，通过浏览器加载你的程序，并且移动鼠标。直到你发现的问题。\n\n2.You could write some unit tests (Rebecca Murphey’s Writing Testable JavaScript is a great introduction) to not only track down the bug, but also ensure that it doesn’t happen again.\n\n2.你可以写一些单元测试（Rebecca Murphey写的 可测试性的JavaScript 是一个很好的介绍）不仅跟踪的错误，也确保错误不再发生。\n\nYou could write some unit tests (Rebecca Murphey’s Writing `Testable JavaScript` is a great introduction) to not only track down the bug, but also ensure that it doesn’t happen again.\n\n你可以写一些单元测试（Rebecca Murphey写的 `可测试性的JavaScript` 是一个很好的介绍）不仅跟踪的错误，也确保错误不再发生。\n\nKeen to have a test in place to avoid this bug recurring, we pick the second option and get writing. Now we face a new problem, though: how do we set up our test correctly? We know we need to set up our test with the window width set to less than 500 pixels, but how? The function relies on `window.innerWidth`, and making sure that’s at a particular value is going to be a pain.\n\n热衷有一个测试中的地方，以避免此错误重复，我们选择第二个选项，现在就去写写。现在我们面对了新的问题，虽然：我们怎么才能确保我们的测试是正确的？我们知道这个测试需要一个窗口，而且窗口的宽度要小于500像素。但是怎么做呢？那个函数依赖 `window.innerWidth`，确保他是一个特定的值将会很头疼的。\n\n## __Benefits of pure functions__\n## __纯函数的好处__\n\n#### __SIMPLER TESTING__\n#### __简单的测试__\n\nWith that issue of how to test in mind, imagine we’d instead written the code like so:\n\n记住怎么去测试这个问题，想象一下我们并没有编写下面那样的代码：\n\n```javascript\nfunction mouseOnLeftSide(mouseX, windowWidth) {\n    return mouseX < windowWidth / 2;\n}\n\ndocument.onmousemove = function(e) {\n    console.log(mouseOnLeftSide(e.pageX, window.innerWidth));\n};\n```\n\nThe key difference here is that `mouseOnLeftSide()` now takes two arguments: the mouse X position and the window width. This means that `mouseOnLeftSide()` is now a pure function; all the data it needs it is explicitly given as inputs and it never has to reach out to access any data.\n\n关键不同点 `mouseOnLeftSide()` 函数有两个参数：鼠标X轴的坐标和窗口的宽度。这就表示 `mouseOnLeftSide()` 现在是个纯函数；函数需要的全部数据都能够通过输入明确给出并且没有引入外部的任何数据。\n\nIn terms of functionality, it’s identical to our previous example, but we’ve dramatically improved its maintainability and testability. Now we don’t have to hack around to fake `window.innerWidth` for any tests, but instead just call `mouseOnLeftSide()` with the exact arguments we need:\n\n在功能方面，就和前面的事例展示给我们的一样，但是我们的改善显著的提高了可维护性和可测试性。现在我们不需要为那个 `window.innerWidth` 进行测试，我们只需要调用有明确参数的 `mouseOnLeftSide()`：\n\n```javascript\nmouseOnLeftSide(5, 499) // 确保它的工作原理并且宽度小于500\n```\n\n#### __SELF-DOCUMENTING__\n#### __自记录__\n\nBesides being easier to test, pure functions have other characteristics that make them worth using whenever possible. By their very nature, pure functions are self-documenting. If you know that a function doesn’t reach out of its scope to get data, you know the only data it can possibly touch is passed in as arguments. Consider the following function definition:\n\n除了被更容易测试，纯函数有其他特性使他们值得使用尽可能。因为他们很自然，所以纯函数是自记录。如果函数没有使用自身作用域外的数据，那你可以明确的知道唯一的数据来源是传参。请考虑以下函数定义：\n\n```javascript\nfunction mouseOnLeftSide(mouseX, windowWidth)\n```\n\nYou know that this function deals with two pieces of data, and if the arguments are well named it should be clear what they are. We all have to deal with the pain of revisiting code that’s lain untouched for six months, and being able to regain familiarity with it quickly is a key skill.\n\n你知道这个函数有两个命名明确的数据。我们将在未来大半年的时间里会重温这些代码，能够快速的熟悉他们是个关键技能。\n\n#### __AVOIDING GLOBALS IN FUNCTIONS__\n#### __避免全局函数__\n\nThe problem of global variables is well documented in JavaScript—the language makes it trivial to store data globally where all functions can access it. This is a common source of bugs, too, because anything could have changed the value of a global variable, and hence the function could now behave differently.\n\n在JavaScript中全局变量是很好记录的。语言的特点使得他琐碎的仓储着全局数据，这样所有的函数都可以访问他。这是一切错误的根源，因为任何地方都可以改变全局变量的值，因此函数可能表现出不同的行为。\n\nAn additional property of pure functions is referential transparency. This is a rather complex term with a simple meaning: given the same inputs, the output is always the same. Going back to `mouseOnLeftSide`, let’s look at the first definition we had:\n\n一个额外的属性的引用对于纯函数来说是透明的。这个术语相当复杂，简而言之：给相同的参数，总是会有相同的结果。回去看看 `mouseOnLeftSide` 函数，第一次我们是怎么定义他的：\n\n```javascript\nfunction mouseOnLeftSide(mouseX) {\n    return mouseX < window.innerWidth / 2;\n}\n```\n\nThis function is not referentially transparent. I could call it with the input 5 multiple times, resize the window between calls, and the result would be different every time. This is a slightly contrived example, but functions that return different values even when their inputs are the same are always harder to work with. Reasoning about them is harder because you can’t guarantee their behavior. For the same reason, testing is trickier, because you don’t have full control over the data the function needs.\n\n这个函数是不透明的。无论我调试多少次，每当窗口大小发生变化，函数都会输出不同的结果。这还是一个简单的例子，但是输入相同值却返回不同值的函数总是难以使用的。理解他们更难，因为你不能保证他们的行为。同样的原因，测试很变得棘手，因为你没有完全控制功能需要的数据。\n\nOn the other hand, our improved mouseOnLeftSide function is referentially transparent because all its data comes from inputs and it never reaches outside itself:\n\n另一方面，我们改进的 `mouseOnLeftSide` 函数使其透明，因为它的所有数据都来自于参数，并且它永远不会调用函数外部数据：\n\n```javascript\nfunction mouseOnLeftSide(mouseX, windowWidth) {\n    return mouseX < windowWidth / 2;\n}\n```\n\nYou get referential transparency for free when following the rule of declaring all your data as inputs, and by doing this you eliminate an entire class of bugs around side effects and functions acting unexpectedly. If you have full control over the data, you can hunt down and replicate bugs much more quickly and reliably without chancing the lottery of global variables that could interfere.\n\n遵循将所有数据都由参数声明的规则，你可以很容易获得清晰的参考，这样做可以消除由于副作用函数带来的出人意料的错误。如果你完全控制数据，你可以更快速，更可靠地追踪和复制错误，而无需更改可能会干扰的全局变量。\n\n## __Choosing which functions to make pure__\n## __哪些函数要变为纯函数__\n\nIt’s impossible to have pure functions consistently—there will always be a time when you need to reach out and fetch data, the most common example of which is reaching into the DOM to grab a specific element to interact with. It’s a fact of JavaScript that you’ll have to do this, and you shouldn’t feel bad about reaching outside of your function. Instead, carefully consider if there is a way to structure your code so that impure functions can be isolated. Prevent them from having broad effects throughout your codebase, and try to use pure functions whenever appropriate.\n\n不可能总是使用纯函数的––毕竟需要一个函数来实现获取外部数据，其最常见的例子是DOM特定元素的获取和元素之进行交互。这是JavaScript的一个事实，你必须这样做，你的函数获取外部数据也不要感到不好。相反，请仔细考虑是否有办法构建你的代码，以使不纯的函数被隔离。防止它们在整个代码库中产生广泛的影响，并尽可能适当地使用纯函数。\n\nLet’s take a look at the code below, which grabs an element from the DOM and changes its background color to red:\n\n让我们看看下面的代码，从DOMA中获取一个元素并且把他的背景色改为红色：\n\n```javascript\nfunction changeElementToRed() {\n    var foo = document.getElementById('foo');\n    foo.style.backgroundColor = \"red\";\n}\nchangeElementToRed();\n```\n\nThere are two problems with this piece of code, both solvable by transitioning to a pure function:\n\n这行代码中有两个问题，都可以通过转换为纯函数来解决：\n\nThis function is not reusable at all; it’s directly tied to a specific DOM element. If we wanted to reuse it to change a different element, we couldn’t.\n\n这个函数根本不可复用；它直接绑定到一个特定的DOM元素。如果我们想复用它来改变一个不同的元素，那就不可以了。\n\nThis function is hard to test because it’s not pure. To test it, we would have to create an element with a specific ID rather than any generic element.\n\n这也不是个纯函数所以很难测试，要测试他，我们必须创建一个有特定id的元素而不是一个通用元素。\n\nGiven the two points above, I would rewrite this function to:\n\n就上面讲到的两点，我们需要重写函数：\n\n```javascript\nfunction changeElementToRed(elem) {\n    elem.style.backgroundColor = \"red\";\n}\n\nfunction changeFooToRed() {\n    var foo = document.getElementById('foo');\n    changeElementToRed(foo);\n}\n\nchangeFooToRed();\n```\n\nWe’ve now changed `changeelementtored()` to not be tied to a specific DOM element and to be more generic. At the same time, we’ve made it pure, bringing us all the benefits discussed previously.\n\n我们现在重写了 `changeelementtored()`，他不被捆绑到一个特定的DOM元素变得更通用。这样做，我们使他变得更纯粹，并且都来了我们先前所讨论的好处。\n\nIt’s important to note, though, that I’ve still got some impure code `changeFooToRed()` is impure. You can never avoid this, but it’s about spotting opportunities where turning a function pure would increase its readability, reusability, and testability. By keeping the places where you’re impure to a minimum and creating as many pure, reusable functions as you can, you’ll save yourself a huge amount of pain in the future and write better code.\n\n注意！我们的代码中还有不纯粹的地方，比如 `changeFooToRed()`，就是不纯粹的。在项目中不纯粹的代码是不可避免的，但是我们要尽可能的把他们变得纯粹，因为这样可以提高代码的可读性，可重用性和可测试性。把不纯粹的代码保持在最低限度，并尽可能多的创建可复用的纯粹函数可，您将在以后为自己减少痛苦，并可以编写出更好的代码。\n\n## __Conclusion__\n## __结论__\n\n“Pure functions,” “side effects,” and “referential transparency” are terms usually associated with purely functional languages, but that doesn’t mean we can’t take the principles and apply them to our JavaScript, too. By being mindful of these principles and applying them wisely when your code could benefit from them you’ll gain more reliable, self-documenting codebases that are easier to work with and that break less often. I encourage you to keep this in mind next time you’re writing new code, or even revisiting some existing code. It will take some time to get used to these ideas, but soon you’ll find yourself applying them without even thinking about it. Your fellow developers and your future self will thank you.\n\n“纯函数”，“副作用”和“参照透明度”通常与纯函数式语言相关联，但这并不意味着我们不能将这些原则应用到JavaScript中。通过注意这些原则并合理地应用它们，当你的的代码从中受益时，你将获得更多的可靠性。我鼓励你在下一次写新的代码时参考这些原则，甚至重新审视一些现有的代码。当然习惯这些想法需要一些时间，但很快你会发现自己抛弃原来的顾虑应用它们。你的同事和未来的你会为此感谢你。","slug":"使您的JavaScript纯净","published":1,"updated":"2017-12-16T11:50:34.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1vw000bm6i6fj787y9s","content":"<p>Once your website or application goes past a small number of lines, it will inevitably contain bugs of some sort.</p>\n<p>一旦您的网站或应用程序达到一定的代码量，它将不可避免地包含某些类型的错误。</p>\n<p>This isn’t specific to JavaScript but is shared by nearly all languages—it’s very tricky, if not impossible, to thoroughly rule out the chance of any bugs in your application.</p>\n<p>这不是JavaScript特有的，而是几乎所有的程序语言都面临这个问题 - 这个问题非常棘手，是不是有可能，彻底的排除掉你的程序中出现任何错误的机会。</p>\n<p>However, that doesn’t mean we can’t take precautions by coding in a way that lessens our vulnerability to bugs.</p>\n<p>然而，这并不意味着我们不能通过编码以某种方式采取预防措施，使我们在bugs面前不显得那么脆弱。<a id=\"more\"></a></p>\n<h2 id=\"Pure-and-impure-functions\"><a href=\"#Pure-and-impure-functions\" class=\"headerlink\" title=\"Pure and impure functions\"></a><strong>Pure and impure functions</strong></h2><h2 id=\"纯和不纯的函数\"><a href=\"#纯和不纯的函数\" class=\"headerlink\" title=\"纯和不纯的函数\"></a><strong>纯和不纯的函数</strong></h2><p>A pure function is defined as one that doesn’t depend on or modify variables outside of its scope. That’s a bit of a mouthful, so let’s dive into some code for a more practical example.</p>\n<p>纯函数定义为不依赖于或修改其范围之外的变量的函数。但看这个定义等于什么也没说，所以让我们来看看一些更实际的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mouseX &lt; <span class=\"built_in\">window</span>.innerWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmousemove =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(mouseOnLeftSide(e.pageX));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>mouseOnLeftSide()</code> takes an X coordinate and checks to see if it’s less than half the window width—which would place it on the left side. However, <code>mouseOnLeftSide()</code> is not a pure function. We know this because within the body of the function, it refers to a value that it wasn’t explicitly given:</p>\n<p><code>mouseOnLeftSide()</code>采取X坐标并检查是否小于窗口宽度的一半—-以便将其放在左侧。但是，<code>mouseOnLeftSide()</code>不是纯函数。我们知道这一点，因为在函数体内，参考值不是一个确定值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> mouseX &lt; <span class=\"built_in\">window</span>.innerWidth / <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>The function is given <code>mouseX</code>, but not <code>window.innerWidth</code>. This means the function is reaching out to access data it wasn’t given, and hence it’s not pure.</p>\n<p>该函数给出了 <code>mouseX</code>，但是 <code>window.innerWidth</code> 却不明确。这意味着该函数正在访问不确定的数据，因此它是不纯的。</p>\n<h2 id=\"The-problem-with-impure-functions\"><a href=\"#The-problem-with-impure-functions\" class=\"headerlink\" title=\"The problem with impure functions\"></a><strong>The problem with impure functions</strong></h2><h2 id=\"不纯的函数是个问题\"><a href=\"#不纯的函数是个问题\" class=\"headerlink\" title=\"不纯的函数是个问题\"></a><strong>不纯的函数是个问题</strong></h2><p>You might ask why this is an issue—this piece of code works just fine and does the job expected of it. Imagine that you get a bug report from a user that when the window is less than 500 pixels wide the function is incorrect. How do you test this? You’ve got two options:</p>\n<p>你也许会问这怎么就是个问题了，代码不就是找到并且做他要做的事就可以了么。你想象一下，当你从某个用户那里得知当窗口小于500像素的时候功能就不正常了。你怎么测试代码？您已经有两个选项：</p>\n<p>1.You could manually test by loading up your browser and moving your mouse around until you’ve found the problem.</p>\n<p>1.您可以手动测试，通过浏览器加载你的程序，并且移动鼠标。直到你发现的问题。</p>\n<p>2.You could write some unit tests (Rebecca Murphey’s Writing Testable JavaScript is a great introduction) to not only track down the bug, but also ensure that it doesn’t happen again.</p>\n<p>2.你可以写一些单元测试（Rebecca Murphey写的 可测试性的JavaScript 是一个很好的介绍）不仅跟踪的错误，也确保错误不再发生。</p>\n<p>You could write some unit tests (Rebecca Murphey’s Writing <code>Testable JavaScript</code> is a great introduction) to not only track down the bug, but also ensure that it doesn’t happen again.</p>\n<p>你可以写一些单元测试（Rebecca Murphey写的 <code>可测试性的JavaScript</code> 是一个很好的介绍）不仅跟踪的错误，也确保错误不再发生。</p>\n<p>Keen to have a test in place to avoid this bug recurring, we pick the second option and get writing. Now we face a new problem, though: how do we set up our test correctly? We know we need to set up our test with the window width set to less than 500 pixels, but how? The function relies on <code>window.innerWidth</code>, and making sure that’s at a particular value is going to be a pain.</p>\n<p>热衷有一个测试中的地方，以避免此错误重复，我们选择第二个选项，现在就去写写。现在我们面对了新的问题，虽然：我们怎么才能确保我们的测试是正确的？我们知道这个测试需要一个窗口，而且窗口的宽度要小于500像素。但是怎么做呢？那个函数依赖 <code>window.innerWidth</code>，确保他是一个特定的值将会很头疼的。</p>\n<h2 id=\"Benefits-of-pure-functions\"><a href=\"#Benefits-of-pure-functions\" class=\"headerlink\" title=\"Benefits of pure functions\"></a><strong>Benefits of pure functions</strong></h2><h2 id=\"纯函数的好处\"><a href=\"#纯函数的好处\" class=\"headerlink\" title=\"纯函数的好处\"></a><strong>纯函数的好处</strong></h2><h4 id=\"SIMPLER-TESTING\"><a href=\"#SIMPLER-TESTING\" class=\"headerlink\" title=\"SIMPLER TESTING\"></a><strong>SIMPLER TESTING</strong></h4><h4 id=\"简单的测试\"><a href=\"#简单的测试\" class=\"headerlink\" title=\"简单的测试\"></a><strong>简单的测试</strong></h4><p>With that issue of how to test in mind, imagine we’d instead written the code like so:</p>\n<p>记住怎么去测试这个问题，想象一下我们并没有编写下面那样的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX, windowWidth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mouseX &lt; windowWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(mouseOnLeftSide(e.pageX, <span class=\"built_in\">window</span>.innerWidth));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>The key difference here is that <code>mouseOnLeftSide()</code> now takes two arguments: the mouse X position and the window width. This means that <code>mouseOnLeftSide()</code> is now a pure function; all the data it needs it is explicitly given as inputs and it never has to reach out to access any data.</p>\n<p>关键不同点 <code>mouseOnLeftSide()</code> 函数有两个参数：鼠标X轴的坐标和窗口的宽度。这就表示 <code>mouseOnLeftSide()</code> 现在是个纯函数；函数需要的全部数据都能够通过输入明确给出并且没有引入外部的任何数据。</p>\n<p>In terms of functionality, it’s identical to our previous example, but we’ve dramatically improved its maintainability and testability. Now we don’t have to hack around to fake <code>window.innerWidth</code> for any tests, but instead just call <code>mouseOnLeftSide()</code> with the exact arguments we need:</p>\n<p>在功能方面，就和前面的事例展示给我们的一样，但是我们的改善显著的提高了可维护性和可测试性。现在我们不需要为那个 <code>window.innerWidth</code> 进行测试，我们只需要调用有明确参数的 <code>mouseOnLeftSide()</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mouseOnLeftSide(<span class=\"number\">5</span>, <span class=\"number\">499</span>) <span class=\"comment\">// 确保它的工作原理并且宽度小于500</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"SELF-DOCUMENTING\"><a href=\"#SELF-DOCUMENTING\" class=\"headerlink\" title=\"SELF-DOCUMENTING\"></a><strong>SELF-DOCUMENTING</strong></h4><h4 id=\"自记录\"><a href=\"#自记录\" class=\"headerlink\" title=\"自记录\"></a><strong>自记录</strong></h4><p>Besides being easier to test, pure functions have other characteristics that make them worth using whenever possible. By their very nature, pure functions are self-documenting. If you know that a function doesn’t reach out of its scope to get data, you know the only data it can possibly touch is passed in as arguments. Consider the following function definition:</p>\n<p>除了被更容易测试，纯函数有其他特性使他们值得使用尽可能。因为他们很自然，所以纯函数是自记录。如果函数没有使用自身作用域外的数据，那你可以明确的知道唯一的数据来源是传参。请考虑以下函数定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX, windowWidth</span>)</span></span><br></pre></td></tr></table></figure>\n<p>You know that this function deals with two pieces of data, and if the arguments are well named it should be clear what they are. We all have to deal with the pain of revisiting code that’s lain untouched for six months, and being able to regain familiarity with it quickly is a key skill.</p>\n<p>你知道这个函数有两个命名明确的数据。我们将在未来大半年的时间里会重温这些代码，能够快速的熟悉他们是个关键技能。</p>\n<h4 id=\"AVOIDING-GLOBALS-IN-FUNCTIONS\"><a href=\"#AVOIDING-GLOBALS-IN-FUNCTIONS\" class=\"headerlink\" title=\"AVOIDING GLOBALS IN FUNCTIONS\"></a><strong>AVOIDING GLOBALS IN FUNCTIONS</strong></h4><h4 id=\"避免全局函数\"><a href=\"#避免全局函数\" class=\"headerlink\" title=\"避免全局函数\"></a><strong>避免全局函数</strong></h4><p>The problem of global variables is well documented in JavaScript—the language makes it trivial to store data globally where all functions can access it. This is a common source of bugs, too, because anything could have changed the value of a global variable, and hence the function could now behave differently.</p>\n<p>在JavaScript中全局变量是很好记录的。语言的特点使得他琐碎的仓储着全局数据，这样所有的函数都可以访问他。这是一切错误的根源，因为任何地方都可以改变全局变量的值，因此函数可能表现出不同的行为。</p>\n<p>An additional property of pure functions is referential transparency. This is a rather complex term with a simple meaning: given the same inputs, the output is always the same. Going back to <code>mouseOnLeftSide</code>, let’s look at the first definition we had:</p>\n<p>一个额外的属性的引用对于纯函数来说是透明的。这个术语相当复杂，简而言之：给相同的参数，总是会有相同的结果。回去看看 <code>mouseOnLeftSide</code> 函数，第一次我们是怎么定义他的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mouseX &lt; <span class=\"built_in\">window</span>.innerWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This function is not referentially transparent. I could call it with the input 5 multiple times, resize the window between calls, and the result would be different every time. This is a slightly contrived example, but functions that return different values even when their inputs are the same are always harder to work with. Reasoning about them is harder because you can’t guarantee their behavior. For the same reason, testing is trickier, because you don’t have full control over the data the function needs.</p>\n<p>这个函数是不透明的。无论我调试多少次，每当窗口大小发生变化，函数都会输出不同的结果。这还是一个简单的例子，但是输入相同值却返回不同值的函数总是难以使用的。理解他们更难，因为你不能保证他们的行为。同样的原因，测试很变得棘手，因为你没有完全控制功能需要的数据。</p>\n<p>On the other hand, our improved mouseOnLeftSide function is referentially transparent because all its data comes from inputs and it never reaches outside itself:</p>\n<p>另一方面，我们改进的 <code>mouseOnLeftSide</code> 函数使其透明，因为它的所有数据都来自于参数，并且它永远不会调用函数外部数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX, windowWidth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mouseX &lt; windowWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You get referential transparency for free when following the rule of declaring all your data as inputs, and by doing this you eliminate an entire class of bugs around side effects and functions acting unexpectedly. If you have full control over the data, you can hunt down and replicate bugs much more quickly and reliably without chancing the lottery of global variables that could interfere.</p>\n<p>遵循将所有数据都由参数声明的规则，你可以很容易获得清晰的参考，这样做可以消除由于副作用函数带来的出人意料的错误。如果你完全控制数据，你可以更快速，更可靠地追踪和复制错误，而无需更改可能会干扰的全局变量。</p>\n<h2 id=\"Choosing-which-functions-to-make-pure\"><a href=\"#Choosing-which-functions-to-make-pure\" class=\"headerlink\" title=\"Choosing which functions to make pure\"></a><strong>Choosing which functions to make pure</strong></h2><h2 id=\"哪些函数要变为纯函数\"><a href=\"#哪些函数要变为纯函数\" class=\"headerlink\" title=\"哪些函数要变为纯函数\"></a><strong>哪些函数要变为纯函数</strong></h2><p>It’s impossible to have pure functions consistently—there will always be a time when you need to reach out and fetch data, the most common example of which is reaching into the DOM to grab a specific element to interact with. It’s a fact of JavaScript that you’ll have to do this, and you shouldn’t feel bad about reaching outside of your function. Instead, carefully consider if there is a way to structure your code so that impure functions can be isolated. Prevent them from having broad effects throughout your codebase, and try to use pure functions whenever appropriate.</p>\n<p>不可能总是使用纯函数的––毕竟需要一个函数来实现获取外部数据，其最常见的例子是DOM特定元素的获取和元素之进行交互。这是JavaScript的一个事实，你必须这样做，你的函数获取外部数据也不要感到不好。相反，请仔细考虑是否有办法构建你的代码，以使不纯的函数被隔离。防止它们在整个代码库中产生广泛的影响，并尽可能适当地使用纯函数。</p>\n<p>Let’s take a look at the code below, which grabs an element from the DOM and changes its background color to red:</p>\n<p>让我们看看下面的代码，从DOMA中获取一个元素并且把他的背景色改为红色：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeElementToRed</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    foo.style.backgroundColor = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">changeElementToRed();</span><br></pre></td></tr></table></figure>\n<p>There are two problems with this piece of code, both solvable by transitioning to a pure function:</p>\n<p>这行代码中有两个问题，都可以通过转换为纯函数来解决：</p>\n<p>This function is not reusable at all; it’s directly tied to a specific DOM element. If we wanted to reuse it to change a different element, we couldn’t.</p>\n<p>这个函数根本不可复用；它直接绑定到一个特定的DOM元素。如果我们想复用它来改变一个不同的元素，那就不可以了。</p>\n<p>This function is hard to test because it’s not pure. To test it, we would have to create an element with a specific ID rather than any generic element.</p>\n<p>这也不是个纯函数所以很难测试，要测试他，我们必须创建一个有特定id的元素而不是一个通用元素。</p>\n<p>Given the two points above, I would rewrite this function to:</p>\n<p>就上面讲到的两点，我们需要重写函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeElementToRed</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">    elem.style.backgroundColor = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeFooToRed</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    changeElementToRed(foo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">changeFooToRed();</span><br></pre></td></tr></table></figure>\n<p>We’ve now changed <code>changeelementtored()</code> to not be tied to a specific DOM element and to be more generic. At the same time, we’ve made it pure, bringing us all the benefits discussed previously.</p>\n<p>我们现在重写了 <code>changeelementtored()</code>，他不被捆绑到一个特定的DOM元素变得更通用。这样做，我们使他变得更纯粹，并且都来了我们先前所讨论的好处。</p>\n<p>It’s important to note, though, that I’ve still got some impure code <code>changeFooToRed()</code> is impure. You can never avoid this, but it’s about spotting opportunities where turning a function pure would increase its readability, reusability, and testability. By keeping the places where you’re impure to a minimum and creating as many pure, reusable functions as you can, you’ll save yourself a huge amount of pain in the future and write better code.</p>\n<p>注意！我们的代码中还有不纯粹的地方，比如 <code>changeFooToRed()</code>，就是不纯粹的。在项目中不纯粹的代码是不可避免的，但是我们要尽可能的把他们变得纯粹，因为这样可以提高代码的可读性，可重用性和可测试性。把不纯粹的代码保持在最低限度，并尽可能多的创建可复用的纯粹函数可，您将在以后为自己减少痛苦，并可以编写出更好的代码。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><strong>Conclusion</strong></h2><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h2><p>“Pure functions,” “side effects,” and “referential transparency” are terms usually associated with purely functional languages, but that doesn’t mean we can’t take the principles and apply them to our JavaScript, too. By being mindful of these principles and applying them wisely when your code could benefit from them you’ll gain more reliable, self-documenting codebases that are easier to work with and that break less often. I encourage you to keep this in mind next time you’re writing new code, or even revisiting some existing code. It will take some time to get used to these ideas, but soon you’ll find yourself applying them without even thinking about it. Your fellow developers and your future self will thank you.</p>\n<p>“纯函数”，“副作用”和“参照透明度”通常与纯函数式语言相关联，但这并不意味着我们不能将这些原则应用到JavaScript中。通过注意这些原则并合理地应用它们，当你的的代码从中受益时，你将获得更多的可靠性。我鼓励你在下一次写新的代码时参考这些原则，甚至重新审视一些现有的代码。当然习惯这些想法需要一些时间，但很快你会发现自己抛弃原来的顾虑应用它们。你的同事和未来的你会为此感谢你。</p>\n","excerpt":"<p>Once your website or application goes past a small number of lines, it will inevitably contain bugs of some sort.</p>\n<p>一旦您的网站或应用程序达到一定的代码量，它将不可避免地包含某些类型的错误。</p>\n<p>This isn’t specific to JavaScript but is shared by nearly all languages—it’s very tricky, if not impossible, to thoroughly rule out the chance of any bugs in your application.</p>\n<p>这不是JavaScript特有的，而是几乎所有的程序语言都面临这个问题 - 这个问题非常棘手，是不是有可能，彻底的排除掉你的程序中出现任何错误的机会。</p>\n<p>However, that doesn’t mean we can’t take precautions by coding in a way that lessens our vulnerability to bugs.</p>\n<p>然而，这并不意味着我们不能通过编码以某种方式采取预防措施，使我们在bugs面前不显得那么脆弱。","more":"</p>\n<h2 id=\"Pure-and-impure-functions\"><a href=\"#Pure-and-impure-functions\" class=\"headerlink\" title=\"Pure and impure functions\"></a><strong>Pure and impure functions</strong></h2><h2 id=\"纯和不纯的函数\"><a href=\"#纯和不纯的函数\" class=\"headerlink\" title=\"纯和不纯的函数\"></a><strong>纯和不纯的函数</strong></h2><p>A pure function is defined as one that doesn’t depend on or modify variables outside of its scope. That’s a bit of a mouthful, so let’s dive into some code for a more practical example.</p>\n<p>纯函数定义为不依赖于或修改其范围之外的变量的函数。但看这个定义等于什么也没说，所以让我们来看看一些更实际的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mouseX &lt; <span class=\"built_in\">window</span>.innerWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmousemove =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(mouseOnLeftSide(e.pageX));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>mouseOnLeftSide()</code> takes an X coordinate and checks to see if it’s less than half the window width—which would place it on the left side. However, <code>mouseOnLeftSide()</code> is not a pure function. We know this because within the body of the function, it refers to a value that it wasn’t explicitly given:</p>\n<p><code>mouseOnLeftSide()</code>采取X坐标并检查是否小于窗口宽度的一半—-以便将其放在左侧。但是，<code>mouseOnLeftSide()</code>不是纯函数。我们知道这一点，因为在函数体内，参考值不是一个确定值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> mouseX &lt; <span class=\"built_in\">window</span>.innerWidth / <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>The function is given <code>mouseX</code>, but not <code>window.innerWidth</code>. This means the function is reaching out to access data it wasn’t given, and hence it’s not pure.</p>\n<p>该函数给出了 <code>mouseX</code>，但是 <code>window.innerWidth</code> 却不明确。这意味着该函数正在访问不确定的数据，因此它是不纯的。</p>\n<h2 id=\"The-problem-with-impure-functions\"><a href=\"#The-problem-with-impure-functions\" class=\"headerlink\" title=\"The problem with impure functions\"></a><strong>The problem with impure functions</strong></h2><h2 id=\"不纯的函数是个问题\"><a href=\"#不纯的函数是个问题\" class=\"headerlink\" title=\"不纯的函数是个问题\"></a><strong>不纯的函数是个问题</strong></h2><p>You might ask why this is an issue—this piece of code works just fine and does the job expected of it. Imagine that you get a bug report from a user that when the window is less than 500 pixels wide the function is incorrect. How do you test this? You’ve got two options:</p>\n<p>你也许会问这怎么就是个问题了，代码不就是找到并且做他要做的事就可以了么。你想象一下，当你从某个用户那里得知当窗口小于500像素的时候功能就不正常了。你怎么测试代码？您已经有两个选项：</p>\n<p>1.You could manually test by loading up your browser and moving your mouse around until you’ve found the problem.</p>\n<p>1.您可以手动测试，通过浏览器加载你的程序，并且移动鼠标。直到你发现的问题。</p>\n<p>2.You could write some unit tests (Rebecca Murphey’s Writing Testable JavaScript is a great introduction) to not only track down the bug, but also ensure that it doesn’t happen again.</p>\n<p>2.你可以写一些单元测试（Rebecca Murphey写的 可测试性的JavaScript 是一个很好的介绍）不仅跟踪的错误，也确保错误不再发生。</p>\n<p>You could write some unit tests (Rebecca Murphey’s Writing <code>Testable JavaScript</code> is a great introduction) to not only track down the bug, but also ensure that it doesn’t happen again.</p>\n<p>你可以写一些单元测试（Rebecca Murphey写的 <code>可测试性的JavaScript</code> 是一个很好的介绍）不仅跟踪的错误，也确保错误不再发生。</p>\n<p>Keen to have a test in place to avoid this bug recurring, we pick the second option and get writing. Now we face a new problem, though: how do we set up our test correctly? We know we need to set up our test with the window width set to less than 500 pixels, but how? The function relies on <code>window.innerWidth</code>, and making sure that’s at a particular value is going to be a pain.</p>\n<p>热衷有一个测试中的地方，以避免此错误重复，我们选择第二个选项，现在就去写写。现在我们面对了新的问题，虽然：我们怎么才能确保我们的测试是正确的？我们知道这个测试需要一个窗口，而且窗口的宽度要小于500像素。但是怎么做呢？那个函数依赖 <code>window.innerWidth</code>，确保他是一个特定的值将会很头疼的。</p>\n<h2 id=\"Benefits-of-pure-functions\"><a href=\"#Benefits-of-pure-functions\" class=\"headerlink\" title=\"Benefits of pure functions\"></a><strong>Benefits of pure functions</strong></h2><h2 id=\"纯函数的好处\"><a href=\"#纯函数的好处\" class=\"headerlink\" title=\"纯函数的好处\"></a><strong>纯函数的好处</strong></h2><h4 id=\"SIMPLER-TESTING\"><a href=\"#SIMPLER-TESTING\" class=\"headerlink\" title=\"SIMPLER TESTING\"></a><strong>SIMPLER TESTING</strong></h4><h4 id=\"简单的测试\"><a href=\"#简单的测试\" class=\"headerlink\" title=\"简单的测试\"></a><strong>简单的测试</strong></h4><p>With that issue of how to test in mind, imagine we’d instead written the code like so:</p>\n<p>记住怎么去测试这个问题，想象一下我们并没有编写下面那样的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX, windowWidth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mouseX &lt; windowWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(mouseOnLeftSide(e.pageX, <span class=\"built_in\">window</span>.innerWidth));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>The key difference here is that <code>mouseOnLeftSide()</code> now takes two arguments: the mouse X position and the window width. This means that <code>mouseOnLeftSide()</code> is now a pure function; all the data it needs it is explicitly given as inputs and it never has to reach out to access any data.</p>\n<p>关键不同点 <code>mouseOnLeftSide()</code> 函数有两个参数：鼠标X轴的坐标和窗口的宽度。这就表示 <code>mouseOnLeftSide()</code> 现在是个纯函数；函数需要的全部数据都能够通过输入明确给出并且没有引入外部的任何数据。</p>\n<p>In terms of functionality, it’s identical to our previous example, but we’ve dramatically improved its maintainability and testability. Now we don’t have to hack around to fake <code>window.innerWidth</code> for any tests, but instead just call <code>mouseOnLeftSide()</code> with the exact arguments we need:</p>\n<p>在功能方面，就和前面的事例展示给我们的一样，但是我们的改善显著的提高了可维护性和可测试性。现在我们不需要为那个 <code>window.innerWidth</code> 进行测试，我们只需要调用有明确参数的 <code>mouseOnLeftSide()</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mouseOnLeftSide(<span class=\"number\">5</span>, <span class=\"number\">499</span>) <span class=\"comment\">// 确保它的工作原理并且宽度小于500</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"SELF-DOCUMENTING\"><a href=\"#SELF-DOCUMENTING\" class=\"headerlink\" title=\"SELF-DOCUMENTING\"></a><strong>SELF-DOCUMENTING</strong></h4><h4 id=\"自记录\"><a href=\"#自记录\" class=\"headerlink\" title=\"自记录\"></a><strong>自记录</strong></h4><p>Besides being easier to test, pure functions have other characteristics that make them worth using whenever possible. By their very nature, pure functions are self-documenting. If you know that a function doesn’t reach out of its scope to get data, you know the only data it can possibly touch is passed in as arguments. Consider the following function definition:</p>\n<p>除了被更容易测试，纯函数有其他特性使他们值得使用尽可能。因为他们很自然，所以纯函数是自记录。如果函数没有使用自身作用域外的数据，那你可以明确的知道唯一的数据来源是传参。请考虑以下函数定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX, windowWidth</span>)</span></span><br></pre></td></tr></table></figure>\n<p>You know that this function deals with two pieces of data, and if the arguments are well named it should be clear what they are. We all have to deal with the pain of revisiting code that’s lain untouched for six months, and being able to regain familiarity with it quickly is a key skill.</p>\n<p>你知道这个函数有两个命名明确的数据。我们将在未来大半年的时间里会重温这些代码，能够快速的熟悉他们是个关键技能。</p>\n<h4 id=\"AVOIDING-GLOBALS-IN-FUNCTIONS\"><a href=\"#AVOIDING-GLOBALS-IN-FUNCTIONS\" class=\"headerlink\" title=\"AVOIDING GLOBALS IN FUNCTIONS\"></a><strong>AVOIDING GLOBALS IN FUNCTIONS</strong></h4><h4 id=\"避免全局函数\"><a href=\"#避免全局函数\" class=\"headerlink\" title=\"避免全局函数\"></a><strong>避免全局函数</strong></h4><p>The problem of global variables is well documented in JavaScript—the language makes it trivial to store data globally where all functions can access it. This is a common source of bugs, too, because anything could have changed the value of a global variable, and hence the function could now behave differently.</p>\n<p>在JavaScript中全局变量是很好记录的。语言的特点使得他琐碎的仓储着全局数据，这样所有的函数都可以访问他。这是一切错误的根源，因为任何地方都可以改变全局变量的值，因此函数可能表现出不同的行为。</p>\n<p>An additional property of pure functions is referential transparency. This is a rather complex term with a simple meaning: given the same inputs, the output is always the same. Going back to <code>mouseOnLeftSide</code>, let’s look at the first definition we had:</p>\n<p>一个额外的属性的引用对于纯函数来说是透明的。这个术语相当复杂，简而言之：给相同的参数，总是会有相同的结果。回去看看 <code>mouseOnLeftSide</code> 函数，第一次我们是怎么定义他的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mouseX &lt; <span class=\"built_in\">window</span>.innerWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This function is not referentially transparent. I could call it with the input 5 multiple times, resize the window between calls, and the result would be different every time. This is a slightly contrived example, but functions that return different values even when their inputs are the same are always harder to work with. Reasoning about them is harder because you can’t guarantee their behavior. For the same reason, testing is trickier, because you don’t have full control over the data the function needs.</p>\n<p>这个函数是不透明的。无论我调试多少次，每当窗口大小发生变化，函数都会输出不同的结果。这还是一个简单的例子，但是输入相同值却返回不同值的函数总是难以使用的。理解他们更难，因为你不能保证他们的行为。同样的原因，测试很变得棘手，因为你没有完全控制功能需要的数据。</p>\n<p>On the other hand, our improved mouseOnLeftSide function is referentially transparent because all its data comes from inputs and it never reaches outside itself:</p>\n<p>另一方面，我们改进的 <code>mouseOnLeftSide</code> 函数使其透明，因为它的所有数据都来自于参数，并且它永远不会调用函数外部数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseOnLeftSide</span>(<span class=\"params\">mouseX, windowWidth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mouseX &lt; windowWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You get referential transparency for free when following the rule of declaring all your data as inputs, and by doing this you eliminate an entire class of bugs around side effects and functions acting unexpectedly. If you have full control over the data, you can hunt down and replicate bugs much more quickly and reliably without chancing the lottery of global variables that could interfere.</p>\n<p>遵循将所有数据都由参数声明的规则，你可以很容易获得清晰的参考，这样做可以消除由于副作用函数带来的出人意料的错误。如果你完全控制数据，你可以更快速，更可靠地追踪和复制错误，而无需更改可能会干扰的全局变量。</p>\n<h2 id=\"Choosing-which-functions-to-make-pure\"><a href=\"#Choosing-which-functions-to-make-pure\" class=\"headerlink\" title=\"Choosing which functions to make pure\"></a><strong>Choosing which functions to make pure</strong></h2><h2 id=\"哪些函数要变为纯函数\"><a href=\"#哪些函数要变为纯函数\" class=\"headerlink\" title=\"哪些函数要变为纯函数\"></a><strong>哪些函数要变为纯函数</strong></h2><p>It’s impossible to have pure functions consistently—there will always be a time when you need to reach out and fetch data, the most common example of which is reaching into the DOM to grab a specific element to interact with. It’s a fact of JavaScript that you’ll have to do this, and you shouldn’t feel bad about reaching outside of your function. Instead, carefully consider if there is a way to structure your code so that impure functions can be isolated. Prevent them from having broad effects throughout your codebase, and try to use pure functions whenever appropriate.</p>\n<p>不可能总是使用纯函数的––毕竟需要一个函数来实现获取外部数据，其最常见的例子是DOM特定元素的获取和元素之进行交互。这是JavaScript的一个事实，你必须这样做，你的函数获取外部数据也不要感到不好。相反，请仔细考虑是否有办法构建你的代码，以使不纯的函数被隔离。防止它们在整个代码库中产生广泛的影响，并尽可能适当地使用纯函数。</p>\n<p>Let’s take a look at the code below, which grabs an element from the DOM and changes its background color to red:</p>\n<p>让我们看看下面的代码，从DOMA中获取一个元素并且把他的背景色改为红色：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeElementToRed</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    foo.style.backgroundColor = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">changeElementToRed();</span><br></pre></td></tr></table></figure>\n<p>There are two problems with this piece of code, both solvable by transitioning to a pure function:</p>\n<p>这行代码中有两个问题，都可以通过转换为纯函数来解决：</p>\n<p>This function is not reusable at all; it’s directly tied to a specific DOM element. If we wanted to reuse it to change a different element, we couldn’t.</p>\n<p>这个函数根本不可复用；它直接绑定到一个特定的DOM元素。如果我们想复用它来改变一个不同的元素，那就不可以了。</p>\n<p>This function is hard to test because it’s not pure. To test it, we would have to create an element with a specific ID rather than any generic element.</p>\n<p>这也不是个纯函数所以很难测试，要测试他，我们必须创建一个有特定id的元素而不是一个通用元素。</p>\n<p>Given the two points above, I would rewrite this function to:</p>\n<p>就上面讲到的两点，我们需要重写函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeElementToRed</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">    elem.style.backgroundColor = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeFooToRed</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">    changeElementToRed(foo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">changeFooToRed();</span><br></pre></td></tr></table></figure>\n<p>We’ve now changed <code>changeelementtored()</code> to not be tied to a specific DOM element and to be more generic. At the same time, we’ve made it pure, bringing us all the benefits discussed previously.</p>\n<p>我们现在重写了 <code>changeelementtored()</code>，他不被捆绑到一个特定的DOM元素变得更通用。这样做，我们使他变得更纯粹，并且都来了我们先前所讨论的好处。</p>\n<p>It’s important to note, though, that I’ve still got some impure code <code>changeFooToRed()</code> is impure. You can never avoid this, but it’s about spotting opportunities where turning a function pure would increase its readability, reusability, and testability. By keeping the places where you’re impure to a minimum and creating as many pure, reusable functions as you can, you’ll save yourself a huge amount of pain in the future and write better code.</p>\n<p>注意！我们的代码中还有不纯粹的地方，比如 <code>changeFooToRed()</code>，就是不纯粹的。在项目中不纯粹的代码是不可避免的，但是我们要尽可能的把他们变得纯粹，因为这样可以提高代码的可读性，可重用性和可测试性。把不纯粹的代码保持在最低限度，并尽可能多的创建可复用的纯粹函数可，您将在以后为自己减少痛苦，并可以编写出更好的代码。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><strong>Conclusion</strong></h2><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h2><p>“Pure functions,” “side effects,” and “referential transparency” are terms usually associated with purely functional languages, but that doesn’t mean we can’t take the principles and apply them to our JavaScript, too. By being mindful of these principles and applying them wisely when your code could benefit from them you’ll gain more reliable, self-documenting codebases that are easier to work with and that break less often. I encourage you to keep this in mind next time you’re writing new code, or even revisiting some existing code. It will take some time to get used to these ideas, but soon you’ll find yourself applying them without even thinking about it. Your fellow developers and your future self will thank you.</p>\n<p>“纯函数”，“副作用”和“参照透明度”通常与纯函数式语言相关联，但这并不意味着我们不能将这些原则应用到JavaScript中。通过注意这些原则并合理地应用它们，当你的的代码从中受益时，你将获得更多的可靠性。我鼓励你在下一次写新的代码时参考这些原则，甚至重新审视一些现有的代码。当然习惯这些想法需要一些时间，但很快你会发现自己抛弃原来的顾虑应用它们。你的同事和未来的你会为此感谢你。</p>"},{"title":"webpack的shimming的翻译","date":"2017-11-03T14:10:04.000Z","_content":"webpack编译器可以理解写入的ES2015模块，CommonJS或AMD的模块。然而，一些第三方库可能会期望全局依赖（例如jQuery的$）。这些库可能还会创建需要导出的全局变量。这些“broken modules”使得shimming发挥了作用。\n\nW> __我们不建议使用全局变量！__ Webpack真正的概念是更多的模块化前端开发。这意味着编写完整包含的隔离模块，而不依赖于隐藏的依赖关系（例如全局变量）。所以请仅在必要时去主要做。\n\n_shimming_ 的另一个使用场景就是，如果您希望使用浏览器的[polyfill](https://en.wikipedia.org/wiki/Polyfill)功能来支持更多的用户。在这种情况下，您可能只想将这些Polyfill提供给需要修补的浏览器（即按需加载）。<!-- more -->\n\n以下文章将介绍这两种用例。\n\nT>为了简单起见，本指南源于“[Getting Started](/guides/getting-started)”中的示例。请确保您在移动之前熟悉该设置。\n\n\n## 垫片全局变量\n\n我们从第一个使用shimming的全局变量的用例开始。在我们做任何事情之前，我们再来看看我们的项目：\n\n__project__\n\n``` diff\nwebpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n|- /node_modules\n```\n\n记得我们在使用 `lodash` ？为了演示目的，我们假设希望在整个应用程序中lodash要作为全局变量。为此我们可以使用`ProvidePlugin`插件。\n\n[`ProvidePlugin`](/plugins/provide-plugin) 使用WebPACK变量的形式使包可以在每个模块编译通过。 如果WebPACK看到变量被使用，它将在最后一个bundle中引入指定的包。下面我们取消 `import` 改用插件的方式来提供 `lodash`:\n\n__src/index.js__\n\n``` diff\n- import _ from 'lodash';\n-\n  function component() {\n    var element = document.createElement('div');\n\n-   // Lodash, now imported by this script\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n-   }\n+   },\n+   plugins: [\n+     new webpack.ProvidePlugin({\n+       lodash: 'lodash'\n+     })\n+   ]\n  };\n```\n\n以上就是对webpack的配置...\n\n> 一旦你引用了一次 `lodash`的实例变量，引入`lodash` 包并且提供给需要他的模块。\n\n如果我们运行 build ，我们将看到同样的输出：\n\n``` bash\nTODO: Include output\n```\n我们还可以使用 `ProvidePlugin` 通过使用路径数组（路径数组机构如下：`[module, child, ...children?]`）来配置模块的单个导出。所以让我们想想一下，如果 `lodash` 的 `join` 被调用的时候，我们只需要输出这一个方法：\n So let's imagine we only wanted to provide the `join` method from `lodash` wherever it's invoked:\n\n__src/index.js__\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n+   element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n-       lodash: 'lodash'\n+       join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n通过 [Tree Shaking](/guides/tree-shaking) `lodash`库的其他部分将被优雅的舍去。\n\n\n## 局部垫片\n\n一些传统模块依赖于 `window` 对象。更新我们的`index.js`，作为事例：\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n+\n+   // Assume we are in the context of `window`\n+   this.alert('Hmmm, this probably isn\\'t a great idea...')\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n现在有一个问题，当模块在CommonJS上下文中执行时，`this` 等于 `module.exports`。在这个事例中我们将使用 [`imports-loader`](/loaders/imports-loader/) 来替换 `this` ：\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n+   module: {\n+     rules: [\n+       {\n+         test: require.resolve('index.js'),\n+         use: 'imports-loader?this=>window'\n+       }\n+     ]\n+   },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n\n## 全局变量的导出\n\n我们通常会创建一个充满了全局变量的库。我们可以在我们的设置中添加一个小模块来演示这个：\n\n__project__\n\n``` diff\n  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n+   |- globals.js\n  |- /node_modules\n```\n\n__src/globals.js__\n\n``` js\nvar file = 'blah.txt';\nvar helpers = {\n  test: function() { console.log('test something'); },\n  parse: function() { console.log('parse something'); }\n}\n```\n\n现在，你可能永远不会在自己的代码中如此操作，但是你可能会遇到要使用一下已过时的库，其中包含与上述相似的代码。在这种情况下，我们可以使用 [`exports-loader`](/loaders/exports-loader/) 将该全局变量像一般模块那样导出。例如，将 `file` 导出为 `file`，`helpers.parse` 导出为 `parse`：\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve('index.js'),\n          use: 'imports-loader?this=>window'\n-       }\n+       },\n+       {\n+         test: require.resolve('globals.js'),\n+         use: 'exports-loader?file,parse=helpers.parse'\n+       }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n现在从我们的入口脚本（即 `src/index.js`）中，`import { file, parse } from './globals.js';` 都应该顺利进行。\n\n## 加载腻子\n\n到目前为止，我们讨论的几乎所有内容都与处理传统包有关。我们继续谈谈我们的第二个话题： __腻子__。\n\n有很多方法来加载腻子. 例如，要包括 [`babel-polyfill`](https://babeljs.io/docs/usage/polyfill/)，我们可以简单地：\n\n``` bash\nnpm i --save babel-polyfill\n```\n并`import`它，以便将其包含在我们的主包中：\n\n__src/index.js__\n\n``` diff\n+ import 'babel-polyfill';\n+\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\nT>请注意，我们没有将`import`绑定到变量。这是因为腻子只能在其他代码前自行运行。才能允许我们假设某些本机功能存在。\n\n__但是把腻子包括到主包中这种做法并不推荐__，因为这样会让现代浏览器用户下载过多不必要的脚本，降低用户体验。\n\n现在我们删除 `import` 并且添加一个新的腻子 [`whatwg-fetch`](https://github.com/github/fetch) ：\n\n``` bash\nnpm i --save whatwg-fetch\n```\n\n__src/index.js__\n\n``` diff\n- import 'babel-polyfill';\n-\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__project__\n\n``` diff\n  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n    |- globals.js\n+   |- polyfills.js\n  |- /node_modules\n```\n\n__src/polyfills.js__\n\n```javascript\nimport 'babel-polyfill';\nimport 'whatwg-fetch';\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n-   entry: './src/index.js',\n+   entry: {\n+     polyfills: './src/polyfills.js',\n+     index: './src/index.js'\n+   },\n    output: {\n-     filename: 'bundle.js',\n+     filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve('index.js'),\n          use: 'imports-loader?this=>window'\n        },\n        {\n          test: require.resolve('globals.js'),\n          use: 'exports-loader?file,parse=helpers.parse'\n        }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n有了这个，我们可以添加逻辑来有条件地加载我们的新的 `polyfills.bundle.js` 文件。您如何做出这一决定取决于您需要支持的技术和浏览器。我们将做一些简单的测试来确定我们的腻子是否需要：\n\n__dist/index.html__\n\n``` diff\n  <html>\n    <head>\n      <title>Getting Started</title>\n+     <script>\n+       var modernBrowser = (\n+         'fetch' in window &&\n+         'assign' in Object\n+       );\n+\n+       if ( !modernBrowser ) {\n+         var scriptElement = document.createElement('script');\n+\n+         scriptElement.async = false;\n+         scriptElement.src = '/polyfills.bundle.js';\n+         document.head.appendChild(scriptElement);\n+       }\n+     </script>\n    </head>\n    <body>\n      <script src=\"index.bundle.js\"></script>\n    </body>\n  </html>\n```\n\nNow we can `fetch` some data within our entry script:\n\n__src/index.js__\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n+\n+ fetch('https://jsonplaceholder.typicode.com/users')\n+   .then(response => response.json())\n+   .then(json => {\n+     console.log('We retrieved some data! AND we\\'re confident it will work on a variety of browser distributions.')\n+     console.log(json)\n+   })\n+   .catch(error => console.error('Something went wrong when fetching this data: ', error))\n```\n\n如果我们运行build，将会生成一个 `polyfills.bundle.js` 文件，并且浏览器中的所有内容都应该顺利运行。请注意，这种设置可能会得到改善，因为这只是解决如何把腻子只提供给真正需要它们的用户的一种方法。\n\n## 进一步的优化\n\n`babel-preset-env` 包则是通过一个 [browserslist](https://github.com/ai/browserslist)来匹配你浏览器，并且转码你浏览器所不支持的的代码。通过`useBuiltIns` 选项进行预设，默认为 `false`，通过 `import` 的方法导入更细粒度的功能来覆盖你的全局 `babel-polyfill`配置：\n\n``` js\nimport 'core-js/modules/es7.string.pad-start';\nimport 'core-js/modules/es7.string.pad-end';\nimport 'core-js/modules/web.timers';\nimport 'core-js/modules/web.immediate';\nimport 'core-js/modules/web.dom.iterable';\n```\n有关详细信息，请参阅[知识库](https://github.com/babel/babel-preset-env)。\n\n\n## Node的内部插件\n\nNode的内部插件，比如 `process` 能够根据您的配置文件直接打腻子，而无需使用任何特殊的loaders或插件。 查看[node配置页面](/configuration/node)，那里有过多的信息和事例。\n\n\n## 其它\n\n在处理传统模块时，还有一些其他工具可以帮助您。\n\n[`script-loader`](/loaders/script-loader/)能够评估你的全局上下文的代码。作用类似于一个 `script` 的标签容器。在这种模式下，每个正常的库都应该工作。`require`、`module` 等等未被定义。\n\nW>当使用 `script-loader` 时，将该模块作为字符串添加到捆绑包中。它不会被 `webpack` 最小化，所以请使用最小化的版本。对于这个加载器添加的库，也么有 `devtool` 支持。\n\n当没有AMD/CommonJS版本的模块，并且您想要包括到 `dist` 中去，你可以在 [`noParse`](/configuration/module/#module-noparse) 中标记这个模块。他将告诉webpack引用这个模块不需要匹配或分析 `require()` 和  `import` 语法。这种做法也用于提高构建性能。\n\nW> 任何需要AST的功能， 例如 `ProvidePlugin`，将不再工作。\n\n最后，有一些模块支持不同的 [模块风格](/concepts/modules)，如AMD，CommonJS和传统。在大多数情况下，他们首先检查 `define`，然后使用一些古怪的代码来导出属性。在这种情况下，可以通过 [`imports-loader`](/loaders/imports-loader/) 设置 `define=>false` 来强制导入CommonJS路径。\n\n***\n\n> 原文：https://webpack.js.org/guides/shimming/\n\n","source":"_posts/webpack的shimming的翻译.md","raw":"---\ntitle: webpack的shimming的翻译\ndate: 2017-11-03 22:10:04\ntags: ['webpack','前端','js','javascript','shimming']\ncategory: 'coding'\n---\nwebpack编译器可以理解写入的ES2015模块，CommonJS或AMD的模块。然而，一些第三方库可能会期望全局依赖（例如jQuery的$）。这些库可能还会创建需要导出的全局变量。这些“broken modules”使得shimming发挥了作用。\n\nW> __我们不建议使用全局变量！__ Webpack真正的概念是更多的模块化前端开发。这意味着编写完整包含的隔离模块，而不依赖于隐藏的依赖关系（例如全局变量）。所以请仅在必要时去主要做。\n\n_shimming_ 的另一个使用场景就是，如果您希望使用浏览器的[polyfill](https://en.wikipedia.org/wiki/Polyfill)功能来支持更多的用户。在这种情况下，您可能只想将这些Polyfill提供给需要修补的浏览器（即按需加载）。<!-- more -->\n\n以下文章将介绍这两种用例。\n\nT>为了简单起见，本指南源于“[Getting Started](/guides/getting-started)”中的示例。请确保您在移动之前熟悉该设置。\n\n\n## 垫片全局变量\n\n我们从第一个使用shimming的全局变量的用例开始。在我们做任何事情之前，我们再来看看我们的项目：\n\n__project__\n\n``` diff\nwebpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n|- /node_modules\n```\n\n记得我们在使用 `lodash` ？为了演示目的，我们假设希望在整个应用程序中lodash要作为全局变量。为此我们可以使用`ProvidePlugin`插件。\n\n[`ProvidePlugin`](/plugins/provide-plugin) 使用WebPACK变量的形式使包可以在每个模块编译通过。 如果WebPACK看到变量被使用，它将在最后一个bundle中引入指定的包。下面我们取消 `import` 改用插件的方式来提供 `lodash`:\n\n__src/index.js__\n\n``` diff\n- import _ from 'lodash';\n-\n  function component() {\n    var element = document.createElement('div');\n\n-   // Lodash, now imported by this script\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n-   }\n+   },\n+   plugins: [\n+     new webpack.ProvidePlugin({\n+       lodash: 'lodash'\n+     })\n+   ]\n  };\n```\n\n以上就是对webpack的配置...\n\n> 一旦你引用了一次 `lodash`的实例变量，引入`lodash` 包并且提供给需要他的模块。\n\n如果我们运行 build ，我们将看到同样的输出：\n\n``` bash\nTODO: Include output\n```\n我们还可以使用 `ProvidePlugin` 通过使用路径数组（路径数组机构如下：`[module, child, ...children?]`）来配置模块的单个导出。所以让我们想想一下，如果 `lodash` 的 `join` 被调用的时候，我们只需要输出这一个方法：\n So let's imagine we only wanted to provide the `join` method from `lodash` wherever it's invoked:\n\n__src/index.js__\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n+   element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n-       lodash: 'lodash'\n+       join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n通过 [Tree Shaking](/guides/tree-shaking) `lodash`库的其他部分将被优雅的舍去。\n\n\n## 局部垫片\n\n一些传统模块依赖于 `window` 对象。更新我们的`index.js`，作为事例：\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n+\n+   // Assume we are in the context of `window`\n+   this.alert('Hmmm, this probably isn\\'t a great idea...')\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n现在有一个问题，当模块在CommonJS上下文中执行时，`this` 等于 `module.exports`。在这个事例中我们将使用 [`imports-loader`](/loaders/imports-loader/) 来替换 `this` ：\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n+   module: {\n+     rules: [\n+       {\n+         test: require.resolve('index.js'),\n+         use: 'imports-loader?this=>window'\n+       }\n+     ]\n+   },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n\n## 全局变量的导出\n\n我们通常会创建一个充满了全局变量的库。我们可以在我们的设置中添加一个小模块来演示这个：\n\n__project__\n\n``` diff\n  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n+   |- globals.js\n  |- /node_modules\n```\n\n__src/globals.js__\n\n``` js\nvar file = 'blah.txt';\nvar helpers = {\n  test: function() { console.log('test something'); },\n  parse: function() { console.log('parse something'); }\n}\n```\n\n现在，你可能永远不会在自己的代码中如此操作，但是你可能会遇到要使用一下已过时的库，其中包含与上述相似的代码。在这种情况下，我们可以使用 [`exports-loader`](/loaders/exports-loader/) 将该全局变量像一般模块那样导出。例如，将 `file` 导出为 `file`，`helpers.parse` 导出为 `parse`：\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve('index.js'),\n          use: 'imports-loader?this=>window'\n-       }\n+       },\n+       {\n+         test: require.resolve('globals.js'),\n+         use: 'exports-loader?file,parse=helpers.parse'\n+       }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n现在从我们的入口脚本（即 `src/index.js`）中，`import { file, parse } from './globals.js';` 都应该顺利进行。\n\n## 加载腻子\n\n到目前为止，我们讨论的几乎所有内容都与处理传统包有关。我们继续谈谈我们的第二个话题： __腻子__。\n\n有很多方法来加载腻子. 例如，要包括 [`babel-polyfill`](https://babeljs.io/docs/usage/polyfill/)，我们可以简单地：\n\n``` bash\nnpm i --save babel-polyfill\n```\n并`import`它，以便将其包含在我们的主包中：\n\n__src/index.js__\n\n``` diff\n+ import 'babel-polyfill';\n+\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\nT>请注意，我们没有将`import`绑定到变量。这是因为腻子只能在其他代码前自行运行。才能允许我们假设某些本机功能存在。\n\n__但是把腻子包括到主包中这种做法并不推荐__，因为这样会让现代浏览器用户下载过多不必要的脚本，降低用户体验。\n\n现在我们删除 `import` 并且添加一个新的腻子 [`whatwg-fetch`](https://github.com/github/fetch) ：\n\n``` bash\nnpm i --save whatwg-fetch\n```\n\n__src/index.js__\n\n``` diff\n- import 'babel-polyfill';\n-\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\n__project__\n\n``` diff\n  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n    |- globals.js\n+   |- polyfills.js\n  |- /node_modules\n```\n\n__src/polyfills.js__\n\n```javascript\nimport 'babel-polyfill';\nimport 'whatwg-fetch';\n```\n\n__webpack.config.js__\n\n``` diff\n  const path = require('path');\n\n  module.exports = {\n-   entry: './src/index.js',\n+   entry: {\n+     polyfills: './src/polyfills.js',\n+     index: './src/index.js'\n+   },\n    output: {\n-     filename: 'bundle.js',\n+     filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve('index.js'),\n          use: 'imports-loader?this=>window'\n        },\n        {\n          test: require.resolve('globals.js'),\n          use: 'exports-loader?file,parse=helpers.parse'\n        }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n有了这个，我们可以添加逻辑来有条件地加载我们的新的 `polyfills.bundle.js` 文件。您如何做出这一决定取决于您需要支持的技术和浏览器。我们将做一些简单的测试来确定我们的腻子是否需要：\n\n__dist/index.html__\n\n``` diff\n  <html>\n    <head>\n      <title>Getting Started</title>\n+     <script>\n+       var modernBrowser = (\n+         'fetch' in window &&\n+         'assign' in Object\n+       );\n+\n+       if ( !modernBrowser ) {\n+         var scriptElement = document.createElement('script');\n+\n+         scriptElement.async = false;\n+         scriptElement.src = '/polyfills.bundle.js';\n+         document.head.appendChild(scriptElement);\n+       }\n+     </script>\n    </head>\n    <body>\n      <script src=\"index.bundle.js\"></script>\n    </body>\n  </html>\n```\n\nNow we can `fetch` some data within our entry script:\n\n__src/index.js__\n\n``` diff\n  function component() {\n    var element = document.createElement('div');\n\n    element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n+\n+ fetch('https://jsonplaceholder.typicode.com/users')\n+   .then(response => response.json())\n+   .then(json => {\n+     console.log('We retrieved some data! AND we\\'re confident it will work on a variety of browser distributions.')\n+     console.log(json)\n+   })\n+   .catch(error => console.error('Something went wrong when fetching this data: ', error))\n```\n\n如果我们运行build，将会生成一个 `polyfills.bundle.js` 文件，并且浏览器中的所有内容都应该顺利运行。请注意，这种设置可能会得到改善，因为这只是解决如何把腻子只提供给真正需要它们的用户的一种方法。\n\n## 进一步的优化\n\n`babel-preset-env` 包则是通过一个 [browserslist](https://github.com/ai/browserslist)来匹配你浏览器，并且转码你浏览器所不支持的的代码。通过`useBuiltIns` 选项进行预设，默认为 `false`，通过 `import` 的方法导入更细粒度的功能来覆盖你的全局 `babel-polyfill`配置：\n\n``` js\nimport 'core-js/modules/es7.string.pad-start';\nimport 'core-js/modules/es7.string.pad-end';\nimport 'core-js/modules/web.timers';\nimport 'core-js/modules/web.immediate';\nimport 'core-js/modules/web.dom.iterable';\n```\n有关详细信息，请参阅[知识库](https://github.com/babel/babel-preset-env)。\n\n\n## Node的内部插件\n\nNode的内部插件，比如 `process` 能够根据您的配置文件直接打腻子，而无需使用任何特殊的loaders或插件。 查看[node配置页面](/configuration/node)，那里有过多的信息和事例。\n\n\n## 其它\n\n在处理传统模块时，还有一些其他工具可以帮助您。\n\n[`script-loader`](/loaders/script-loader/)能够评估你的全局上下文的代码。作用类似于一个 `script` 的标签容器。在这种模式下，每个正常的库都应该工作。`require`、`module` 等等未被定义。\n\nW>当使用 `script-loader` 时，将该模块作为字符串添加到捆绑包中。它不会被 `webpack` 最小化，所以请使用最小化的版本。对于这个加载器添加的库，也么有 `devtool` 支持。\n\n当没有AMD/CommonJS版本的模块，并且您想要包括到 `dist` 中去，你可以在 [`noParse`](/configuration/module/#module-noparse) 中标记这个模块。他将告诉webpack引用这个模块不需要匹配或分析 `require()` 和  `import` 语法。这种做法也用于提高构建性能。\n\nW> 任何需要AST的功能， 例如 `ProvidePlugin`，将不再工作。\n\n最后，有一些模块支持不同的 [模块风格](/concepts/modules)，如AMD，CommonJS和传统。在大多数情况下，他们首先检查 `define`，然后使用一些古怪的代码来导出属性。在这种情况下，可以通过 [`imports-loader`](/loaders/imports-loader/) 设置 `define=>false` 来强制导入CommonJS路径。\n\n***\n\n> 原文：https://webpack.js.org/guides/shimming/\n\n","slug":"webpack的shimming的翻译","published":1,"updated":"2017-12-16T11:50:34.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1w1000fm6i6adcmwloe","content":"<p>webpack编译器可以理解写入的ES2015模块，CommonJS或AMD的模块。然而，一些第三方库可能会期望全局依赖（例如jQuery的$）。这些库可能还会创建需要导出的全局变量。这些“broken modules”使得shimming发挥了作用。</p>\n<p>W&gt; <strong>我们不建议使用全局变量！</strong> Webpack真正的概念是更多的模块化前端开发。这意味着编写完整包含的隔离模块，而不依赖于隐藏的依赖关系（例如全局变量）。所以请仅在必要时去主要做。</p>\n<p><em>shimming</em> 的另一个使用场景就是，如果您希望使用浏览器的<a href=\"https://en.wikipedia.org/wiki/Polyfill\" target=\"_blank\" rel=\"external\">polyfill</a>功能来支持更多的用户。在这种情况下，您可能只想将这些Polyfill提供给需要修补的浏览器（即按需加载）。<a id=\"more\"></a></p>\n<p>以下文章将介绍这两种用例。</p>\n<p>T&gt;为了简单起见，本指南源于“<a href=\"/guides/getting-started\">Getting Started</a>”中的示例。请确保您在移动之前熟悉该设置。</p>\n<h2 id=\"垫片全局变量\"><a href=\"#垫片全局变量\" class=\"headerlink\" title=\"垫片全局变量\"></a>垫片全局变量</h2><p>我们从第一个使用shimming的全局变量的用例开始。在我们做任何事情之前，我们再来看看我们的项目：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- /dist</span><br><span class=\"line\">|- /src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">|- /node_modules</span><br></pre></td></tr></table></figure>\n<p>记得我们在使用 <code>lodash</code> ？为了演示目的，我们假设希望在整个应用程序中lodash要作为全局变量。为此我们可以使用<code>ProvidePlugin</code>插件。</p>\n<p><a href=\"/plugins/provide-plugin\"><code>ProvidePlugin</code></a> 使用WebPACK变量的形式使包可以在每个模块编译通过。 如果WebPACK看到变量被使用，它将在最后一个bundle中引入指定的包。下面我们取消 <code>import</code> 改用插件的方式来提供 <code>lodash</code>:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import _ from 'lodash';</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   // Lodash, now imported by this script</span></span><br><span class=\"line\">    element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+   plugins: [</span></span><br><span class=\"line\"><span class=\"addition\">+     new webpack.ProvidePlugin(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+       lodash: 'lodash'</span></span><br><span class=\"line\"><span class=\"addition\">+     &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   ]</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>以上就是对webpack的配置…</p>\n<blockquote>\n<p>一旦你引用了一次 <code>lodash</code>的实例变量，引入<code>lodash</code> 包并且提供给需要他的模块。</p>\n</blockquote>\n<p>如果我们运行 build ，我们将看到同样的输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO: Include output</span><br></pre></td></tr></table></figure>\n<p>我们还可以使用 <code>ProvidePlugin</code> 通过使用路径数组（路径数组机构如下：<code>[module, child, ...children?]</code>）来配置模块的单个导出。所以让我们想想一下，如果 <code>lodash</code> 的 <code>join</code> 被调用的时候，我们只需要输出这一个方法：<br> So let’s imagine we only wanted to provide the <code>join</code> method from <code>lodash</code> wherever it’s invoked:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"><span class=\"addition\">+   element.innerHTML = join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\"><span class=\"deletion\">-       lodash: 'lodash'</span></span><br><span class=\"line\"><span class=\"addition\">+       join: ['lodash', 'join']</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>通过 <a href=\"/guides/tree-shaking\">Tree Shaking</a> <code>lodash</code>库的其他部分将被优雅的舍去。</p>\n<h2 id=\"局部垫片\"><a href=\"#局部垫片\" class=\"headerlink\" title=\"局部垫片\"></a>局部垫片</h2><p>一些传统模块依赖于 <code>window</code> 对象。更新我们的<code>index.js</code>，作为事例：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+   // Assume we are in the context of `window`</span></span><br><span class=\"line\"><span class=\"addition\">+   this.alert('Hmmm, this probably isn\\'t a great idea...')</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>现在有一个问题，当模块在CommonJS上下文中执行时，<code>this</code> 等于 <code>module.exports</code>。在这个事例中我们将使用 <a href=\"/loaders/imports-loader/\"><code>imports-loader</code></a> 来替换 <code>this</code> ：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"addition\">+   module: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     rules: [</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         test: require.resolve('index.js'),</span></span><br><span class=\"line\"><span class=\"addition\">+         use: 'imports-loader?this=&gt;window'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+     ]</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"全局变量的导出\"><a href=\"#全局变量的导出\" class=\"headerlink\" title=\"全局变量的导出\"></a>全局变量的导出</h2><p>我们通常会创建一个充满了全局变量的库。我们可以在我们的设置中添加一个小模块来演示这个：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">  |- webpack.config.js</span><br><span class=\"line\">  |- /dist</span><br><span class=\"line\">  |- /src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\"><span class=\"addition\">+   |- globals.js</span></span><br><span class=\"line\">  |- /node_modules</span><br></pre></td></tr></table></figure>\n<p><strong>src/globals.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> file = <span class=\"string\">'blah.txt'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> helpers = &#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'test something'</span>); &#125;,</span><br><span class=\"line\">  <span class=\"attr\">parse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parse something'</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，你可能永远不会在自己的代码中如此操作，但是你可能会遇到要使用一下已过时的库，其中包含与上述相似的代码。在这种情况下，我们可以使用 <a href=\"/loaders/exports-loader/\"><code>exports-loader</code></a> 将该全局变量像一般模块那样导出。例如，将 <code>file</code> 导出为 <code>file</code>，<code>helpers.parse</code> 导出为 <code>parse</code>：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('index.js'),</span><br><span class=\"line\">          use: 'imports-loader?this=&gt;window'</span><br><span class=\"line\"><span class=\"deletion\">-       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         test: require.resolve('globals.js'),</span></span><br><span class=\"line\"><span class=\"addition\">+         use: 'exports-loader?file,parse=helpers.parse'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的入口脚本（即 <code>src/index.js</code>）中，<code>import { file, parse } from &#39;./globals.js&#39;;</code> 都应该顺利进行。</p>\n<h2 id=\"加载腻子\"><a href=\"#加载腻子\" class=\"headerlink\" title=\"加载腻子\"></a>加载腻子</h2><p>到目前为止，我们讨论的几乎所有内容都与处理传统包有关。我们继续谈谈我们的第二个话题： <strong>腻子</strong>。</p>\n<p>有很多方法来加载腻子. 例如，要包括 <a href=\"https://babeljs.io/docs/usage/polyfill/\" target=\"_blank\" rel=\"external\"><code>babel-polyfill</code></a>，我们可以简单地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save babel-polyfill</span><br></pre></td></tr></table></figure>\n<p>并<code>import</code>它，以便将其包含在我们的主包中：</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ import 'babel-polyfill';</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>T&gt;请注意，我们没有将<code>import</code>绑定到变量。这是因为腻子只能在其他代码前自行运行。才能允许我们假设某些本机功能存在。</p>\n<p><strong>但是把腻子包括到主包中这种做法并不推荐</strong>，因为这样会让现代浏览器用户下载过多不必要的脚本，降低用户体验。</p>\n<p>现在我们删除 <code>import</code> 并且添加一个新的腻子 <a href=\"https://github.com/github/fetch\" target=\"_blank\" rel=\"external\"><code>whatwg-fetch</code></a> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save whatwg-fetch</span><br></pre></td></tr></table></figure>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import 'babel-polyfill';</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">  |- webpack.config.js</span><br><span class=\"line\">  |- /dist</span><br><span class=\"line\">  |- /src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\">    |- globals.js</span><br><span class=\"line\"><span class=\"addition\">+   |- polyfills.js</span></span><br><span class=\"line\">  |- /node_modules</span><br></pre></td></tr></table></figure>\n<p><strong>src/polyfills.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'whatwg-fetch'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   entry: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+   entry: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     polyfills: './src/polyfills.js',</span></span><br><span class=\"line\"><span class=\"addition\">+     index: './src/index.js'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\"><span class=\"deletion\">-     filename: 'bundle.js',</span></span><br><span class=\"line\"><span class=\"addition\">+     filename: '[name].bundle.js',</span></span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('index.js'),</span><br><span class=\"line\">          use: 'imports-loader?this=&gt;window'</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('globals.js'),</span><br><span class=\"line\">          use: 'exports-loader?file,parse=helpers.parse'</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>有了这个，我们可以添加逻辑来有条件地加载我们的新的 <code>polyfills.bundle.js</code> 文件。您如何做出这一决定取决于您需要支持的技术和浏览器。我们将做一些简单的测试来确定我们的腻子是否需要：</p>\n<p><strong>dist/index.html</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">      &lt;title&gt;Getting Started&lt;/title&gt;</span><br><span class=\"line\"><span class=\"addition\">+     &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+       var modernBrowser = (</span></span><br><span class=\"line\"><span class=\"addition\">+         'fetch' in window &amp;&amp;</span></span><br><span class=\"line\"><span class=\"addition\">+         'assign' in Object</span></span><br><span class=\"line\"><span class=\"addition\">+       );</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+       if ( !modernBrowser ) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         var scriptElement = document.createElement('script');</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+         scriptElement.async = false;</span></span><br><span class=\"line\"><span class=\"addition\">+         scriptElement.src = '/polyfills.bundle.js';</span></span><br><span class=\"line\"><span class=\"addition\">+         document.head.appendChild(scriptElement);</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+     &lt;/script&gt;</span></span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;script src=\"index.bundle.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>Now we can <code>fetch</code> some data within our entry script:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+ fetch('https://jsonplaceholder.typicode.com/users')</span></span><br><span class=\"line\"><span class=\"addition\">+   .then(response =&gt; response.json())</span></span><br><span class=\"line\"><span class=\"addition\">+   .then(json =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     console.log('We retrieved some data! AND we\\'re confident it will work on a variety of browser distributions.')</span></span><br><span class=\"line\"><span class=\"addition\">+     console.log(json)</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   .catch(error =&gt; console.error('Something went wrong when fetching this data: ', error))</span></span><br></pre></td></tr></table></figure>\n<p>如果我们运行build，将会生成一个 <code>polyfills.bundle.js</code> 文件，并且浏览器中的所有内容都应该顺利运行。请注意，这种设置可能会得到改善，因为这只是解决如何把腻子只提供给真正需要它们的用户的一种方法。</p>\n<h2 id=\"进一步的优化\"><a href=\"#进一步的优化\" class=\"headerlink\" title=\"进一步的优化\"></a>进一步的优化</h2><p><code>babel-preset-env</code> 包则是通过一个 <a href=\"https://github.com/ai/browserslist\" target=\"_blank\" rel=\"external\">browserslist</a>来匹配你浏览器，并且转码你浏览器所不支持的的代码。通过<code>useBuiltIns</code> 选项进行预设，默认为 <code>false</code>，通过 <code>import</code> 的方法导入更细粒度的功能来覆盖你的全局 <code>babel-polyfill</code>配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/es7.string.pad-start'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/es7.string.pad-end'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.timers'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.immediate'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.dom.iterable'</span>;</span><br></pre></td></tr></table></figure>\n<p>有关详细信息，请参阅<a href=\"https://github.com/babel/babel-preset-env\" target=\"_blank\" rel=\"external\">知识库</a>。</p>\n<h2 id=\"Node的内部插件\"><a href=\"#Node的内部插件\" class=\"headerlink\" title=\"Node的内部插件\"></a>Node的内部插件</h2><p>Node的内部插件，比如 <code>process</code> 能够根据您的配置文件直接打腻子，而无需使用任何特殊的loaders或插件。 查看<a href=\"/configuration/node\">node配置页面</a>，那里有过多的信息和事例。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>在处理传统模块时，还有一些其他工具可以帮助您。</p>\n<p><a href=\"/loaders/script-loader/\"><code>script-loader</code></a>能够评估你的全局上下文的代码。作用类似于一个 <code>script</code> 的标签容器。在这种模式下，每个正常的库都应该工作。<code>require</code>、<code>module</code> 等等未被定义。</p>\n<p>W&gt;当使用 <code>script-loader</code> 时，将该模块作为字符串添加到捆绑包中。它不会被 <code>webpack</code> 最小化，所以请使用最小化的版本。对于这个加载器添加的库，也么有 <code>devtool</code> 支持。</p>\n<p>当没有AMD/CommonJS版本的模块，并且您想要包括到 <code>dist</code> 中去，你可以在 <a href=\"/configuration/module/#module-noparse\"><code>noParse</code></a> 中标记这个模块。他将告诉webpack引用这个模块不需要匹配或分析 <code>require()</code> 和  <code>import</code> 语法。这种做法也用于提高构建性能。</p>\n<p>W&gt; 任何需要AST的功能， 例如 <code>ProvidePlugin</code>，将不再工作。</p>\n<p>最后，有一些模块支持不同的 <a href=\"/concepts/modules\">模块风格</a>，如AMD，CommonJS和传统。在大多数情况下，他们首先检查 <code>define</code>，然后使用一些古怪的代码来导出属性。在这种情况下，可以通过 <a href=\"/loaders/imports-loader/\"><code>imports-loader</code></a> 设置 <code>define=&gt;false</code> 来强制导入CommonJS路径。</p>\n<hr>\n<blockquote>\n<p>原文：<a href=\"https://webpack.js.org/guides/shimming/\" target=\"_blank\" rel=\"external\">https://webpack.js.org/guides/shimming/</a></p>\n</blockquote>\n","excerpt":"<p>webpack编译器可以理解写入的ES2015模块，CommonJS或AMD的模块。然而，一些第三方库可能会期望全局依赖（例如jQuery的$）。这些库可能还会创建需要导出的全局变量。这些“broken modules”使得shimming发挥了作用。</p>\n<p>W&gt; <strong>我们不建议使用全局变量！</strong> Webpack真正的概念是更多的模块化前端开发。这意味着编写完整包含的隔离模块，而不依赖于隐藏的依赖关系（例如全局变量）。所以请仅在必要时去主要做。</p>\n<p><em>shimming</em> 的另一个使用场景就是，如果您希望使用浏览器的<a href=\"https://en.wikipedia.org/wiki/Polyfill\">polyfill</a>功能来支持更多的用户。在这种情况下，您可能只想将这些Polyfill提供给需要修补的浏览器（即按需加载）。","more":"</p>\n<p>以下文章将介绍这两种用例。</p>\n<p>T&gt;为了简单起见，本指南源于“<a href=\"/guides/getting-started\">Getting Started</a>”中的示例。请确保您在移动之前熟悉该设置。</p>\n<h2 id=\"垫片全局变量\"><a href=\"#垫片全局变量\" class=\"headerlink\" title=\"垫片全局变量\"></a>垫片全局变量</h2><p>我们从第一个使用shimming的全局变量的用例开始。在我们做任何事情之前，我们再来看看我们的项目：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- webpack.config.js</span><br><span class=\"line\">|- /dist</span><br><span class=\"line\">|- /src</span><br><span class=\"line\">  |- index.js</span><br><span class=\"line\">|- /node_modules</span><br></pre></td></tr></table></figure>\n<p>记得我们在使用 <code>lodash</code> ？为了演示目的，我们假设希望在整个应用程序中lodash要作为全局变量。为此我们可以使用<code>ProvidePlugin</code>插件。</p>\n<p><a href=\"/plugins/provide-plugin\"><code>ProvidePlugin</code></a> 使用WebPACK变量的形式使包可以在每个模块编译通过。 如果WebPACK看到变量被使用，它将在最后一个bundle中引入指定的包。下面我们取消 <code>import</code> 改用插件的方式来提供 <code>lodash</code>:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import _ from 'lodash';</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   // Lodash, now imported by this script</span></span><br><span class=\"line\">    element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+   plugins: [</span></span><br><span class=\"line\"><span class=\"addition\">+     new webpack.ProvidePlugin(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+       lodash: 'lodash'</span></span><br><span class=\"line\"><span class=\"addition\">+     &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   ]</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>以上就是对webpack的配置…</p>\n<blockquote>\n<p>一旦你引用了一次 <code>lodash</code>的实例变量，引入<code>lodash</code> 包并且提供给需要他的模块。</p>\n</blockquote>\n<p>如果我们运行 build ，我们将看到同样的输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO: Include output</span><br></pre></td></tr></table></figure>\n<p>我们还可以使用 <code>ProvidePlugin</code> 通过使用路径数组（路径数组机构如下：<code>[module, child, ...children?]</code>）来配置模块的单个导出。所以让我们想想一下，如果 <code>lodash</code> 的 <code>join</code> 被调用的时候，我们只需要输出这一个方法：<br> So let’s imagine we only wanted to provide the <code>join</code> method from <code>lodash</code> wherever it’s invoked:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"><span class=\"addition\">+   element.innerHTML = join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\"><span class=\"deletion\">-       lodash: 'lodash'</span></span><br><span class=\"line\"><span class=\"addition\">+       join: ['lodash', 'join']</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>通过 <a href=\"/guides/tree-shaking\">Tree Shaking</a> <code>lodash</code>库的其他部分将被优雅的舍去。</p>\n<h2 id=\"局部垫片\"><a href=\"#局部垫片\" class=\"headerlink\" title=\"局部垫片\"></a>局部垫片</h2><p>一些传统模块依赖于 <code>window</code> 对象。更新我们的<code>index.js</code>，作为事例：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+   // Assume we are in the context of `window`</span></span><br><span class=\"line\"><span class=\"addition\">+   this.alert('Hmmm, this probably isn\\'t a great idea...')</span></span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>现在有一个问题，当模块在CommonJS上下文中执行时，<code>this</code> 等于 <code>module.exports</code>。在这个事例中我们将使用 <a href=\"/loaders/imports-loader/\"><code>imports-loader</code></a> 来替换 <code>this</code> ：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"addition\">+   module: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     rules: [</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         test: require.resolve('index.js'),</span></span><br><span class=\"line\"><span class=\"addition\">+         use: 'imports-loader?this=&gt;window'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+     ]</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"全局变量的导出\"><a href=\"#全局变量的导出\" class=\"headerlink\" title=\"全局变量的导出\"></a>全局变量的导出</h2><p>我们通常会创建一个充满了全局变量的库。我们可以在我们的设置中添加一个小模块来演示这个：</p>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">  |- webpack.config.js</span><br><span class=\"line\">  |- /dist</span><br><span class=\"line\">  |- /src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\"><span class=\"addition\">+   |- globals.js</span></span><br><span class=\"line\">  |- /node_modules</span><br></pre></td></tr></table></figure>\n<p><strong>src/globals.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> file = <span class=\"string\">'blah.txt'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> helpers = &#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'test something'</span>); &#125;,</span><br><span class=\"line\">  <span class=\"attr\">parse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'parse something'</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，你可能永远不会在自己的代码中如此操作，但是你可能会遇到要使用一下已过时的库，其中包含与上述相似的代码。在这种情况下，我们可以使用 <a href=\"/loaders/exports-loader/\"><code>exports-loader</code></a> 将该全局变量像一般模块那样导出。例如，将 <code>file</code> 导出为 <code>file</code>，<code>helpers.parse</code> 导出为 <code>parse</code>：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    entry: './src/index.js',</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: 'bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('index.js'),</span><br><span class=\"line\">          use: 'imports-loader?this=&gt;window'</span><br><span class=\"line\"><span class=\"deletion\">-       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+       &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         test: require.resolve('globals.js'),</span></span><br><span class=\"line\"><span class=\"addition\">+         use: 'exports-loader?file,parse=helpers.parse'</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的入口脚本（即 <code>src/index.js</code>）中，<code>import { file, parse } from &#39;./globals.js&#39;;</code> 都应该顺利进行。</p>\n<h2 id=\"加载腻子\"><a href=\"#加载腻子\" class=\"headerlink\" title=\"加载腻子\"></a>加载腻子</h2><p>到目前为止，我们讨论的几乎所有内容都与处理传统包有关。我们继续谈谈我们的第二个话题： <strong>腻子</strong>。</p>\n<p>有很多方法来加载腻子. 例如，要包括 <a href=\"https://babeljs.io/docs/usage/polyfill/\"><code>babel-polyfill</code></a>，我们可以简单地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save babel-polyfill</span><br></pre></td></tr></table></figure>\n<p>并<code>import</code>它，以便将其包含在我们的主包中：</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ import 'babel-polyfill';</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p>T&gt;请注意，我们没有将<code>import</code>绑定到变量。这是因为腻子只能在其他代码前自行运行。才能允许我们假设某些本机功能存在。</p>\n<p><strong>但是把腻子包括到主包中这种做法并不推荐</strong>，因为这样会让现代浏览器用户下载过多不必要的脚本，降低用户体验。</p>\n<p>现在我们删除 <code>import</code> 并且添加一个新的腻子 <a href=\"https://github.com/github/fetch\"><code>whatwg-fetch</code></a> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save whatwg-fetch</span><br></pre></td></tr></table></figure>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import 'babel-polyfill';</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n<p><strong>project</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">  |- webpack.config.js</span><br><span class=\"line\">  |- /dist</span><br><span class=\"line\">  |- /src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\">    |- globals.js</span><br><span class=\"line\"><span class=\"addition\">+   |- polyfills.js</span></span><br><span class=\"line\">  |- /node_modules</span><br></pre></td></tr></table></figure>\n<p><strong>src/polyfills.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'whatwg-fetch'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   entry: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+   entry: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     polyfills: './src/polyfills.js',</span></span><br><span class=\"line\"><span class=\"addition\">+     index: './src/index.js'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\"><span class=\"deletion\">-     filename: 'bundle.js',</span></span><br><span class=\"line\"><span class=\"addition\">+     filename: '[name].bundle.js',</span></span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist')</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('index.js'),</span><br><span class=\"line\">          use: 'imports-loader?this=&gt;window'</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: require.resolve('globals.js'),</span><br><span class=\"line\">          use: 'exports-loader?file,parse=helpers.parse'</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        join: ['lodash', 'join']</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>有了这个，我们可以添加逻辑来有条件地加载我们的新的 <code>polyfills.bundle.js</code> 文件。您如何做出这一决定取决于您需要支持的技术和浏览器。我们将做一些简单的测试来确定我们的腻子是否需要：</p>\n<p><strong>dist/index.html</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">      &lt;title&gt;Getting Started&lt;/title&gt;</span><br><span class=\"line\"><span class=\"addition\">+     &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+       var modernBrowser = (</span></span><br><span class=\"line\"><span class=\"addition\">+         'fetch' in window &amp;&amp;</span></span><br><span class=\"line\"><span class=\"addition\">+         'assign' in Object</span></span><br><span class=\"line\"><span class=\"addition\">+       );</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+       if ( !modernBrowser ) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         var scriptElement = document.createElement('script');</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+         scriptElement.async = false;</span></span><br><span class=\"line\"><span class=\"addition\">+         scriptElement.src = '/polyfills.bundle.js';</span></span><br><span class=\"line\"><span class=\"addition\">+         document.head.appendChild(scriptElement);</span></span><br><span class=\"line\"><span class=\"addition\">+       &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+     &lt;/script&gt;</span></span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;script src=\"index.bundle.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>Now we can <code>fetch</code> some data within our entry script:</p>\n<p><strong>src/index.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function component() &#123;</span><br><span class=\"line\">    var element = document.createElement('div');</span><br><span class=\"line\"></span><br><span class=\"line\">    element.innerHTML = join(['Hello', 'webpack'], ' ');</span><br><span class=\"line\"></span><br><span class=\"line\">    return element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.appendChild(component());</span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+ fetch('https://jsonplaceholder.typicode.com/users')</span></span><br><span class=\"line\"><span class=\"addition\">+   .then(response =&gt; response.json())</span></span><br><span class=\"line\"><span class=\"addition\">+   .then(json =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     console.log('We retrieved some data! AND we\\'re confident it will work on a variety of browser distributions.')</span></span><br><span class=\"line\"><span class=\"addition\">+     console.log(json)</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   .catch(error =&gt; console.error('Something went wrong when fetching this data: ', error))</span></span><br></pre></td></tr></table></figure>\n<p>如果我们运行build，将会生成一个 <code>polyfills.bundle.js</code> 文件，并且浏览器中的所有内容都应该顺利运行。请注意，这种设置可能会得到改善，因为这只是解决如何把腻子只提供给真正需要它们的用户的一种方法。</p>\n<h2 id=\"进一步的优化\"><a href=\"#进一步的优化\" class=\"headerlink\" title=\"进一步的优化\"></a>进一步的优化</h2><p><code>babel-preset-env</code> 包则是通过一个 <a href=\"https://github.com/ai/browserslist\">browserslist</a>来匹配你浏览器，并且转码你浏览器所不支持的的代码。通过<code>useBuiltIns</code> 选项进行预设，默认为 <code>false</code>，通过 <code>import</code> 的方法导入更细粒度的功能来覆盖你的全局 <code>babel-polyfill</code>配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/es7.string.pad-start'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/es7.string.pad-end'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.timers'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.immediate'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/modules/web.dom.iterable'</span>;</span><br></pre></td></tr></table></figure>\n<p>有关详细信息，请参阅<a href=\"https://github.com/babel/babel-preset-env\">知识库</a>。</p>\n<h2 id=\"Node的内部插件\"><a href=\"#Node的内部插件\" class=\"headerlink\" title=\"Node的内部插件\"></a>Node的内部插件</h2><p>Node的内部插件，比如 <code>process</code> 能够根据您的配置文件直接打腻子，而无需使用任何特殊的loaders或插件。 查看<a href=\"/configuration/node\">node配置页面</a>，那里有过多的信息和事例。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>在处理传统模块时，还有一些其他工具可以帮助您。</p>\n<p><a href=\"/loaders/script-loader/\"><code>script-loader</code></a>能够评估你的全局上下文的代码。作用类似于一个 <code>script</code> 的标签容器。在这种模式下，每个正常的库都应该工作。<code>require</code>、<code>module</code> 等等未被定义。</p>\n<p>W&gt;当使用 <code>script-loader</code> 时，将该模块作为字符串添加到捆绑包中。它不会被 <code>webpack</code> 最小化，所以请使用最小化的版本。对于这个加载器添加的库，也么有 <code>devtool</code> 支持。</p>\n<p>当没有AMD/CommonJS版本的模块，并且您想要包括到 <code>dist</code> 中去，你可以在 <a href=\"/configuration/module/#module-noparse\"><code>noParse</code></a> 中标记这个模块。他将告诉webpack引用这个模块不需要匹配或分析 <code>require()</code> 和  <code>import</code> 语法。这种做法也用于提高构建性能。</p>\n<p>W&gt; 任何需要AST的功能， 例如 <code>ProvidePlugin</code>，将不再工作。</p>\n<p>最后，有一些模块支持不同的 <a href=\"/concepts/modules\">模块风格</a>，如AMD，CommonJS和传统。在大多数情况下，他们首先检查 <code>define</code>，然后使用一些古怪的代码来导出属性。在这种情况下，可以通过 <a href=\"/loaders/imports-loader/\"><code>imports-loader</code></a> 设置 <code>define=&gt;false</code> 来强制导入CommonJS路径。</p>\n<hr>\n<blockquote>\n<p>原文：<a href=\"https://webpack.js.org/guides/shimming/\">https://webpack.js.org/guides/shimming/</a></p>\n</blockquote>"},{"title":"react通过redux和redux-saga管理状态","date":"2017-12-16T11:53:12.000Z","_content":"## Redux\n### 应用场景\n* 某个组件的状态，需要共享\n* 某个状态需要在任何地方都可以拿到\n* 一个组件需要改变全局状态\n* 一个组件需要改变另一个组件的状态<!--more-->\n### 设计思想\n* Web 应用是一个状态机，视图与状态是一一对应的。(state)\n* 所有的状态，保存在一个对象里面。（store）\n\n![reduxe组件沟通](/0/reducer.png)\n\n组件的动作如果dispatch去调用全局纯函数reducer，reducer来修改全局对象的store里的state，组件重新渲染。\n\n解决了跨组件的状态交互。\n## Redux-saga\n### effect副作用函数（异步函数）\n![effect](/0/effect.png)\n\n* Generator 函数的语法 \n\n```javascript\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n>callback --> Promise then 连死调用 --> Generator yield 函数同步化\n","source":"_posts/react通过redux和redux-saga管理状态.md","raw":"---\ntitle: react通过redux和redux-saga管理状态\ndate: 2017-12-16 19:53:12\ntags: ['reduxe','redux-saga','effect','dispatch','reducer']\n---\n## Redux\n### 应用场景\n* 某个组件的状态，需要共享\n* 某个状态需要在任何地方都可以拿到\n* 一个组件需要改变全局状态\n* 一个组件需要改变另一个组件的状态<!--more-->\n### 设计思想\n* Web 应用是一个状态机，视图与状态是一一对应的。(state)\n* 所有的状态，保存在一个对象里面。（store）\n\n![reduxe组件沟通](/0/reducer.png)\n\n组件的动作如果dispatch去调用全局纯函数reducer，reducer来修改全局对象的store里的state，组件重新渲染。\n\n解决了跨组件的状态交互。\n## Redux-saga\n### effect副作用函数（异步函数）\n![effect](/0/effect.png)\n\n* Generator 函数的语法 \n\n```javascript\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n>callback --> Promise then 连死调用 --> Generator yield 函数同步化\n","slug":"react通过redux和redux-saga管理状态","published":1,"updated":"2017-12-16T11:56:36.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1w3000hm6i6grf886ix","content":"<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>某个组件的状态，需要共享</li>\n<li>某个状态需要在任何地方都可以拿到</li>\n<li>一个组件需要改变全局状态</li>\n<li>一个组件需要改变另一个组件的状态<a id=\"more\"></a><h3 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h3></li>\n<li>Web 应用是一个状态机，视图与状态是一一对应的。(state)</li>\n<li>所有的状态，保存在一个对象里面。（store）</li>\n</ul>\n<p><img src=\"/0/reducer.png\" alt=\"reduxe组件沟通\"></p>\n<p>组件的动作如果dispatch去调用全局纯函数reducer，reducer来修改全局对象的store里的state，组件重新渲染。</p>\n<p>解决了跨组件的状态交互。</p>\n<h2 id=\"Redux-saga\"><a href=\"#Redux-saga\" class=\"headerlink\" title=\"Redux-saga\"></a>Redux-saga</h2><h3 id=\"effect副作用函数（异步函数）\"><a href=\"#effect副作用函数（异步函数）\" class=\"headerlink\" title=\"effect副作用函数（异步函数）\"></a>effect副作用函数（异步函数）</h3><p><img src=\"/0/effect.png\" alt=\"effect\"></p>\n<ul>\n<li>Generator 函数的语法 </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</span><br><span class=\"line\"></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 'hello', done: false &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 'world', done: false &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 'ending', done: true &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>callback –&gt; Promise then 连死调用 –&gt; Generator yield 函数同步化</p>\n</blockquote>\n","excerpt":"<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>某个组件的状态，需要共享</li>\n<li>某个状态需要在任何地方都可以拿到</li>\n<li>一个组件需要改变全局状态</li>\n<li>一个组件需要改变另一个组件的状态","more":"<h3 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h3></li>\n<li>Web 应用是一个状态机，视图与状态是一一对应的。(state)</li>\n<li>所有的状态，保存在一个对象里面。（store）</li>\n</ul>\n<p><img src=\"/0/reducer.png\" alt=\"reduxe组件沟通\"></p>\n<p>组件的动作如果dispatch去调用全局纯函数reducer，reducer来修改全局对象的store里的state，组件重新渲染。</p>\n<p>解决了跨组件的状态交互。</p>\n<h2 id=\"Redux-saga\"><a href=\"#Redux-saga\" class=\"headerlink\" title=\"Redux-saga\"></a>Redux-saga</h2><h3 id=\"effect副作用函数（异步函数）\"><a href=\"#effect副作用函数（异步函数）\" class=\"headerlink\" title=\"effect副作用函数（异步函数）\"></a>effect副作用函数（异步函数）</h3><p><img src=\"/0/effect.png\" alt=\"effect\"></p>\n<ul>\n<li>Generator 函数的语法 </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</span><br><span class=\"line\"></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 'hello', done: false &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 'world', done: false &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 'ending', done: true &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>callback –&gt; Promise then 连死调用 –&gt; Generator yield 函数同步化</p>\n</blockquote>"},{"title":"npm对项目依赖包版本管理的机制","date":"2017-12-11T04:00:01.000Z","_content":"\n## semver\n[语义化版本控制规范](https://semver.org/lang/zh-CN/)\n\n版本格式：主版本号.次版本号.修订号，版本号(major, minor, patch)递增规则如下：\n1. 主版本号：当你做了不兼容的 API 修改，\n2. 次版本号：当你做了向下兼容的功能性新增，\n3. 修订号：当你做了向下兼容的问题修正。<!--more-->\n\n\n#### Versions\n版本是指例如 0.4.1、1.2.7、1.2.4-beta.0 这样表示包的特定版本的字符串。\n\n\n#### Ranges\n范围则是对满足特定规则的版本的一种表示，例如 1.2.3-2.3.4、1.x、^0.2、>1.4.0\n\n* `<` 小于某个版\n```json\n{\n    \"babel\": \"<6.5.2\",\n}\n```\n\n* `<=` 小于等于某个版本\n```json\n{\n    \"babel\": \"<=6.5.2\",\n}\n```\n\n* `>` 大于某个版本\n```json\n{\n    \"babel\": \">6.5.2\",\n}\n```\n\n* `>=` 大于等于某个版本\n```json\n{\n    \"babel\": \">=6.5.2\",\n}\n```\n\n* `=` 等于某个版本\n```json\n{\n    \"babel\": \"=6.5.2\",\n}\n```\n\n* `X, x,*` 限定主版本号和次版本号\n>* \\* := >=0.0.0（任何版本满足）\n>* 1.x := >=1.0.0 <2.0.0 (匹配的主要版本)\n>* 1.2.x := >=1.2.0 <1.3.0 (匹配的主要和次要版本)\n>* \"\" (空字符) := * := >=0.0.0\n>* 1 := 1.x.x := >=1.0.0 <2.0.0\n>* 1.2 := 1.2.x := >=1.2.0 <1.3.0\n\n```json\n{\n    \"babel\": \"~6.5.x\",\n}\n```\n\n* `~` 限定主版本号和次版本号\n>* ~1.2.3 := >=1.2.3 <1.(2+1).0 := >=1.2.3 <1.3.0\n>* ~1.2 := >=1.2.0 <1.(2+1).0 := >=1.2.0 <1.3.0 (等同于 1.2.x)\n>* ~1 := >=1.0.0 <(1+1).0.0 := >=1.0.0 <2.0.0 (等同于 1.x)\n>* ~0.2.3 := >=0.2.3 <0.(2+1).0 := >=0.2.3 <0.3.0\n>* ~0.2 := >=0.2.0 <0.(2+1).0 := >=0.2.0 <0.3.0 (等同于 0.2.x)\n>* ~0 := >=0.0.0 <(0+1).0.0 := >=0.0.0 <1.0.0 (等同于 0.x)\n\n```json\n{\n    \"babel\": \"~6.5.2\",\n}\n```\n\n* `^` 允许变化最左边的非零位的版本位\n>* ^1.2.3 := >=1.2.3 <2.0.0\n>* ^0.2.3 := >=0.2.3 <0.3.0\n>* ^0.0.3 := >=0.0.3 <0.0.4\n>* ^1.2.x := >=1.2.0 <2.0.0\n>* ^0.0.x := >=0.0.0 <0.1.0\n>* ^0.0 := >=0.0.0 <0.1.0\n>* ^1.x := >=1.0.0 <2.0.0\n>* ^0.x := >=0.0.0 <1.0.0\n\n```json\n{\n    \"babel\": \"^6.5.2\",\n}\n```\n\n#### npm install 的版本选择策略\n* package.json没有对应包 install 没有限定版本：安装源的最新版本\n* package.json有对应包 install 没有限定版本：package.json根据semver安装版本\n* package.json没有对应包 install 限定版本：安装制定版本 package.json写入以^开头的版本依赖\n* package.json有对应包 install 限定版本：安装制定版本 package.json依据按住改写以^开头的版本依赖","source":"_posts/npm对包版本管理的机制.md","raw":"---\ntitle: npm对项目依赖包版本管理的机制\ndate: 2017-12-11 12:00:01\ntags: ['npm','semver','package','包版本管理']\ncategory: 'coding'\n---\n\n## semver\n[语义化版本控制规范](https://semver.org/lang/zh-CN/)\n\n版本格式：主版本号.次版本号.修订号，版本号(major, minor, patch)递增规则如下：\n1. 主版本号：当你做了不兼容的 API 修改，\n2. 次版本号：当你做了向下兼容的功能性新增，\n3. 修订号：当你做了向下兼容的问题修正。<!--more-->\n\n\n#### Versions\n版本是指例如 0.4.1、1.2.7、1.2.4-beta.0 这样表示包的特定版本的字符串。\n\n\n#### Ranges\n范围则是对满足特定规则的版本的一种表示，例如 1.2.3-2.3.4、1.x、^0.2、>1.4.0\n\n* `<` 小于某个版\n```json\n{\n    \"babel\": \"<6.5.2\",\n}\n```\n\n* `<=` 小于等于某个版本\n```json\n{\n    \"babel\": \"<=6.5.2\",\n}\n```\n\n* `>` 大于某个版本\n```json\n{\n    \"babel\": \">6.5.2\",\n}\n```\n\n* `>=` 大于等于某个版本\n```json\n{\n    \"babel\": \">=6.5.2\",\n}\n```\n\n* `=` 等于某个版本\n```json\n{\n    \"babel\": \"=6.5.2\",\n}\n```\n\n* `X, x,*` 限定主版本号和次版本号\n>* \\* := >=0.0.0（任何版本满足）\n>* 1.x := >=1.0.0 <2.0.0 (匹配的主要版本)\n>* 1.2.x := >=1.2.0 <1.3.0 (匹配的主要和次要版本)\n>* \"\" (空字符) := * := >=0.0.0\n>* 1 := 1.x.x := >=1.0.0 <2.0.0\n>* 1.2 := 1.2.x := >=1.2.0 <1.3.0\n\n```json\n{\n    \"babel\": \"~6.5.x\",\n}\n```\n\n* `~` 限定主版本号和次版本号\n>* ~1.2.3 := >=1.2.3 <1.(2+1).0 := >=1.2.3 <1.3.0\n>* ~1.2 := >=1.2.0 <1.(2+1).0 := >=1.2.0 <1.3.0 (等同于 1.2.x)\n>* ~1 := >=1.0.0 <(1+1).0.0 := >=1.0.0 <2.0.0 (等同于 1.x)\n>* ~0.2.3 := >=0.2.3 <0.(2+1).0 := >=0.2.3 <0.3.0\n>* ~0.2 := >=0.2.0 <0.(2+1).0 := >=0.2.0 <0.3.0 (等同于 0.2.x)\n>* ~0 := >=0.0.0 <(0+1).0.0 := >=0.0.0 <1.0.0 (等同于 0.x)\n\n```json\n{\n    \"babel\": \"~6.5.2\",\n}\n```\n\n* `^` 允许变化最左边的非零位的版本位\n>* ^1.2.3 := >=1.2.3 <2.0.0\n>* ^0.2.3 := >=0.2.3 <0.3.0\n>* ^0.0.3 := >=0.0.3 <0.0.4\n>* ^1.2.x := >=1.2.0 <2.0.0\n>* ^0.0.x := >=0.0.0 <0.1.0\n>* ^0.0 := >=0.0.0 <0.1.0\n>* ^1.x := >=1.0.0 <2.0.0\n>* ^0.x := >=0.0.0 <1.0.0\n\n```json\n{\n    \"babel\": \"^6.5.2\",\n}\n```\n\n#### npm install 的版本选择策略\n* package.json没有对应包 install 没有限定版本：安装源的最新版本\n* package.json有对应包 install 没有限定版本：package.json根据semver安装版本\n* package.json没有对应包 install 限定版本：安装制定版本 package.json写入以^开头的版本依赖\n* package.json有对应包 install 限定版本：安装制定版本 package.json依据按住改写以^开头的版本依赖","slug":"npm对包版本管理的机制","published":1,"updated":"2017-12-16T11:50:34.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1w5000km6i6wqmjy6b6","content":"<h2 id=\"semver\"><a href=\"#semver\" class=\"headerlink\" title=\"semver\"></a>semver</h2><p><a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"external\">语义化版本控制规范</a></p>\n<p>版本格式：主版本号.次版本号.修订号，版本号(major, minor, patch)递增规则如下：</p>\n<ol>\n<li>主版本号：当你做了不兼容的 API 修改，</li>\n<li>次版本号：当你做了向下兼容的功能性新增，</li>\n<li>修订号：当你做了向下兼容的问题修正。<a id=\"more\"></a></li>\n</ol>\n<h4 id=\"Versions\"><a href=\"#Versions\" class=\"headerlink\" title=\"Versions\"></a>Versions</h4><p>版本是指例如 0.4.1、1.2.7、1.2.4-beta.0 这样表示包的特定版本的字符串。</p>\n<h4 id=\"Ranges\"><a href=\"#Ranges\" class=\"headerlink\" title=\"Ranges\"></a>Ranges</h4><p>范围则是对满足特定规则的版本的一种表示，例如 1.2.3-2.3.4、1.x、^0.2、&gt;1.4.0</p>\n<ul>\n<li><p><code>&lt;</code> 小于某个版</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"&lt;6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;=</code> 小于等于某个版本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"&lt;=6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&gt;</code> 大于某个版本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"&gt;6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&gt;=</code> 大于等于某个版本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"&gt;=6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>=</code> 等于某个版本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"=6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>X, x,*</code> 限定主版本号和次版本号</p>\n<blockquote>\n<ul>\n<li>* := &gt;=0.0.0（任何版本满足）</li>\n<li>1.x := &gt;=1.0.0 &lt;2.0.0 (匹配的主要版本)</li>\n<li>1.2.x := &gt;=1.2.0 &lt;1.3.0 (匹配的主要和次要版本)</li>\n<li>“” (空字符) := * := &gt;=0.0.0</li>\n<li>1 := 1.x.x := &gt;=1.0.0 &lt;2.0.0</li>\n<li>1.2 := 1.2.x := &gt;=1.2.0 &lt;1.3.0</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"~6.5.x\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>~</code> 限定主版本号和次版本号<blockquote>\n<ul>\n<li>~1.2.3 := &gt;=1.2.3 <1.(2+1).0 :=\"\">=1.2.3 &lt;1.3.0</1.(2+1).0></li>\n<li>~1.2 := &gt;=1.2.0 <1.(2+1).0 :=\"\">=1.2.0 &lt;1.3.0 (等同于 1.2.x)</1.(2+1).0></li>\n<li>~1 := &gt;=1.0.0 &lt;(1+1).0.0 := &gt;=1.0.0 &lt;2.0.0 (等同于 1.x)</li>\n<li>~0.2.3 := &gt;=0.2.3 <0.(2+1).0 :=\"\">=0.2.3 &lt;0.3.0</0.(2+1).0></li>\n<li>~0.2 := &gt;=0.2.0 <0.(2+1).0 :=\"\">=0.2.0 &lt;0.3.0 (等同于 0.2.x)</0.(2+1).0></li>\n<li>~0 := &gt;=0.0.0 &lt;(0+1).0.0 := &gt;=0.0.0 &lt;1.0.0 (等同于 0.x)</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"~6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>^</code> 允许变化最左边的非零位的版本位<blockquote>\n<ul>\n<li>^1.2.3 := &gt;=1.2.3 &lt;2.0.0</li>\n<li>^0.2.3 := &gt;=0.2.3 &lt;0.3.0</li>\n<li>^0.0.3 := &gt;=0.0.3 &lt;0.0.4</li>\n<li>^1.2.x := &gt;=1.2.0 &lt;2.0.0</li>\n<li>^0.0.x := &gt;=0.0.0 &lt;0.1.0</li>\n<li>^0.0 := &gt;=0.0.0 &lt;0.1.0</li>\n<li>^1.x := &gt;=1.0.0 &lt;2.0.0</li>\n<li>^0.x := &gt;=0.0.0 &lt;1.0.0</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"^6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"npm-install-的版本选择策略\"><a href=\"#npm-install-的版本选择策略\" class=\"headerlink\" title=\"npm install 的版本选择策略\"></a>npm install 的版本选择策略</h4><ul>\n<li>package.json没有对应包 install 没有限定版本：安装源的最新版本</li>\n<li>package.json有对应包 install 没有限定版本：package.json根据semver安装版本</li>\n<li>package.json没有对应包 install 限定版本：安装制定版本 package.json写入以^开头的版本依赖</li>\n<li>package.json有对应包 install 限定版本：安装制定版本 package.json依据按住改写以^开头的版本依赖</li>\n</ul>\n","excerpt":"<h2 id=\"semver\"><a href=\"#semver\" class=\"headerlink\" title=\"semver\"></a>semver</h2><p><a href=\"https://semver.org/lang/zh-CN/\">语义化版本控制规范</a></p>\n<p>版本格式：主版本号.次版本号.修订号，版本号(major, minor, patch)递增规则如下：</p>\n<ol>\n<li>主版本号：当你做了不兼容的 API 修改，</li>\n<li>次版本号：当你做了向下兼容的功能性新增，</li>\n<li>修订号：当你做了向下兼容的问题修正。","more":"</li>\n</ol>\n<h4 id=\"Versions\"><a href=\"#Versions\" class=\"headerlink\" title=\"Versions\"></a>Versions</h4><p>版本是指例如 0.4.1、1.2.7、1.2.4-beta.0 这样表示包的特定版本的字符串。</p>\n<h4 id=\"Ranges\"><a href=\"#Ranges\" class=\"headerlink\" title=\"Ranges\"></a>Ranges</h4><p>范围则是对满足特定规则的版本的一种表示，例如 1.2.3-2.3.4、1.x、^0.2、&gt;1.4.0</p>\n<ul>\n<li><p><code>&lt;</code> 小于某个版</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"&lt;6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&lt;=</code> 小于等于某个版本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"&lt;=6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&gt;</code> 大于某个版本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"&gt;6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&gt;=</code> 大于等于某个版本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"&gt;=6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>=</code> 等于某个版本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"=6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>X, x,*</code> 限定主版本号和次版本号</p>\n<blockquote>\n<ul>\n<li>* := &gt;=0.0.0（任何版本满足）</li>\n<li>1.x := &gt;=1.0.0 &lt;2.0.0 (匹配的主要版本)</li>\n<li>1.2.x := &gt;=1.2.0 &lt;1.3.0 (匹配的主要和次要版本)</li>\n<li>“” (空字符) := * := &gt;=0.0.0</li>\n<li>1 := 1.x.x := &gt;=1.0.0 &lt;2.0.0</li>\n<li>1.2 := 1.2.x := &gt;=1.2.0 &lt;1.3.0</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"~6.5.x\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>~</code> 限定主版本号和次版本号<blockquote>\n<ul>\n<li>~1.2.3 := &gt;=1.2.3 <1.(2+1).0 := >=1.2.3 &lt;1.3.0</li>\n<li>~1.2 := &gt;=1.2.0 <1.(2+1).0 := >=1.2.0 &lt;1.3.0 (等同于 1.2.x)</li>\n<li>~1 := &gt;=1.0.0 &lt;(1+1).0.0 := &gt;=1.0.0 &lt;2.0.0 (等同于 1.x)</li>\n<li>~0.2.3 := &gt;=0.2.3 <0.(2+1).0 := >=0.2.3 &lt;0.3.0</li>\n<li>~0.2 := &gt;=0.2.0 <0.(2+1).0 := >=0.2.0 &lt;0.3.0 (等同于 0.2.x)</li>\n<li>~0 := &gt;=0.0.0 &lt;(0+1).0.0 := &gt;=0.0.0 &lt;1.0.0 (等同于 0.x)</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"~6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>^</code> 允许变化最左边的非零位的版本位<blockquote>\n<ul>\n<li>^1.2.3 := &gt;=1.2.3 &lt;2.0.0</li>\n<li>^0.2.3 := &gt;=0.2.3 &lt;0.3.0</li>\n<li>^0.0.3 := &gt;=0.0.3 &lt;0.0.4</li>\n<li>^1.2.x := &gt;=1.2.0 &lt;2.0.0</li>\n<li>^0.0.x := &gt;=0.0.0 &lt;0.1.0</li>\n<li>^0.0 := &gt;=0.0.0 &lt;0.1.0</li>\n<li>^1.x := &gt;=1.0.0 &lt;2.0.0</li>\n<li>^0.x := &gt;=0.0.0 &lt;1.0.0</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel\"</span>: <span class=\"string\">\"^6.5.2\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"npm-install-的版本选择策略\"><a href=\"#npm-install-的版本选择策略\" class=\"headerlink\" title=\"npm install 的版本选择策略\"></a>npm install 的版本选择策略</h4><ul>\n<li>package.json没有对应包 install 没有限定版本：安装源的最新版本</li>\n<li>package.json有对应包 install 没有限定版本：package.json根据semver安装版本</li>\n<li>package.json没有对应包 install 限定版本：安装制定版本 package.json写入以^开头的版本依赖</li>\n<li>package.json有对应包 install 限定版本：安装制定版本 package.json依据按住改写以^开头的版本依赖</li>\n</ul>"},{"title":"ubuntu安装Jenkins","date":"2017-12-06T11:40:19.000Z","_content":"\n## A. 首先查看是否安装了`JDK`和`JRE`（建议`openjdk-7-jre`和`openjdk-7-jdk`）：\n\n```bash\njava -version\n```\n如果没有安装，执行：\n\n1.更新包指数\n\n```bash\nsudo apt-get update\n```\n\n2.安装Java运行时环境\n\n```bash\nsudo apt-get install default-jre\n```\n\n3.安装JDK\n\n```bash\nsudo apt-get install default-jdk\n```\n<!--more-->\n## B. 下面的步骤是正式安装`Jenkins`：\n1.获取秘钥\n```bash\nwget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -\n```\n\n2.添加源列表\n```bash\nsudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'\n```\n\n3.更新\n```bash\nsudo apt-get update\n```\n\n4.安装\n```bash\nsudo apt-get install jenkins\n```\n\nJenkins服务默认运行在8080端口，如果Jenkins服务不能启动，可以编辑：\n```bash\n/etc/default/jenkins\n```\n替换\n```txt\nHTTP_PORT=8080\n```\n为\n```txt\nHTTP_PORT=8000\n```\n8000为你所希望Jenkins服务的端口\n\n5.打开浏览器输了你的主机ip和Jenkins的服务端口如：192.168.1.22:8080\n\n6.页面会索要一个key，key的地址 `/var/lib/jenkins/secrets/initialAdminPassword`","source":"_posts/ubuntu安装Jenkins.md","raw":"---\ntitle: ubuntu安装Jenkins\ndate: 2017-12-06 19:40:19\ntags: ['CI','持续集成','jenkins','continuous integration','ubuntu']\ncategory: 'coding'\n---\n\n## A. 首先查看是否安装了`JDK`和`JRE`（建议`openjdk-7-jre`和`openjdk-7-jdk`）：\n\n```bash\njava -version\n```\n如果没有安装，执行：\n\n1.更新包指数\n\n```bash\nsudo apt-get update\n```\n\n2.安装Java运行时环境\n\n```bash\nsudo apt-get install default-jre\n```\n\n3.安装JDK\n\n```bash\nsudo apt-get install default-jdk\n```\n<!--more-->\n## B. 下面的步骤是正式安装`Jenkins`：\n1.获取秘钥\n```bash\nwget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -\n```\n\n2.添加源列表\n```bash\nsudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'\n```\n\n3.更新\n```bash\nsudo apt-get update\n```\n\n4.安装\n```bash\nsudo apt-get install jenkins\n```\n\nJenkins服务默认运行在8080端口，如果Jenkins服务不能启动，可以编辑：\n```bash\n/etc/default/jenkins\n```\n替换\n```txt\nHTTP_PORT=8080\n```\n为\n```txt\nHTTP_PORT=8000\n```\n8000为你所希望Jenkins服务的端口\n\n5.打开浏览器输了你的主机ip和Jenkins的服务端口如：192.168.1.22:8080\n\n6.页面会索要一个key，key的地址 `/var/lib/jenkins/secrets/initialAdminPassword`","slug":"ubuntu安装Jenkins","published":1,"updated":"2017-12-16T11:50:34.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1w9000mm6i68f6kes2y","content":"<h2 id=\"A-首先查看是否安装了JDK和JRE（建议openjdk-7-jre和openjdk-7-jdk）：\"><a href=\"#A-首先查看是否安装了JDK和JRE（建议openjdk-7-jre和openjdk-7-jdk）：\" class=\"headerlink\" title=\"A. 首先查看是否安装了JDK和JRE（建议openjdk-7-jre和openjdk-7-jdk）：\"></a>A. 首先查看是否安装了<code>JDK</code>和<code>JRE</code>（建议<code>openjdk-7-jre</code>和<code>openjdk-7-jdk</code>）：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>如果没有安装，执行：</p>\n<p>1.更新包指数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>2.安装Java运行时环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install default-jre</span><br></pre></td></tr></table></figure>\n<p>3.安装JDK</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install default-jdk</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"B-下面的步骤是正式安装Jenkins：\"><a href=\"#B-下面的步骤是正式安装Jenkins：\" class=\"headerlink\" title=\"B. 下面的步骤是正式安装Jenkins：\"></a>B. 下面的步骤是正式安装<code>Jenkins</code>：</h2><p>1.获取秘钥<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></p>\n<p>2.添加源列表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c <span class=\"string\">'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'</span></span><br></pre></td></tr></table></figure></p>\n<p>3.更新<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p>4.安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure></p>\n<p>Jenkins服务默认运行在8080端口，如果Jenkins服务不能启动，可以编辑：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/default/jenkins</span><br></pre></td></tr></table></figure></p>\n<p>替换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP_PORT=8080</span><br></pre></td></tr></table></figure></p>\n<p>为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP_PORT=8000</span><br></pre></td></tr></table></figure></p>\n<p>8000为你所希望Jenkins服务的端口</p>\n<p>5.打开浏览器输了你的主机ip和Jenkins的服务端口如：192.168.1.22:8080</p>\n<p>6.页面会索要一个key，key的地址 <code>/var/lib/jenkins/secrets/initialAdminPassword</code></p>\n","excerpt":"<h2 id=\"A-首先查看是否安装了JDK和JRE（建议openjdk-7-jre和openjdk-7-jdk）：\"><a href=\"#A-首先查看是否安装了JDK和JRE（建议openjdk-7-jre和openjdk-7-jdk）：\" class=\"headerlink\" title=\"A. 首先查看是否安装了JDK和JRE（建议openjdk-7-jre和openjdk-7-jdk）：\"></a>A. 首先查看是否安装了<code>JDK</code>和<code>JRE</code>（建议<code>openjdk-7-jre</code>和<code>openjdk-7-jdk</code>）：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>如果没有安装，执行：</p>\n<p>1.更新包指数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>2.安装Java运行时环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install default-jre</span><br></pre></td></tr></table></figure>\n<p>3.安装JDK</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install default-jdk</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"B-下面的步骤是正式安装Jenkins：\"><a href=\"#B-下面的步骤是正式安装Jenkins：\" class=\"headerlink\" title=\"B. 下面的步骤是正式安装Jenkins：\"></a>B. 下面的步骤是正式安装<code>Jenkins</code>：</h2><p>1.获取秘钥<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></p>\n<p>2.添加源列表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c <span class=\"string\">'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'</span></span><br></pre></td></tr></table></figure></p>\n<p>3.更新<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p>4.安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure></p>\n<p>Jenkins服务默认运行在8080端口，如果Jenkins服务不能启动，可以编辑：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/default/jenkins</span><br></pre></td></tr></table></figure></p>\n<p>替换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP_PORT=8080</span><br></pre></td></tr></table></figure></p>\n<p>为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP_PORT=8000</span><br></pre></td></tr></table></figure></p>\n<p>8000为你所希望Jenkins服务的端口</p>\n<p>5.打开浏览器输了你的主机ip和Jenkins的服务端口如：192.168.1.22:8080</p>\n<p>6.页面会索要一个key，key的地址 <code>/var/lib/jenkins/secrets/initialAdminPassword</code></p>"},{"title":"高阶组件：react应用设计模式","date":"2017-11-12T02:22:09.000Z","_content":"\nIn this article we will discuss how to use Higher Order Components to keep your React applications tidy, well structured and easy to maintain. We’ll discuss how pure functions keep code clean and how these same principles can be applied to React components.\n在这片文章里我们将讨论任何使用高阶组件保持你的react应用整洁，结构合理，易于维护。纯函数是如何保持代码整洁并且如何将这些原则应用到react组件中。<!--more-->\n\n## __Pure Functions__ \n## __纯函数__\n\nA function is considered pure if it adheres to the following properties:\n\n如果一个函数遵循以下几个规则那么他就是纯函数：\n\n+ All the data it deals with are declared as arguments\n+ 函数处理的数据都是作为参数传递给函数。\n\n+ It does not mutate data it was given or any other data (these are often referred to as side effects).\n+ 他不接受不确定的数据或者任何其他数据（他们通常是副作用的）。\n\n+ Given the same input, it will always return the same output.\n+ 同样的输入，函数将得到同样的输出。\n\nFor example, the add function below is pure:\n\n举个例子，下面的add函数就是个纯函数：\n\n```javascript\nfunction add(x, y) {\n    return x + y;\n}\n```\nHowever, the function badAdd below is impure:\n\n下面badadd就是不是纯函数：\n```javascript\nvar y = 2;\n\nfunction badAdd(x) {\n    return x + y;\n} \n```\nThis function is not pure because it references data that it hasn’t directly been given. As a result, it’s possible to call this function with the same input and get different output:\n\n这个函数之所以不是纯函数是因为他所引用的数据不是直接给予的（不是通过参数传递，而是直接引用了外部全局变量。）。所以当你输入相同的数据时候可能得到不一样的输出。\n```javascript\nvar y = 2;\n\nbadAdd(3) // 5\n\ny = 3;\n\nbadAdd(3) // 6\n```\nTo read more about pure functions you can read “An introduction to reasonably pure programming” by Mark Brown.\n\n要了解更多关于纯函数的内容，你可以阅读一下Mark Brown写的“An introduction to reasonably pure programming”。\n\n## __Higher Order Functions__ \n## __高阶函数__\n\nA higher order function is a function that when called, returns another function. Often they also take a function as an argument, but this is not required for a function to be considered higher order.\n\n高阶函数的定义是，当一个函数被调用他将输出另一个函数。有时他们把函数作为参数，但是这个不是高阶函数的必要条件。\n\nLet’s say we have our `add` function from above, and we want to write some code so that when we call it we log the result to the `console` before returning the result. We’re unable to edit the `add` function, so instead we can create a new function:\n\n让我们再来看看前面说过的 `add` 函数，我们希望他在返回结果前，`console` 一下结果。我们不能改变 `add` 函数，所以我们要创建一个新函数来替代他：\n\n```javascript\nfunction addAndLog(x, y) {\n    var result = add(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\nWe decide that logging results of functions is useful, and now we want to do the same with a subtract function. Rather than duplicate the above, we could write a higher order function that can take a function and return a new function that calls the given function and logs the result before then returning it:\n\n我们显示函数的记录结果是有用的，现在我们要对减法函数做同样的事情。而不是复制上述内容，我们可以编写一个更高阶的函数，它可以执行一个函数接受函数作为参数，被调用的函数会返回结果和显示记录，函数则会返回新的函数。\n\n```javascript\nfunction logAndReturn(func) {\n    return function() {\n        var args = Array.prototype.slice.call(arguments);\n        var result = func.apply(null, args);\n        console.log('Result', result);\n        return result;\n    }\n}\n```\n\nNow we can take this function `and` use it to add logging to add and `subtract`:\n\n现在我们可以使用这个函数为 `add` 和 `subtract` 函数添加显示记录：\n\n```javascript\nvar addAndLog = logAndReturn(add);\n\naddAndLog(4, 4) // 8 is returned, ‘Result 8’ is logged\n\nvar subtractAndLog = logAndReturn(subtract);\n\nsubtractAndLog(4, 3) // 1 is returned, ‘Result 1’ is logged;\n```\n`logAndReturn` is a HOF because it takes a function as its argument and returns a new function that we can call. These are really useful for wrapping existing functions that you can’t change in behavior. For more information on this, check M. David Green’s article “Higher-Order Functions in JavaScript which goes into much more detail on the subject.\n\n`logAndReturn` 就是一个高阶函数因为他接受一个函数作为参数，并且返回一个函数被我们调用。封装且不改变现有函数的内部实现是非常有用的。希望了解更多相关内容可以去看看M. David Green写的 “Higher-Order Functions in JavaScript”。\n\nAdditionally you can check out this CodePen, which shows the above code in action.\n\n另外你可以去CodePen，那里有上面说到的代码。\n\n## __Higher Order Components__ \n\n## __高阶组件__\n\nMoving into React land, we can use the same logic as above to take existing React components and give them some extra behaviours.\n\n现在我们讨论讨论React，上面讲到的逻辑我们同样可以在React组件上使用，以赋予他们更多的行为。\n\nIn this section we’re going to use React Router, the de facto routing solution for React. If you’d like to get started with the library I highly recommend the React Router Tutorial on GitHub.\n\n在这节我们将使用React Router，这个是React的路由解决方案。如果你开始使用库，我强烈建议你使用GitHub上的React Router Tutorial。\n\n## __React Router’s Link component React__\n\n## __路由链接组件__\n\nReact Router provides a `<Link>` component that is used to link between pages in a React application. One of the properties that this `<Link>` component takes is `activeClassName`. When a `<Link>` has this property and it is currently active (the user is on a URL that the link points to), the component will be given this class, enabling the developer to style it.\n\nReact 路由提供 `<Link>` 用于链接React应用里的页面。`<Link>` 组件其中一个属性是 `activeClassName`。当 `<Link>` 组件处于活动状态时使用了这个属性（用户经过链接时候的意思），组件将使用这个样类名，以便开发人员能够对其样式进行美化。\n\nThis is a really useful feature, and in our hypothetical application we decide that we always want to use this property. However, after doing so we quickly discover that this is making all our `<Link>` components very verbose:\n\n这是一个非常有用的功能，在我们假设的应用程序中，我们决定我们总是使用这个属性。然而，很快我们会发现这会使 `<Link>` 组件变得臃肿：\n\n```html\n<Link to=\"/\" activeClassName=\"active-link\"> Home </Link>\n<Link to=\"/about\" activeClassName=\"active-link\"> About</Link>\n<Link to=\"/contact\" activeClassName=\"active-link\"> Contact</Link>\n```\nNotice that we are having to repeat the class name property every time. Not only does this make our components verbose, it also means that if we decide to change the class name we’ve got to do it in a lot of places.\n\n注意我们每次都必须重复使用那个类的属性名。这不仅使我们的组件臃肿，这也意味着如果我们决定改变类名，我们必须在很多地方进行修改。\n\nInstead, we can write a component that wraps the `<Link>` component:\n\n替换，我们要写一个组件去封装 `<Link>` 组件：\n\n```javascript\nvar AppLink=React.createClass({\n    render:function(){\n        return(\n            <Link to={this.props.to} activeClassName=\"active-link\">\n                {this.props.children}\n            </Link>;\n        );\n    }\n});\n```\n\nAnd now we can use this component, which tidies up our links:\n\n现在我们可以使用这个组件来整合我们的链接：\n\n```html\n<AppLink to=\"/\">Home</AppLink>\n<AppLink to=\"/about\">About</AppLink>\n<AppLink to=\"/contact\">Contact</AppLink>\n```\n\nIn the React ecosystem these components are known as higher order components because they take an existing component and manipulate it slightly without changing the existing component. You can also think of these as wrapper components, but you’ll find them commonly referred to as higher order components in React-based content.\n\n在React生态系统中，这些组件被称为高阶组件，因为他们采用现有组件并对他们进行封装，但是并没有更改现有组件。你也可以将他们视为封装组件，但你会发现他们通常被称为 `React-based` 内容中的高阶组件。\n\n## __Functional, Stateless Components__\n## __函数式无状态组件__\n\nReact 0.14 introduced support for functional, stateless components. These are components that have the following characteristics:\n\nReact0.14开始提供函数式无状态组件，函数式无状态组件具有以下特点：\n\n+ They do not have any state.\n\n+ 他们没有state\n\n+ They do not use any React lifecycle methods (such as componentWillMount()).\n\n+ 他们无法使用React生命周期函数（比如 componentWillMount()）\n\n+ They only define the render method and nothing more.\n\n+ 他们只定义了 render 方法，没有其他的了。\n\nWhen a component adheres to the above, we can define it as a function, rather than using React.createClass (or class App extends React.Component if you’re using ES2015 classes). For example, the two expressions below both produce the same component:\n\n当一个组件遵守上述内容时，我们可以将其定义为一个函数，而不是使用React.createClass（如果你使用了 ES2015  classes 你也可以使用class 来扩展你的React 组件）。下面的两个表达式产生相同的组件：\n\n```javascript\nvar App = React.createClass({\n    render: function() {\n        return <p>My name is { this.props.name }</p>;\n    };\n});\n\nvar App = function(props) {\n    return <p>My name is { props.name }</p>;\n};\n```\n\nIn the functional, stateless component instead of referring to this.props we’re instead passed props as an argument. You can read more about this on the React documentation.\n\n在函数式无状态组件中，不是引用this.props，而是将props用作参数。React文档有更多介绍。\n\nBecause higher order components often wrap an existing component you’ll often find you can define them as a functional component. For the rest of this article I’ll do that whenever possible.\n\n因为更高阶的组件通常会封装一个现有的组件，所以您经常会发现可以将它们定义为函数组件。在本文的其余部分，我将尽可能地这样做。\n\n## __Better Higher Order Components__\n## __更好的高阶组件__\n\nThe above component works, but we can do much better. The AppLink component that we created isn’t quite fit for purpose.\n\n我们不只局限于组件可以正常运行，我们希望做的更好。我们创建的 `AppLink` 组件就不太适合。\n\n## __Accepting multiple properties__\n## __接受多个参数__\n\nThe `<AppLink>` component expects two properties:\n\n`<AppLink>` 组件估计会有两个参数：\n+ this.props.to which is the URL the link should take the user to\n+ this.props.to 表示链接让用户访问的URL\n\n+ this.props.children which is the text shown to the user\n+ this.props.children 表示显示的文本\n\nHowever, the `<Link>` component accepts many more properties, and there might be a time when you want to pass extra properties along with the two above which we nearly always want to pass. We haven’t made `<AppLink>` very extensible by hard coding the exact properties we need.\n\n当然，`<Link>` 组件可以接受更多发属性，有时我们只是想组件允许传递额外的属性以及上述的两个属性。我们并没有通过代码属性让 `<AppLink>` 有很高的扩展性。\n\n## __The JSX spread__\n## __JSX 传递__\n\nJSX, the HTML-like syntax we use to define React elements, supports the spread operator for passing an object to a component as properties. For example, the code samples below achieve the same thing:\n\nJSX，一种类似于HTML的语法用于定义React组件，支持扩展操作符将对象作为属性传递给组件。例如，下面的代码示例实现了同样的事情：\n\n```javascript\nvar props={a:1,b:2};\n<Foo a={props.a }b={props.b} />\n\n<Foo {...props} />\n```\n\nUsing `{...props}` spreads each key in the object and passes it to `Foo` as an individual property.\n\n使用 `{... props}` 扩展对象中的每个键，并将其作为单个属性传递给 `Foo`。\n\nWe can make use of this trick with `<AppLink>` so we support any arbitrary property that `<Link>` supports. By doing this we also future proof ourselves; if `<Link>` adds any new properties in the future our wrapper component will already support them. While we’re at it, I’m also going to change  `AppLink` to be a functional component.\n\n我们可以利用 `<AppLink>` 这个技巧，让我们支持 `<Link>` 支持的任意属性。通这样做，我们也将来证明自己；如果 `<Link>` 在将来添加任何新的属性，我们的包装器组件将已经支持它们。在我们这样做的时候，我同时要将 `AppLink` 改成函数式组件。\n\n```javascript\nvar AppLink = function(props){\n    return <Link {...props} activeClassName=\"active-link\" />;\n}\n```\n\nNow <Link> will accept any properties and pass them through. Note that we also can use the self closing form instead of explicitly referencing {props.children} in-between the <Link> tags. React allows children to be passed as a regular prop or as child elements of a component between the opening and closing tag.\n\n现在将接受任何属性并传递它们。请注意，我们还可以使用笔和标签，而不是在标签之间传递{props.children}。React允许 children 作为常规 prop 或作为在开始和结束标签之间的组件的子元素进行传递。\n\n## __Property ordering in React__\n## __React中属性的排序__\n\nImagine that for one specific link on your page, you have to use a different activeClassName. You try passing it into <AppLink>, since we pass all properties through:\n\n想象一下，对于页面上的一个特定链接，你必须使用不同的 activeClassName。尝试将其传递到 <AppLink> 中，我们通过以下方式传递所有属性： \n\n```jsx\n<AppLink to=“/special-link” activeClassName=“special-active” >\n    Special Secret Link\n</AppLink>\n```\n\nHowever, this doesn’t work. The reason is because of the ordering of properties when we render the `<Link>` component:\n\n但是，这不行。渲染 `<Link>` 组件时属性的顺序：\n\n```jsx\nreturn < Link {...props} activeClassName=\"active-link\" />;\n```\n\nWhen you have the same property multiple times in a React component, the last declaration wins. This means that our last `activeClassName=\"active-link\"` declaration will always win, since it’s placed after `{...this.props}`. To fix this we can reorder the properties so we spread this.props last. This means that we set sensible defaults that we’d like to use, but the user can override them if they really need to:\n\n当您在React组件中多次具有相同的属性时，最后一个会被使用。这就意味着放在 `{...this.props}` 后面的 `activeClassName=\"active-link\"` 会被使用。我们可以把 this.props 放在最后来解决这个问题。这意味着如果用户真的需要我们可以设置一些想要合理的默认值，但是这些默认值是可以被覆盖：\n\n```jsx\nreturn <Link activeClassName=\"active-link\" {...props} />;\n```\n\nBy creating higher order components that wrap existing ones but with additional behavior, we keep our code base clean and defend against future changes by not repeating properties and keeping their values in just one place.\n\n通过创建一个逛街组件可以使现有的组件得到额外的功能，我们尽量保持我们的代码简洁，并且通过不重复的属性来应对未来的变化，同时把他们的值保存在一个地方。\n\n## __Higher Order Component Creators__\n## __高阶组件创造者__\n\nOften you’ll have a number of components that you’ll need to wrap in the same behavior. This is very similar to earlier in this article when we wrapped `add` and `subtract` to add logging to them.\n\n通常你需要给很多组件添加同样的方法。这就和我们前面说到的给 `add` 函数和 `subtract` 函数添加显示输出一样。\n\nLet’s imagine in your application you have an object that contains information on the current user who is authenticated on the system. You need some of your React components to be able to access this information, but rather than blindly making it accessible for every component you want to be more strict about which components receive the information.\n\n让我们想象一下，在你的应用程序中，你有一个对象，其中包含关于系统进行身份验证的当前用户的信息。你需要你的 React 组件可以访问这些信息，而不是盲目地使每个组件都可以访问，你更希望严格地控制哪些组件接收信息。\n\nThe way to solve this is to create a function that we can call with a React component. The function will then return a new React component that will render the given component but with an extra property which will give it access to the user information.\n\n解决的方法就是我们可以创建一个函数去调用一个 React 组件。函数会返回一个可以访问用户信息并且把原来组件进行渲染的新 React 组件。\n\nThat sounds pretty complicated, but it’s made more straightforward with some code:\n\n听起来很复杂，但是通过一些代码就可以很简洁了：\n\n```javascript\nfunction wrapWithUser(Component){\n    // information that we don’t want everything to access\n    // 收限制的用户信息\n    var secretUserInfo = {\n        name:'Jack Franklin',\n        favouriteColour:'blue'\n    };\n\n    // return a newly generated React component\n    // using a functional, stateless component\n    // 返回一个新的 React 组件\n    // 使用一个无状态函数式组件\n    return function(props){\n        // pass in the user variable as a property, along with\n        // all the other props that we might be given\n        // 用户信息作为属性进行传递\n        // 其他属性我们可以自定义\n        return <Component user={secretUserInfo} {...props} />\n    }\n}\n```\n\nThe function takes a React component (which is easy to spot given React components have to have capital letters at the beginning) and returns a new function that will render the component it was given with an extra property of user, which is set to the `secretUserInfo`.\n\n函数通过一个React组件（自定义的React组件必须有大写字母开头）并返回一个新的函数，它将使用设置在 `secretUserInfo` 里的用户的属性来渲染那个组件。\n\nNow let’s take a component, `<AppHeader>`, which wants access to this information so it can display the logged in user:\n\n现在我们有一个 `<AppHeader>` 组件需要这些信息，以便把登陆的用户信息展示出来：\n\n```javascript\nvar AppHeader=function(props){\n    if(props.user){\n        return <p>Logged in as {props.user.name} </p>;\n    } else {\n        return <p>You need to login</p>;\n    }\n}\n```\n\nThe final step is to connect this component up so it is given `this.props.user`. We can create a new component by passing this one into our `wrapWithUser` function.\n\n最后一步是将此组件连接起来，我们可以通过 `wrapWithUser` 函数创建新的组件，以便把 `this.props.user` 传递给他。\n\n```javascript\nvar ConnectedAppHeader = wrapWithUser(AppHeader);\n```\n\nWe now have a `<ConnectedAppHeader>` component that can be rendered, and will have access to the `user` object.\n\n现在我们有了 `<ConnectedAppHeader>` 组件可以访问 `user` 对象，并且渲染原来的组件。\n\nI chose to call the component `ConnectedAppHeader` because I think of it as being connected with some extra piece of data that not every component is given access to.\n\n我给这个组件起名叫 `ConnectedAppHeader` 因为他传递了一些不希望所有组件都可以使用的额外数据。\n\nThis pattern is very common in __React__ libraries, particularly in __Redux__, so being aware of how it works and the reasons it’s being used will help you as your application grows and you rely on other third party libraries that use this approach.\n\n这种模式在 __React__ 库中非常常见，特别是在 __Redux__ 中，知道你依赖的第三方库是如何工作的，它被使用的原因将帮助你随着你的应用程序一起成长。\n\n## __Conclusion__\n## __结论__\n\nThis article has shown how, by applying principles of functional programming such as pure functions and higher order components to React, you can create a codebase that’s easier to maintain and work with on a daily basis.\n\n这篇文章即将结束，通过应用诸如纯函数和更高阶函数的函数式编程的原理应用到React，您可以创建一个更容易维护和使用的代码库。\n\nBy creating higher order components you’re able to keep data defined in only one place, making refactoring easier. Higher order function creators enable you to keep most data private and only expose pieces of data to the components that really need it. By doing this you make it obvious which components are using which bits of data, and as your application grows you’ll find this beneficial.\n\n通过创建更高阶的组件，你只能将数据定义在一个位置，使重构更容易。更高阶的函数创建者使你能够将大部分数据保留为私有，并且仅将数据片段暴露给真正需要的组件。通过这样做，你可以清楚地知道哪些组件正在使用哪些数据，并且随着应用程序的发展，你会发现这是有益的。","source":"_posts/高阶组件：react应用设计模式.md","raw":"---\ntitle: 高阶组件：react应用设计模式\ndate: 2017-11-12 10:22:09\ntags: ['pure funtion','纯函数','前端','js','javascript','side effects','副作用','react','组件','高阶组件','Higher Order Components']\ncategory: 'coding'\n---\n\nIn this article we will discuss how to use Higher Order Components to keep your React applications tidy, well structured and easy to maintain. We’ll discuss how pure functions keep code clean and how these same principles can be applied to React components.\n在这片文章里我们将讨论任何使用高阶组件保持你的react应用整洁，结构合理，易于维护。纯函数是如何保持代码整洁并且如何将这些原则应用到react组件中。<!--more-->\n\n## __Pure Functions__ \n## __纯函数__\n\nA function is considered pure if it adheres to the following properties:\n\n如果一个函数遵循以下几个规则那么他就是纯函数：\n\n+ All the data it deals with are declared as arguments\n+ 函数处理的数据都是作为参数传递给函数。\n\n+ It does not mutate data it was given or any other data (these are often referred to as side effects).\n+ 他不接受不确定的数据或者任何其他数据（他们通常是副作用的）。\n\n+ Given the same input, it will always return the same output.\n+ 同样的输入，函数将得到同样的输出。\n\nFor example, the add function below is pure:\n\n举个例子，下面的add函数就是个纯函数：\n\n```javascript\nfunction add(x, y) {\n    return x + y;\n}\n```\nHowever, the function badAdd below is impure:\n\n下面badadd就是不是纯函数：\n```javascript\nvar y = 2;\n\nfunction badAdd(x) {\n    return x + y;\n} \n```\nThis function is not pure because it references data that it hasn’t directly been given. As a result, it’s possible to call this function with the same input and get different output:\n\n这个函数之所以不是纯函数是因为他所引用的数据不是直接给予的（不是通过参数传递，而是直接引用了外部全局变量。）。所以当你输入相同的数据时候可能得到不一样的输出。\n```javascript\nvar y = 2;\n\nbadAdd(3) // 5\n\ny = 3;\n\nbadAdd(3) // 6\n```\nTo read more about pure functions you can read “An introduction to reasonably pure programming” by Mark Brown.\n\n要了解更多关于纯函数的内容，你可以阅读一下Mark Brown写的“An introduction to reasonably pure programming”。\n\n## __Higher Order Functions__ \n## __高阶函数__\n\nA higher order function is a function that when called, returns another function. Often they also take a function as an argument, but this is not required for a function to be considered higher order.\n\n高阶函数的定义是，当一个函数被调用他将输出另一个函数。有时他们把函数作为参数，但是这个不是高阶函数的必要条件。\n\nLet’s say we have our `add` function from above, and we want to write some code so that when we call it we log the result to the `console` before returning the result. We’re unable to edit the `add` function, so instead we can create a new function:\n\n让我们再来看看前面说过的 `add` 函数，我们希望他在返回结果前，`console` 一下结果。我们不能改变 `add` 函数，所以我们要创建一个新函数来替代他：\n\n```javascript\nfunction addAndLog(x, y) {\n    var result = add(x, y);\n    console.log('Result', result);\n    return result;\n}\n```\nWe decide that logging results of functions is useful, and now we want to do the same with a subtract function. Rather than duplicate the above, we could write a higher order function that can take a function and return a new function that calls the given function and logs the result before then returning it:\n\n我们显示函数的记录结果是有用的，现在我们要对减法函数做同样的事情。而不是复制上述内容，我们可以编写一个更高阶的函数，它可以执行一个函数接受函数作为参数，被调用的函数会返回结果和显示记录，函数则会返回新的函数。\n\n```javascript\nfunction logAndReturn(func) {\n    return function() {\n        var args = Array.prototype.slice.call(arguments);\n        var result = func.apply(null, args);\n        console.log('Result', result);\n        return result;\n    }\n}\n```\n\nNow we can take this function `and` use it to add logging to add and `subtract`:\n\n现在我们可以使用这个函数为 `add` 和 `subtract` 函数添加显示记录：\n\n```javascript\nvar addAndLog = logAndReturn(add);\n\naddAndLog(4, 4) // 8 is returned, ‘Result 8’ is logged\n\nvar subtractAndLog = logAndReturn(subtract);\n\nsubtractAndLog(4, 3) // 1 is returned, ‘Result 1’ is logged;\n```\n`logAndReturn` is a HOF because it takes a function as its argument and returns a new function that we can call. These are really useful for wrapping existing functions that you can’t change in behavior. For more information on this, check M. David Green’s article “Higher-Order Functions in JavaScript which goes into much more detail on the subject.\n\n`logAndReturn` 就是一个高阶函数因为他接受一个函数作为参数，并且返回一个函数被我们调用。封装且不改变现有函数的内部实现是非常有用的。希望了解更多相关内容可以去看看M. David Green写的 “Higher-Order Functions in JavaScript”。\n\nAdditionally you can check out this CodePen, which shows the above code in action.\n\n另外你可以去CodePen，那里有上面说到的代码。\n\n## __Higher Order Components__ \n\n## __高阶组件__\n\nMoving into React land, we can use the same logic as above to take existing React components and give them some extra behaviours.\n\n现在我们讨论讨论React，上面讲到的逻辑我们同样可以在React组件上使用，以赋予他们更多的行为。\n\nIn this section we’re going to use React Router, the de facto routing solution for React. If you’d like to get started with the library I highly recommend the React Router Tutorial on GitHub.\n\n在这节我们将使用React Router，这个是React的路由解决方案。如果你开始使用库，我强烈建议你使用GitHub上的React Router Tutorial。\n\n## __React Router’s Link component React__\n\n## __路由链接组件__\n\nReact Router provides a `<Link>` component that is used to link between pages in a React application. One of the properties that this `<Link>` component takes is `activeClassName`. When a `<Link>` has this property and it is currently active (the user is on a URL that the link points to), the component will be given this class, enabling the developer to style it.\n\nReact 路由提供 `<Link>` 用于链接React应用里的页面。`<Link>` 组件其中一个属性是 `activeClassName`。当 `<Link>` 组件处于活动状态时使用了这个属性（用户经过链接时候的意思），组件将使用这个样类名，以便开发人员能够对其样式进行美化。\n\nThis is a really useful feature, and in our hypothetical application we decide that we always want to use this property. However, after doing so we quickly discover that this is making all our `<Link>` components very verbose:\n\n这是一个非常有用的功能，在我们假设的应用程序中，我们决定我们总是使用这个属性。然而，很快我们会发现这会使 `<Link>` 组件变得臃肿：\n\n```html\n<Link to=\"/\" activeClassName=\"active-link\"> Home </Link>\n<Link to=\"/about\" activeClassName=\"active-link\"> About</Link>\n<Link to=\"/contact\" activeClassName=\"active-link\"> Contact</Link>\n```\nNotice that we are having to repeat the class name property every time. Not only does this make our components verbose, it also means that if we decide to change the class name we’ve got to do it in a lot of places.\n\n注意我们每次都必须重复使用那个类的属性名。这不仅使我们的组件臃肿，这也意味着如果我们决定改变类名，我们必须在很多地方进行修改。\n\nInstead, we can write a component that wraps the `<Link>` component:\n\n替换，我们要写一个组件去封装 `<Link>` 组件：\n\n```javascript\nvar AppLink=React.createClass({\n    render:function(){\n        return(\n            <Link to={this.props.to} activeClassName=\"active-link\">\n                {this.props.children}\n            </Link>;\n        );\n    }\n});\n```\n\nAnd now we can use this component, which tidies up our links:\n\n现在我们可以使用这个组件来整合我们的链接：\n\n```html\n<AppLink to=\"/\">Home</AppLink>\n<AppLink to=\"/about\">About</AppLink>\n<AppLink to=\"/contact\">Contact</AppLink>\n```\n\nIn the React ecosystem these components are known as higher order components because they take an existing component and manipulate it slightly without changing the existing component. You can also think of these as wrapper components, but you’ll find them commonly referred to as higher order components in React-based content.\n\n在React生态系统中，这些组件被称为高阶组件，因为他们采用现有组件并对他们进行封装，但是并没有更改现有组件。你也可以将他们视为封装组件，但你会发现他们通常被称为 `React-based` 内容中的高阶组件。\n\n## __Functional, Stateless Components__\n## __函数式无状态组件__\n\nReact 0.14 introduced support for functional, stateless components. These are components that have the following characteristics:\n\nReact0.14开始提供函数式无状态组件，函数式无状态组件具有以下特点：\n\n+ They do not have any state.\n\n+ 他们没有state\n\n+ They do not use any React lifecycle methods (such as componentWillMount()).\n\n+ 他们无法使用React生命周期函数（比如 componentWillMount()）\n\n+ They only define the render method and nothing more.\n\n+ 他们只定义了 render 方法，没有其他的了。\n\nWhen a component adheres to the above, we can define it as a function, rather than using React.createClass (or class App extends React.Component if you’re using ES2015 classes). For example, the two expressions below both produce the same component:\n\n当一个组件遵守上述内容时，我们可以将其定义为一个函数，而不是使用React.createClass（如果你使用了 ES2015  classes 你也可以使用class 来扩展你的React 组件）。下面的两个表达式产生相同的组件：\n\n```javascript\nvar App = React.createClass({\n    render: function() {\n        return <p>My name is { this.props.name }</p>;\n    };\n});\n\nvar App = function(props) {\n    return <p>My name is { props.name }</p>;\n};\n```\n\nIn the functional, stateless component instead of referring to this.props we’re instead passed props as an argument. You can read more about this on the React documentation.\n\n在函数式无状态组件中，不是引用this.props，而是将props用作参数。React文档有更多介绍。\n\nBecause higher order components often wrap an existing component you’ll often find you can define them as a functional component. For the rest of this article I’ll do that whenever possible.\n\n因为更高阶的组件通常会封装一个现有的组件，所以您经常会发现可以将它们定义为函数组件。在本文的其余部分，我将尽可能地这样做。\n\n## __Better Higher Order Components__\n## __更好的高阶组件__\n\nThe above component works, but we can do much better. The AppLink component that we created isn’t quite fit for purpose.\n\n我们不只局限于组件可以正常运行，我们希望做的更好。我们创建的 `AppLink` 组件就不太适合。\n\n## __Accepting multiple properties__\n## __接受多个参数__\n\nThe `<AppLink>` component expects two properties:\n\n`<AppLink>` 组件估计会有两个参数：\n+ this.props.to which is the URL the link should take the user to\n+ this.props.to 表示链接让用户访问的URL\n\n+ this.props.children which is the text shown to the user\n+ this.props.children 表示显示的文本\n\nHowever, the `<Link>` component accepts many more properties, and there might be a time when you want to pass extra properties along with the two above which we nearly always want to pass. We haven’t made `<AppLink>` very extensible by hard coding the exact properties we need.\n\n当然，`<Link>` 组件可以接受更多发属性，有时我们只是想组件允许传递额外的属性以及上述的两个属性。我们并没有通过代码属性让 `<AppLink>` 有很高的扩展性。\n\n## __The JSX spread__\n## __JSX 传递__\n\nJSX, the HTML-like syntax we use to define React elements, supports the spread operator for passing an object to a component as properties. For example, the code samples below achieve the same thing:\n\nJSX，一种类似于HTML的语法用于定义React组件，支持扩展操作符将对象作为属性传递给组件。例如，下面的代码示例实现了同样的事情：\n\n```javascript\nvar props={a:1,b:2};\n<Foo a={props.a }b={props.b} />\n\n<Foo {...props} />\n```\n\nUsing `{...props}` spreads each key in the object and passes it to `Foo` as an individual property.\n\n使用 `{... props}` 扩展对象中的每个键，并将其作为单个属性传递给 `Foo`。\n\nWe can make use of this trick with `<AppLink>` so we support any arbitrary property that `<Link>` supports. By doing this we also future proof ourselves; if `<Link>` adds any new properties in the future our wrapper component will already support them. While we’re at it, I’m also going to change  `AppLink` to be a functional component.\n\n我们可以利用 `<AppLink>` 这个技巧，让我们支持 `<Link>` 支持的任意属性。通这样做，我们也将来证明自己；如果 `<Link>` 在将来添加任何新的属性，我们的包装器组件将已经支持它们。在我们这样做的时候，我同时要将 `AppLink` 改成函数式组件。\n\n```javascript\nvar AppLink = function(props){\n    return <Link {...props} activeClassName=\"active-link\" />;\n}\n```\n\nNow <Link> will accept any properties and pass them through. Note that we also can use the self closing form instead of explicitly referencing {props.children} in-between the <Link> tags. React allows children to be passed as a regular prop or as child elements of a component between the opening and closing tag.\n\n现在将接受任何属性并传递它们。请注意，我们还可以使用笔和标签，而不是在标签之间传递{props.children}。React允许 children 作为常规 prop 或作为在开始和结束标签之间的组件的子元素进行传递。\n\n## __Property ordering in React__\n## __React中属性的排序__\n\nImagine that for one specific link on your page, you have to use a different activeClassName. You try passing it into <AppLink>, since we pass all properties through:\n\n想象一下，对于页面上的一个特定链接，你必须使用不同的 activeClassName。尝试将其传递到 <AppLink> 中，我们通过以下方式传递所有属性： \n\n```jsx\n<AppLink to=“/special-link” activeClassName=“special-active” >\n    Special Secret Link\n</AppLink>\n```\n\nHowever, this doesn’t work. The reason is because of the ordering of properties when we render the `<Link>` component:\n\n但是，这不行。渲染 `<Link>` 组件时属性的顺序：\n\n```jsx\nreturn < Link {...props} activeClassName=\"active-link\" />;\n```\n\nWhen you have the same property multiple times in a React component, the last declaration wins. This means that our last `activeClassName=\"active-link\"` declaration will always win, since it’s placed after `{...this.props}`. To fix this we can reorder the properties so we spread this.props last. This means that we set sensible defaults that we’d like to use, but the user can override them if they really need to:\n\n当您在React组件中多次具有相同的属性时，最后一个会被使用。这就意味着放在 `{...this.props}` 后面的 `activeClassName=\"active-link\"` 会被使用。我们可以把 this.props 放在最后来解决这个问题。这意味着如果用户真的需要我们可以设置一些想要合理的默认值，但是这些默认值是可以被覆盖：\n\n```jsx\nreturn <Link activeClassName=\"active-link\" {...props} />;\n```\n\nBy creating higher order components that wrap existing ones but with additional behavior, we keep our code base clean and defend against future changes by not repeating properties and keeping their values in just one place.\n\n通过创建一个逛街组件可以使现有的组件得到额外的功能，我们尽量保持我们的代码简洁，并且通过不重复的属性来应对未来的变化，同时把他们的值保存在一个地方。\n\n## __Higher Order Component Creators__\n## __高阶组件创造者__\n\nOften you’ll have a number of components that you’ll need to wrap in the same behavior. This is very similar to earlier in this article when we wrapped `add` and `subtract` to add logging to them.\n\n通常你需要给很多组件添加同样的方法。这就和我们前面说到的给 `add` 函数和 `subtract` 函数添加显示输出一样。\n\nLet’s imagine in your application you have an object that contains information on the current user who is authenticated on the system. You need some of your React components to be able to access this information, but rather than blindly making it accessible for every component you want to be more strict about which components receive the information.\n\n让我们想象一下，在你的应用程序中，你有一个对象，其中包含关于系统进行身份验证的当前用户的信息。你需要你的 React 组件可以访问这些信息，而不是盲目地使每个组件都可以访问，你更希望严格地控制哪些组件接收信息。\n\nThe way to solve this is to create a function that we can call with a React component. The function will then return a new React component that will render the given component but with an extra property which will give it access to the user information.\n\n解决的方法就是我们可以创建一个函数去调用一个 React 组件。函数会返回一个可以访问用户信息并且把原来组件进行渲染的新 React 组件。\n\nThat sounds pretty complicated, but it’s made more straightforward with some code:\n\n听起来很复杂，但是通过一些代码就可以很简洁了：\n\n```javascript\nfunction wrapWithUser(Component){\n    // information that we don’t want everything to access\n    // 收限制的用户信息\n    var secretUserInfo = {\n        name:'Jack Franklin',\n        favouriteColour:'blue'\n    };\n\n    // return a newly generated React component\n    // using a functional, stateless component\n    // 返回一个新的 React 组件\n    // 使用一个无状态函数式组件\n    return function(props){\n        // pass in the user variable as a property, along with\n        // all the other props that we might be given\n        // 用户信息作为属性进行传递\n        // 其他属性我们可以自定义\n        return <Component user={secretUserInfo} {...props} />\n    }\n}\n```\n\nThe function takes a React component (which is easy to spot given React components have to have capital letters at the beginning) and returns a new function that will render the component it was given with an extra property of user, which is set to the `secretUserInfo`.\n\n函数通过一个React组件（自定义的React组件必须有大写字母开头）并返回一个新的函数，它将使用设置在 `secretUserInfo` 里的用户的属性来渲染那个组件。\n\nNow let’s take a component, `<AppHeader>`, which wants access to this information so it can display the logged in user:\n\n现在我们有一个 `<AppHeader>` 组件需要这些信息，以便把登陆的用户信息展示出来：\n\n```javascript\nvar AppHeader=function(props){\n    if(props.user){\n        return <p>Logged in as {props.user.name} </p>;\n    } else {\n        return <p>You need to login</p>;\n    }\n}\n```\n\nThe final step is to connect this component up so it is given `this.props.user`. We can create a new component by passing this one into our `wrapWithUser` function.\n\n最后一步是将此组件连接起来，我们可以通过 `wrapWithUser` 函数创建新的组件，以便把 `this.props.user` 传递给他。\n\n```javascript\nvar ConnectedAppHeader = wrapWithUser(AppHeader);\n```\n\nWe now have a `<ConnectedAppHeader>` component that can be rendered, and will have access to the `user` object.\n\n现在我们有了 `<ConnectedAppHeader>` 组件可以访问 `user` 对象，并且渲染原来的组件。\n\nI chose to call the component `ConnectedAppHeader` because I think of it as being connected with some extra piece of data that not every component is given access to.\n\n我给这个组件起名叫 `ConnectedAppHeader` 因为他传递了一些不希望所有组件都可以使用的额外数据。\n\nThis pattern is very common in __React__ libraries, particularly in __Redux__, so being aware of how it works and the reasons it’s being used will help you as your application grows and you rely on other third party libraries that use this approach.\n\n这种模式在 __React__ 库中非常常见，特别是在 __Redux__ 中，知道你依赖的第三方库是如何工作的，它被使用的原因将帮助你随着你的应用程序一起成长。\n\n## __Conclusion__\n## __结论__\n\nThis article has shown how, by applying principles of functional programming such as pure functions and higher order components to React, you can create a codebase that’s easier to maintain and work with on a daily basis.\n\n这篇文章即将结束，通过应用诸如纯函数和更高阶函数的函数式编程的原理应用到React，您可以创建一个更容易维护和使用的代码库。\n\nBy creating higher order components you’re able to keep data defined in only one place, making refactoring easier. Higher order function creators enable you to keep most data private and only expose pieces of data to the components that really need it. By doing this you make it obvious which components are using which bits of data, and as your application grows you’ll find this beneficial.\n\n通过创建更高阶的组件，你只能将数据定义在一个位置，使重构更容易。更高阶的函数创建者使你能够将大部分数据保留为私有，并且仅将数据片段暴露给真正需要的组件。通过这样做，你可以清楚地知道哪些组件正在使用哪些数据，并且随着应用程序的发展，你会发现这是有益的。","slug":"高阶组件：react应用设计模式","published":1,"updated":"2017-12-16T11:50:35.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb9af1xo0040m6i6qboyw7um","content":"<p>In this article we will discuss how to use Higher Order Components to keep your React applications tidy, well structured and easy to maintain. We’ll discuss how pure functions keep code clean and how these same principles can be applied to React components.<br>在这片文章里我们将讨论任何使用高阶组件保持你的react应用整洁，结构合理，易于维护。纯函数是如何保持代码整洁并且如何将这些原则应用到react组件中。<a id=\"more\"></a></p>\n<h2 id=\"Pure-Functions\"><a href=\"#Pure-Functions\" class=\"headerlink\" title=\"Pure Functions\"></a><strong>Pure Functions</strong></h2><h2 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a><strong>纯函数</strong></h2><p>A function is considered pure if it adheres to the following properties:</p>\n<p>如果一个函数遵循以下几个规则那么他就是纯函数：</p>\n<ul>\n<li>All the data it deals with are declared as arguments</li>\n<li><p>函数处理的数据都是作为参数传递给函数。</p>\n</li>\n<li><p>It does not mutate data it was given or any other data (these are often referred to as side effects).</p>\n</li>\n<li><p>他不接受不确定的数据或者任何其他数据（他们通常是副作用的）。</p>\n</li>\n<li><p>Given the same input, it will always return the same output.</p>\n</li>\n<li>同样的输入，函数将得到同样的输出。</li>\n</ul>\n<p>For example, the add function below is pure:</p>\n<p>举个例子，下面的add函数就是个纯函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>However, the function badAdd below is impure:</p>\n<p>下面badadd就是不是纯函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">badAdd</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This function is not pure because it references data that it hasn’t directly been given. As a result, it’s possible to call this function with the same input and get different output:</p>\n<p>这个函数之所以不是纯函数是因为他所引用的数据不是直接给予的（不是通过参数传递，而是直接引用了外部全局变量。）。所以当你输入相同的数据时候可能得到不一样的输出。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">badAdd(<span class=\"number\">3</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">y = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">badAdd(<span class=\"number\">3</span>) <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>To read more about pure functions you can read “An introduction to reasonably pure programming” by Mark Brown.</p>\n<p>要了解更多关于纯函数的内容，你可以阅读一下Mark Brown写的“An introduction to reasonably pure programming”。</p>\n<h2 id=\"Higher-Order-Functions\"><a href=\"#Higher-Order-Functions\" class=\"headerlink\" title=\"Higher Order Functions\"></a><strong>Higher Order Functions</strong></h2><h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a><strong>高阶函数</strong></h2><p>A higher order function is a function that when called, returns another function. Often they also take a function as an argument, but this is not required for a function to be considered higher order.</p>\n<p>高阶函数的定义是，当一个函数被调用他将输出另一个函数。有时他们把函数作为参数，但是这个不是高阶函数的必要条件。</p>\n<p>Let’s say we have our <code>add</code> function from above, and we want to write some code so that when we call it we log the result to the <code>console</code> before returning the result. We’re unable to edit the <code>add</code> function, so instead we can create a new function:</p>\n<p>让我们再来看看前面说过的 <code>add</code> 函数，我们希望他在返回结果前，<code>console</code> 一下结果。我们不能改变 <code>add</code> 函数，所以我们要创建一个新函数来替代他：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = add(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We decide that logging results of functions is useful, and now we want to do the same with a subtract function. Rather than duplicate the above, we could write a higher order function that can take a function and return a new function that calls the given function and logs the result before then returning it:</p>\n<p>我们显示函数的记录结果是有用的，现在我们要对减法函数做同样的事情。而不是复制上述内容，我们可以编写一个更高阶的函数，它可以执行一个函数接受函数作为参数，被调用的函数会返回结果和显示记录，函数则会返回新的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logAndReturn</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = func.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now we can take this function <code>and</code> use it to add logging to add and <code>subtract</code>:</p>\n<p>现在我们可以使用这个函数为 <code>add</code> 和 <code>subtract</code> 函数添加显示记录：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addAndLog = logAndReturn(add);</span><br><span class=\"line\"></span><br><span class=\"line\">addAndLog(<span class=\"number\">4</span>, <span class=\"number\">4</span>) <span class=\"comment\">// 8 is returned, ‘Result 8’ is logged</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> subtractAndLog = logAndReturn(subtract);</span><br><span class=\"line\"></span><br><span class=\"line\">subtractAndLog(<span class=\"number\">4</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 1 is returned, ‘Result 1’ is logged;</span></span><br></pre></td></tr></table></figure>\n<p><code>logAndReturn</code> is a HOF because it takes a function as its argument and returns a new function that we can call. These are really useful for wrapping existing functions that you can’t change in behavior. For more information on this, check M. David Green’s article “Higher-Order Functions in JavaScript which goes into much more detail on the subject.</p>\n<p><code>logAndReturn</code> 就是一个高阶函数因为他接受一个函数作为参数，并且返回一个函数被我们调用。封装且不改变现有函数的内部实现是非常有用的。希望了解更多相关内容可以去看看M. David Green写的 “Higher-Order Functions in JavaScript”。</p>\n<p>Additionally you can check out this CodePen, which shows the above code in action.</p>\n<p>另外你可以去CodePen，那里有上面说到的代码。</p>\n<h2 id=\"Higher-Order-Components\"><a href=\"#Higher-Order-Components\" class=\"headerlink\" title=\"Higher Order Components\"></a><strong>Higher Order Components</strong></h2><h2 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a><strong>高阶组件</strong></h2><p>Moving into React land, we can use the same logic as above to take existing React components and give them some extra behaviours.</p>\n<p>现在我们讨论讨论React，上面讲到的逻辑我们同样可以在React组件上使用，以赋予他们更多的行为。</p>\n<p>In this section we’re going to use React Router, the de facto routing solution for React. If you’d like to get started with the library I highly recommend the React Router Tutorial on GitHub.</p>\n<p>在这节我们将使用React Router，这个是React的路由解决方案。如果你开始使用库，我强烈建议你使用GitHub上的React Router Tutorial。</p>\n<h2 id=\"React-Router’s-Link-component-React\"><a href=\"#React-Router’s-Link-component-React\" class=\"headerlink\" title=\"React Router’s Link component React\"></a><strong>React Router’s Link component React</strong></h2><h2 id=\"路由链接组件\"><a href=\"#路由链接组件\" class=\"headerlink\" title=\"路由链接组件\"></a><strong>路由链接组件</strong></h2><p>React Router provides a <code>&lt;Link&gt;</code> component that is used to link between pages in a React application. One of the properties that this <code>&lt;Link&gt;</code> component takes is <code>activeClassName</code>. When a <code>&lt;Link&gt;</code> has this property and it is currently active (the user is on a URL that the link points to), the component will be given this class, enabling the developer to style it.</p>\n<p>React 路由提供 <code>&lt;Link&gt;</code> 用于链接React应用里的页面。<code>&lt;Link&gt;</code> 组件其中一个属性是 <code>activeClassName</code>。当 <code>&lt;Link&gt;</code> 组件处于活动状态时使用了这个属性（用户经过链接时候的意思），组件将使用这个样类名，以便开发人员能够对其样式进行美化。</p>\n<p>This is a really useful feature, and in our hypothetical application we decide that we always want to use this property. However, after doing so we quickly discover that this is making all our <code>&lt;Link&gt;</code> components very verbose:</p>\n<p>这是一个非常有用的功能，在我们假设的应用程序中，我们决定我们总是使用这个属性。然而，很快我们会发现这会使 <code>&lt;Link&gt;</code> 组件变得臃肿：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> Home <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/contact\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> Contact<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Notice that we are having to repeat the class name property every time. Not only does this make our components verbose, it also means that if we decide to change the class name we’ve got to do it in a lot of places.</p>\n<p>注意我们每次都必须重复使用那个类的属性名。这不仅使我们的组件臃肿，这也意味着如果我们决定改变类名，我们必须在很多地方进行修改。</p>\n<p>Instead, we can write a component that wraps the <code>&lt;Link&gt;</code> component:</p>\n<p>替换，我们要写一个组件去封装 <code>&lt;Link&gt;</code> 组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> AppLink=React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#123;this.props.to&#125;</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span></span><br><span class=\"line\">                &#123;this.props.children&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>And now we can use this component, which tidies up our links:</p>\n<p>现在我们可以使用这个组件来整合我们的链接：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>In the React ecosystem these components are known as higher order components because they take an existing component and manipulate it slightly without changing the existing component. You can also think of these as wrapper components, but you’ll find them commonly referred to as higher order components in React-based content.</p>\n<p>在React生态系统中，这些组件被称为高阶组件，因为他们采用现有组件并对他们进行封装，但是并没有更改现有组件。你也可以将他们视为封装组件，但你会发现他们通常被称为 <code>React-based</code> 内容中的高阶组件。</p>\n<h2 id=\"Functional-Stateless-Components\"><a href=\"#Functional-Stateless-Components\" class=\"headerlink\" title=\"Functional, Stateless Components\"></a><strong>Functional, Stateless Components</strong></h2><h2 id=\"函数式无状态组件\"><a href=\"#函数式无状态组件\" class=\"headerlink\" title=\"函数式无状态组件\"></a><strong>函数式无状态组件</strong></h2><p>React 0.14 introduced support for functional, stateless components. These are components that have the following characteristics:</p>\n<p>React0.14开始提供函数式无状态组件，函数式无状态组件具有以下特点：</p>\n<ul>\n<li><p>They do not have any state.</p>\n</li>\n<li><p>他们没有state</p>\n</li>\n<li><p>They do not use any React lifecycle methods (such as componentWillMount()).</p>\n</li>\n<li><p>他们无法使用React生命周期函数（比如 componentWillMount()）</p>\n</li>\n<li><p>They only define the render method and nothing more.</p>\n</li>\n<li><p>他们只定义了 render 方法，没有其他的了。</p>\n</li>\n</ul>\n<p>When a component adheres to the above, we can define it as a function, rather than using React.createClass (or class App extends React.Component if you’re using ES2015 classes). For example, the two expressions below both produce the same component:</p>\n<p>当一个组件遵守上述内容时，我们可以将其定义为一个函数，而不是使用React.createClass（如果你使用了 ES2015  classes 你也可以使用class 来扩展你的React 组件）。下面的两个表达式产生相同的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> App = React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>My name is &#123; this.props.name &#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> App = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>My name is &#123; props.name &#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>In the functional, stateless component instead of referring to this.props we’re instead passed props as an argument. You can read more about this on the React documentation.</p>\n<p>在函数式无状态组件中，不是引用this.props，而是将props用作参数。React文档有更多介绍。</p>\n<p>Because higher order components often wrap an existing component you’ll often find you can define them as a functional component. For the rest of this article I’ll do that whenever possible.</p>\n<p>因为更高阶的组件通常会封装一个现有的组件，所以您经常会发现可以将它们定义为函数组件。在本文的其余部分，我将尽可能地这样做。</p>\n<h2 id=\"Better-Higher-Order-Components\"><a href=\"#Better-Higher-Order-Components\" class=\"headerlink\" title=\"Better Higher Order Components\"></a><strong>Better Higher Order Components</strong></h2><h2 id=\"更好的高阶组件\"><a href=\"#更好的高阶组件\" class=\"headerlink\" title=\"更好的高阶组件\"></a><strong>更好的高阶组件</strong></h2><p>The above component works, but we can do much better. The AppLink component that we created isn’t quite fit for purpose.</p>\n<p>我们不只局限于组件可以正常运行，我们希望做的更好。我们创建的 <code>AppLink</code> 组件就不太适合。</p>\n<h2 id=\"Accepting-multiple-properties\"><a href=\"#Accepting-multiple-properties\" class=\"headerlink\" title=\"Accepting multiple properties\"></a><strong>Accepting multiple properties</strong></h2><h2 id=\"接受多个参数\"><a href=\"#接受多个参数\" class=\"headerlink\" title=\"接受多个参数\"></a><strong>接受多个参数</strong></h2><p>The <code>&lt;AppLink&gt;</code> component expects two properties:</p>\n<p><code>&lt;AppLink&gt;</code> 组件估计会有两个参数：</p>\n<ul>\n<li>this.props.to which is the URL the link should take the user to</li>\n<li><p>this.props.to 表示链接让用户访问的URL</p>\n</li>\n<li><p>this.props.children which is the text shown to the user</p>\n</li>\n<li>this.props.children 表示显示的文本</li>\n</ul>\n<p>However, the <code>&lt;Link&gt;</code> component accepts many more properties, and there might be a time when you want to pass extra properties along with the two above which we nearly always want to pass. We haven’t made <code>&lt;AppLink&gt;</code> very extensible by hard coding the exact properties we need.</p>\n<p>当然，<code>&lt;Link&gt;</code> 组件可以接受更多发属性，有时我们只是想组件允许传递额外的属性以及上述的两个属性。我们并没有通过代码属性让 <code>&lt;AppLink&gt;</code> 有很高的扩展性。</p>\n<h2 id=\"The-JSX-spread\"><a href=\"#The-JSX-spread\" class=\"headerlink\" title=\"The JSX spread\"></a><strong>The JSX spread</strong></h2><h2 id=\"JSX-传递\"><a href=\"#JSX-传递\" class=\"headerlink\" title=\"JSX 传递\"></a><strong>JSX 传递</strong></h2><p>JSX, the HTML-like syntax we use to define React elements, supports the spread operator for passing an object to a component as properties. For example, the code samples below achieve the same thing:</p>\n<p>JSX，一种类似于HTML的语法用于定义React组件，支持扩展操作符将对象作为属性传递给组件。例如，下面的代码示例实现了同样的事情：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> props=&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">&lt;Foo a=&#123;props.a &#125;b=&#123;props.b&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Foo &#123;...props&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>Using <code>{...props}</code> spreads each key in the object and passes it to <code>Foo</code> as an individual property.</p>\n<p>使用 <code>{... props}</code> 扩展对象中的每个键，并将其作为单个属性传递给 <code>Foo</code>。</p>\n<p>We can make use of this trick with <code>&lt;AppLink&gt;</code> so we support any arbitrary property that <code>&lt;Link&gt;</code> supports. By doing this we also future proof ourselves; if <code>&lt;Link&gt;</code> adds any new properties in the future our wrapper component will already support them. While we’re at it, I’m also going to change  <code>AppLink</code> to be a functional component.</p>\n<p>我们可以利用 <code>&lt;AppLink&gt;</code> 这个技巧，让我们支持 <code>&lt;Link&gt;</code> 支持的任意属性。通这样做，我们也将来证明自己；如果 <code>&lt;Link&gt;</code> 在将来添加任何新的属性，我们的包装器组件将已经支持它们。在我们这样做的时候，我同时要将 <code>AppLink</code> 改成函数式组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> AppLink = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span> /&gt;</span>;</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Now <link> will accept any properties and pass them through. Note that we also can use the self closing form instead of explicitly referencing {props.children} in-between the <link> tags. React allows children to be passed as a regular prop or as child elements of a component between the opening and closing tag.</p>\n<p>现在将接受任何属性并传递它们。请注意，我们还可以使用笔和标签，而不是在标签之间传递{props.children}。React允许 children 作为常规 prop 或作为在开始和结束标签之间的组件的子元素进行传递。</p>\n<h2 id=\"Property-ordering-in-React\"><a href=\"#Property-ordering-in-React\" class=\"headerlink\" title=\"Property ordering in React\"></a><strong>Property ordering in React</strong></h2><h2 id=\"React中属性的排序\"><a href=\"#React中属性的排序\" class=\"headerlink\" title=\"React中属性的排序\"></a><strong>React中属性的排序</strong></h2><p>Imagine that for one specific link on your page, you have to use a different activeClassName. You try passing it into <applink>, since we pass all properties through:</applink></p>\n<p>想象一下，对于页面上的一个特定链接，你必须使用不同的 activeClassName。尝试将其传递到 <applink> 中，我们通过以下方式传递所有属性： </applink></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;AppLink to=“/special-link” activeClassName=“special-active” &gt;</span><br><span class=\"line\">    Special Secret Link</span><br><span class=\"line\">&lt;<span class=\"regexp\">/AppLink&gt;</span></span><br></pre></td></tr></table></figure>\n<p>However, this doesn’t work. The reason is because of the ordering of properties when we render the <code>&lt;Link&gt;</code> component:</p>\n<p>但是，这不行。渲染 <code>&lt;Link&gt;</code> 组件时属性的顺序：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">Link</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span> /&gt;</span>;</span></span><br></pre></td></tr></table></figure>\n<p>When you have the same property multiple times in a React component, the last declaration wins. This means that our last <code>activeClassName=&quot;active-link&quot;</code> declaration will always win, since it’s placed after <code>{...this.props}</code>. To fix this we can reorder the properties so we spread this.props last. This means that we set sensible defaults that we’d like to use, but the user can override them if they really need to:</p>\n<p>当您在React组件中多次具有相同的属性时，最后一个会被使用。这就意味着放在 <code>{...this.props}</code> 后面的 <code>activeClassName=&quot;active-link&quot;</code> 会被使用。我们可以把 this.props 放在最后来解决这个问题。这意味着如果用户真的需要我们可以设置一些想要合理的默认值，但是这些默认值是可以被覆盖：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span>;</span></span><br></pre></td></tr></table></figure>\n<p>By creating higher order components that wrap existing ones but with additional behavior, we keep our code base clean and defend against future changes by not repeating properties and keeping their values in just one place.</p>\n<p>通过创建一个逛街组件可以使现有的组件得到额外的功能，我们尽量保持我们的代码简洁，并且通过不重复的属性来应对未来的变化，同时把他们的值保存在一个地方。</p>\n<h2 id=\"Higher-Order-Component-Creators\"><a href=\"#Higher-Order-Component-Creators\" class=\"headerlink\" title=\"Higher Order Component Creators\"></a><strong>Higher Order Component Creators</strong></h2><h2 id=\"高阶组件创造者\"><a href=\"#高阶组件创造者\" class=\"headerlink\" title=\"高阶组件创造者\"></a><strong>高阶组件创造者</strong></h2><p>Often you’ll have a number of components that you’ll need to wrap in the same behavior. This is very similar to earlier in this article when we wrapped <code>add</code> and <code>subtract</code> to add logging to them.</p>\n<p>通常你需要给很多组件添加同样的方法。这就和我们前面说到的给 <code>add</code> 函数和 <code>subtract</code> 函数添加显示输出一样。</p>\n<p>Let’s imagine in your application you have an object that contains information on the current user who is authenticated on the system. You need some of your React components to be able to access this information, but rather than blindly making it accessible for every component you want to be more strict about which components receive the information.</p>\n<p>让我们想象一下，在你的应用程序中，你有一个对象，其中包含关于系统进行身份验证的当前用户的信息。你需要你的 React 组件可以访问这些信息，而不是盲目地使每个组件都可以访问，你更希望严格地控制哪些组件接收信息。</p>\n<p>The way to solve this is to create a function that we can call with a React component. The function will then return a new React component that will render the given component but with an extra property which will give it access to the user information.</p>\n<p>解决的方法就是我们可以创建一个函数去调用一个 React 组件。函数会返回一个可以访问用户信息并且把原来组件进行渲染的新 React 组件。</p>\n<p>That sounds pretty complicated, but it’s made more straightforward with some code:</p>\n<p>听起来很复杂，但是通过一些代码就可以很简洁了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapWithUser</span>(<span class=\"params\">Component</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// information that we don’t want everything to access</span></span><br><span class=\"line\">    <span class=\"comment\">// 收限制的用户信息</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> secretUserInfo = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">'Jack Franklin'</span>,</span><br><span class=\"line\">        <span class=\"attr\">favouriteColour</span>:<span class=\"string\">'blue'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return a newly generated React component</span></span><br><span class=\"line\">    <span class=\"comment\">// using a functional, stateless component</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个新的 React 组件</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用一个无状态函数式组件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// pass in the user variable as a property, along with</span></span><br><span class=\"line\">        <span class=\"comment\">// all the other props that we might be given</span></span><br><span class=\"line\">        <span class=\"comment\">// 用户信息作为属性进行传递</span></span><br><span class=\"line\">        <span class=\"comment\">// 其他属性我们可以自定义</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> <span class=\"attr\">user</span>=<span class=\"string\">&#123;secretUserInfo&#125;</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>The function takes a React component (which is easy to spot given React components have to have capital letters at the beginning) and returns a new function that will render the component it was given with an extra property of user, which is set to the <code>secretUserInfo</code>.</p>\n<p>函数通过一个React组件（自定义的React组件必须有大写字母开头）并返回一个新的函数，它将使用设置在 <code>secretUserInfo</code> 里的用户的属性来渲染那个组件。</p>\n<p>Now let’s take a component, <code>&lt;AppHeader&gt;</code>, which wants access to this information so it can display the logged in user:</p>\n<p>现在我们有一个 <code>&lt;AppHeader&gt;</code> 组件需要这些信息，以便把登陆的用户信息展示出来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> AppHeader=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(props.user)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Logged in as &#123;props.user.name&#125; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You need to login<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The final step is to connect this component up so it is given <code>this.props.user</code>. We can create a new component by passing this one into our <code>wrapWithUser</code> function.</p>\n<p>最后一步是将此组件连接起来，我们可以通过 <code>wrapWithUser</code> 函数创建新的组件，以便把 <code>this.props.user</code> 传递给他。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ConnectedAppHeader = wrapWithUser(AppHeader);</span><br></pre></td></tr></table></figure>\n<p>We now have a <code>&lt;ConnectedAppHeader&gt;</code> component that can be rendered, and will have access to the <code>user</code> object.</p>\n<p>现在我们有了 <code>&lt;ConnectedAppHeader&gt;</code> 组件可以访问 <code>user</code> 对象，并且渲染原来的组件。</p>\n<p>I chose to call the component <code>ConnectedAppHeader</code> because I think of it as being connected with some extra piece of data that not every component is given access to.</p>\n<p>我给这个组件起名叫 <code>ConnectedAppHeader</code> 因为他传递了一些不希望所有组件都可以使用的额外数据。</p>\n<p>This pattern is very common in <strong>React</strong> libraries, particularly in <strong>Redux</strong>, so being aware of how it works and the reasons it’s being used will help you as your application grows and you rely on other third party libraries that use this approach.</p>\n<p>这种模式在 <strong>React</strong> 库中非常常见，特别是在 <strong>Redux</strong> 中，知道你依赖的第三方库是如何工作的，它被使用的原因将帮助你随着你的应用程序一起成长。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><strong>Conclusion</strong></h2><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h2><p>This article has shown how, by applying principles of functional programming such as pure functions and higher order components to React, you can create a codebase that’s easier to maintain and work with on a daily basis.</p>\n<p>这篇文章即将结束，通过应用诸如纯函数和更高阶函数的函数式编程的原理应用到React，您可以创建一个更容易维护和使用的代码库。</p>\n<p>By creating higher order components you’re able to keep data defined in only one place, making refactoring easier. Higher order function creators enable you to keep most data private and only expose pieces of data to the components that really need it. By doing this you make it obvious which components are using which bits of data, and as your application grows you’ll find this beneficial.</p>\n<p>通过创建更高阶的组件，你只能将数据定义在一个位置，使重构更容易。更高阶的函数创建者使你能够将大部分数据保留为私有，并且仅将数据片段暴露给真正需要的组件。通过这样做，你可以清楚地知道哪些组件正在使用哪些数据，并且随着应用程序的发展，你会发现这是有益的。</p>\n","excerpt":"<p>In this article we will discuss how to use Higher Order Components to keep your React applications tidy, well structured and easy to maintain. We’ll discuss how pure functions keep code clean and how these same principles can be applied to React components.<br>在这片文章里我们将讨论任何使用高阶组件保持你的react应用整洁，结构合理，易于维护。纯函数是如何保持代码整洁并且如何将这些原则应用到react组件中。","more":"</p>\n<h2 id=\"Pure-Functions\"><a href=\"#Pure-Functions\" class=\"headerlink\" title=\"Pure Functions\"></a><strong>Pure Functions</strong></h2><h2 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a><strong>纯函数</strong></h2><p>A function is considered pure if it adheres to the following properties:</p>\n<p>如果一个函数遵循以下几个规则那么他就是纯函数：</p>\n<ul>\n<li>All the data it deals with are declared as arguments</li>\n<li><p>函数处理的数据都是作为参数传递给函数。</p>\n</li>\n<li><p>It does not mutate data it was given or any other data (these are often referred to as side effects).</p>\n</li>\n<li><p>他不接受不确定的数据或者任何其他数据（他们通常是副作用的）。</p>\n</li>\n<li><p>Given the same input, it will always return the same output.</p>\n</li>\n<li>同样的输入，函数将得到同样的输出。</li>\n</ul>\n<p>For example, the add function below is pure:</p>\n<p>举个例子，下面的add函数就是个纯函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>However, the function badAdd below is impure:</p>\n<p>下面badadd就是不是纯函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">badAdd</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This function is not pure because it references data that it hasn’t directly been given. As a result, it’s possible to call this function with the same input and get different output:</p>\n<p>这个函数之所以不是纯函数是因为他所引用的数据不是直接给予的（不是通过参数传递，而是直接引用了外部全局变量。）。所以当你输入相同的数据时候可能得到不一样的输出。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">badAdd(<span class=\"number\">3</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">y = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">badAdd(<span class=\"number\">3</span>) <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>To read more about pure functions you can read “An introduction to reasonably pure programming” by Mark Brown.</p>\n<p>要了解更多关于纯函数的内容，你可以阅读一下Mark Brown写的“An introduction to reasonably pure programming”。</p>\n<h2 id=\"Higher-Order-Functions\"><a href=\"#Higher-Order-Functions\" class=\"headerlink\" title=\"Higher Order Functions\"></a><strong>Higher Order Functions</strong></h2><h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a><strong>高阶函数</strong></h2><p>A higher order function is a function that when called, returns another function. Often they also take a function as an argument, but this is not required for a function to be considered higher order.</p>\n<p>高阶函数的定义是，当一个函数被调用他将输出另一个函数。有时他们把函数作为参数，但是这个不是高阶函数的必要条件。</p>\n<p>Let’s say we have our <code>add</code> function from above, and we want to write some code so that when we call it we log the result to the <code>console</code> before returning the result. We’re unable to edit the <code>add</code> function, so instead we can create a new function:</p>\n<p>让我们再来看看前面说过的 <code>add</code> 函数，我们希望他在返回结果前，<code>console</code> 一下结果。我们不能改变 <code>add</code> 函数，所以我们要创建一个新函数来替代他：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAndLog</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = add(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We decide that logging results of functions is useful, and now we want to do the same with a subtract function. Rather than duplicate the above, we could write a higher order function that can take a function and return a new function that calls the given function and logs the result before then returning it:</p>\n<p>我们显示函数的记录结果是有用的，现在我们要对减法函数做同样的事情。而不是复制上述内容，我们可以编写一个更高阶的函数，它可以执行一个函数接受函数作为参数，被调用的函数会返回结果和显示记录，函数则会返回新的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logAndReturn</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = func.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Result'</span>, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now we can take this function <code>and</code> use it to add logging to add and <code>subtract</code>:</p>\n<p>现在我们可以使用这个函数为 <code>add</code> 和 <code>subtract</code> 函数添加显示记录：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addAndLog = logAndReturn(add);</span><br><span class=\"line\"></span><br><span class=\"line\">addAndLog(<span class=\"number\">4</span>, <span class=\"number\">4</span>) <span class=\"comment\">// 8 is returned, ‘Result 8’ is logged</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> subtractAndLog = logAndReturn(subtract);</span><br><span class=\"line\"></span><br><span class=\"line\">subtractAndLog(<span class=\"number\">4</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 1 is returned, ‘Result 1’ is logged;</span></span><br></pre></td></tr></table></figure>\n<p><code>logAndReturn</code> is a HOF because it takes a function as its argument and returns a new function that we can call. These are really useful for wrapping existing functions that you can’t change in behavior. For more information on this, check M. David Green’s article “Higher-Order Functions in JavaScript which goes into much more detail on the subject.</p>\n<p><code>logAndReturn</code> 就是一个高阶函数因为他接受一个函数作为参数，并且返回一个函数被我们调用。封装且不改变现有函数的内部实现是非常有用的。希望了解更多相关内容可以去看看M. David Green写的 “Higher-Order Functions in JavaScript”。</p>\n<p>Additionally you can check out this CodePen, which shows the above code in action.</p>\n<p>另外你可以去CodePen，那里有上面说到的代码。</p>\n<h2 id=\"Higher-Order-Components\"><a href=\"#Higher-Order-Components\" class=\"headerlink\" title=\"Higher Order Components\"></a><strong>Higher Order Components</strong></h2><h2 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a><strong>高阶组件</strong></h2><p>Moving into React land, we can use the same logic as above to take existing React components and give them some extra behaviours.</p>\n<p>现在我们讨论讨论React，上面讲到的逻辑我们同样可以在React组件上使用，以赋予他们更多的行为。</p>\n<p>In this section we’re going to use React Router, the de facto routing solution for React. If you’d like to get started with the library I highly recommend the React Router Tutorial on GitHub.</p>\n<p>在这节我们将使用React Router，这个是React的路由解决方案。如果你开始使用库，我强烈建议你使用GitHub上的React Router Tutorial。</p>\n<h2 id=\"React-Router’s-Link-component-React\"><a href=\"#React-Router’s-Link-component-React\" class=\"headerlink\" title=\"React Router’s Link component React\"></a><strong>React Router’s Link component React</strong></h2><h2 id=\"路由链接组件\"><a href=\"#路由链接组件\" class=\"headerlink\" title=\"路由链接组件\"></a><strong>路由链接组件</strong></h2><p>React Router provides a <code>&lt;Link&gt;</code> component that is used to link between pages in a React application. One of the properties that this <code>&lt;Link&gt;</code> component takes is <code>activeClassName</code>. When a <code>&lt;Link&gt;</code> has this property and it is currently active (the user is on a URL that the link points to), the component will be given this class, enabling the developer to style it.</p>\n<p>React 路由提供 <code>&lt;Link&gt;</code> 用于链接React应用里的页面。<code>&lt;Link&gt;</code> 组件其中一个属性是 <code>activeClassName</code>。当 <code>&lt;Link&gt;</code> 组件处于活动状态时使用了这个属性（用户经过链接时候的意思），组件将使用这个样类名，以便开发人员能够对其样式进行美化。</p>\n<p>This is a really useful feature, and in our hypothetical application we decide that we always want to use this property. However, after doing so we quickly discover that this is making all our <code>&lt;Link&gt;</code> components very verbose:</p>\n<p>这是一个非常有用的功能，在我们假设的应用程序中，我们决定我们总是使用这个属性。然而，很快我们会发现这会使 <code>&lt;Link&gt;</code> 组件变得臃肿：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> Home <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> About<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/contact\"</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span> Contact<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Notice that we are having to repeat the class name property every time. Not only does this make our components verbose, it also means that if we decide to change the class name we’ve got to do it in a lot of places.</p>\n<p>注意我们每次都必须重复使用那个类的属性名。这不仅使我们的组件臃肿，这也意味着如果我们决定改变类名，我们必须在很多地方进行修改。</p>\n<p>Instead, we can write a component that wraps the <code>&lt;Link&gt;</code> component:</p>\n<p>替换，我们要写一个组件去封装 <code>&lt;Link&gt;</code> 组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> AppLink=React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#123;this.props.to&#125;</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span>&gt;</span></span><br><span class=\"line\">                &#123;this.props.children&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>And now we can use this component, which tidies up our links:</p>\n<p>现在我们可以使用这个组件来整合我们的链接：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppLink</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">AppLink</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>In the React ecosystem these components are known as higher order components because they take an existing component and manipulate it slightly without changing the existing component. You can also think of these as wrapper components, but you’ll find them commonly referred to as higher order components in React-based content.</p>\n<p>在React生态系统中，这些组件被称为高阶组件，因为他们采用现有组件并对他们进行封装，但是并没有更改现有组件。你也可以将他们视为封装组件，但你会发现他们通常被称为 <code>React-based</code> 内容中的高阶组件。</p>\n<h2 id=\"Functional-Stateless-Components\"><a href=\"#Functional-Stateless-Components\" class=\"headerlink\" title=\"Functional, Stateless Components\"></a><strong>Functional, Stateless Components</strong></h2><h2 id=\"函数式无状态组件\"><a href=\"#函数式无状态组件\" class=\"headerlink\" title=\"函数式无状态组件\"></a><strong>函数式无状态组件</strong></h2><p>React 0.14 introduced support for functional, stateless components. These are components that have the following characteristics:</p>\n<p>React0.14开始提供函数式无状态组件，函数式无状态组件具有以下特点：</p>\n<ul>\n<li><p>They do not have any state.</p>\n</li>\n<li><p>他们没有state</p>\n</li>\n<li><p>They do not use any React lifecycle methods (such as componentWillMount()).</p>\n</li>\n<li><p>他们无法使用React生命周期函数（比如 componentWillMount()）</p>\n</li>\n<li><p>They only define the render method and nothing more.</p>\n</li>\n<li><p>他们只定义了 render 方法，没有其他的了。</p>\n</li>\n</ul>\n<p>When a component adheres to the above, we can define it as a function, rather than using React.createClass (or class App extends React.Component if you’re using ES2015 classes). For example, the two expressions below both produce the same component:</p>\n<p>当一个组件遵守上述内容时，我们可以将其定义为一个函数，而不是使用React.createClass（如果你使用了 ES2015  classes 你也可以使用class 来扩展你的React 组件）。下面的两个表达式产生相同的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> App = React.createClass(&#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>My name is &#123; this.props.name &#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> App = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>My name is &#123; props.name &#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>In the functional, stateless component instead of referring to this.props we’re instead passed props as an argument. You can read more about this on the React documentation.</p>\n<p>在函数式无状态组件中，不是引用this.props，而是将props用作参数。React文档有更多介绍。</p>\n<p>Because higher order components often wrap an existing component you’ll often find you can define them as a functional component. For the rest of this article I’ll do that whenever possible.</p>\n<p>因为更高阶的组件通常会封装一个现有的组件，所以您经常会发现可以将它们定义为函数组件。在本文的其余部分，我将尽可能地这样做。</p>\n<h2 id=\"Better-Higher-Order-Components\"><a href=\"#Better-Higher-Order-Components\" class=\"headerlink\" title=\"Better Higher Order Components\"></a><strong>Better Higher Order Components</strong></h2><h2 id=\"更好的高阶组件\"><a href=\"#更好的高阶组件\" class=\"headerlink\" title=\"更好的高阶组件\"></a><strong>更好的高阶组件</strong></h2><p>The above component works, but we can do much better. The AppLink component that we created isn’t quite fit for purpose.</p>\n<p>我们不只局限于组件可以正常运行，我们希望做的更好。我们创建的 <code>AppLink</code> 组件就不太适合。</p>\n<h2 id=\"Accepting-multiple-properties\"><a href=\"#Accepting-multiple-properties\" class=\"headerlink\" title=\"Accepting multiple properties\"></a><strong>Accepting multiple properties</strong></h2><h2 id=\"接受多个参数\"><a href=\"#接受多个参数\" class=\"headerlink\" title=\"接受多个参数\"></a><strong>接受多个参数</strong></h2><p>The <code>&lt;AppLink&gt;</code> component expects two properties:</p>\n<p><code>&lt;AppLink&gt;</code> 组件估计会有两个参数：</p>\n<ul>\n<li>this.props.to which is the URL the link should take the user to</li>\n<li><p>this.props.to 表示链接让用户访问的URL</p>\n</li>\n<li><p>this.props.children which is the text shown to the user</p>\n</li>\n<li>this.props.children 表示显示的文本</li>\n</ul>\n<p>However, the <code>&lt;Link&gt;</code> component accepts many more properties, and there might be a time when you want to pass extra properties along with the two above which we nearly always want to pass. We haven’t made <code>&lt;AppLink&gt;</code> very extensible by hard coding the exact properties we need.</p>\n<p>当然，<code>&lt;Link&gt;</code> 组件可以接受更多发属性，有时我们只是想组件允许传递额外的属性以及上述的两个属性。我们并没有通过代码属性让 <code>&lt;AppLink&gt;</code> 有很高的扩展性。</p>\n<h2 id=\"The-JSX-spread\"><a href=\"#The-JSX-spread\" class=\"headerlink\" title=\"The JSX spread\"></a><strong>The JSX spread</strong></h2><h2 id=\"JSX-传递\"><a href=\"#JSX-传递\" class=\"headerlink\" title=\"JSX 传递\"></a><strong>JSX 传递</strong></h2><p>JSX, the HTML-like syntax we use to define React elements, supports the spread operator for passing an object to a component as properties. For example, the code samples below achieve the same thing:</p>\n<p>JSX，一种类似于HTML的语法用于定义React组件，支持扩展操作符将对象作为属性传递给组件。例如，下面的代码示例实现了同样的事情：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> props=&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">&lt;Foo a=&#123;props.a &#125;b=&#123;props.b&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Foo &#123;...props&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>Using <code>{...props}</code> spreads each key in the object and passes it to <code>Foo</code> as an individual property.</p>\n<p>使用 <code>{... props}</code> 扩展对象中的每个键，并将其作为单个属性传递给 <code>Foo</code>。</p>\n<p>We can make use of this trick with <code>&lt;AppLink&gt;</code> so we support any arbitrary property that <code>&lt;Link&gt;</code> supports. By doing this we also future proof ourselves; if <code>&lt;Link&gt;</code> adds any new properties in the future our wrapper component will already support them. While we’re at it, I’m also going to change  <code>AppLink</code> to be a functional component.</p>\n<p>我们可以利用 <code>&lt;AppLink&gt;</code> 这个技巧，让我们支持 <code>&lt;Link&gt;</code> 支持的任意属性。通这样做，我们也将来证明自己；如果 <code>&lt;Link&gt;</code> 在将来添加任何新的属性，我们的包装器组件将已经支持它们。在我们这样做的时候，我同时要将 <code>AppLink</code> 改成函数式组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> AppLink = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span> /&gt;</span>;</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Now <Link> will accept any properties and pass them through. Note that we also can use the self closing form instead of explicitly referencing {props.children} in-between the <Link> tags. React allows children to be passed as a regular prop or as child elements of a component between the opening and closing tag.</p>\n<p>现在将接受任何属性并传递它们。请注意，我们还可以使用笔和标签，而不是在标签之间传递{props.children}。React允许 children 作为常规 prop 或作为在开始和结束标签之间的组件的子元素进行传递。</p>\n<h2 id=\"Property-ordering-in-React\"><a href=\"#Property-ordering-in-React\" class=\"headerlink\" title=\"Property ordering in React\"></a><strong>Property ordering in React</strong></h2><h2 id=\"React中属性的排序\"><a href=\"#React中属性的排序\" class=\"headerlink\" title=\"React中属性的排序\"></a><strong>React中属性的排序</strong></h2><p>Imagine that for one specific link on your page, you have to use a different activeClassName. You try passing it into <AppLink>, since we pass all properties through:</p>\n<p>想象一下，对于页面上的一个特定链接，你必须使用不同的 activeClassName。尝试将其传递到 <AppLink> 中，我们通过以下方式传递所有属性： </p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;AppLink to=“/special-link” activeClassName=“special-active” &gt;</span><br><span class=\"line\">    Special Secret Link</span><br><span class=\"line\">&lt;<span class=\"regexp\">/AppLink&gt;</span></span><br></pre></td></tr></table></figure>\n<p>However, this doesn’t work. The reason is because of the ordering of properties when we render the <code>&lt;Link&gt;</code> component:</p>\n<p>但是，这不行。渲染 <code>&lt;Link&gt;</code> 组件时属性的顺序：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">Link</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span> /&gt;</span>;</span></span><br></pre></td></tr></table></figure>\n<p>When you have the same property multiple times in a React component, the last declaration wins. This means that our last <code>activeClassName=&quot;active-link&quot;</code> declaration will always win, since it’s placed after <code>{...this.props}</code>. To fix this we can reorder the properties so we spread this.props last. This means that we set sensible defaults that we’d like to use, but the user can override them if they really need to:</p>\n<p>当您在React组件中多次具有相同的属性时，最后一个会被使用。这就意味着放在 <code>{...this.props}</code> 后面的 <code>activeClassName=&quot;active-link&quot;</code> 会被使用。我们可以把 this.props 放在最后来解决这个问题。这意味着如果用户真的需要我们可以设置一些想要合理的默认值，但是这些默认值是可以被覆盖：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">activeClassName</span>=<span class=\"string\">\"active-link\"</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span>;</span></span><br></pre></td></tr></table></figure>\n<p>By creating higher order components that wrap existing ones but with additional behavior, we keep our code base clean and defend against future changes by not repeating properties and keeping their values in just one place.</p>\n<p>通过创建一个逛街组件可以使现有的组件得到额外的功能，我们尽量保持我们的代码简洁，并且通过不重复的属性来应对未来的变化，同时把他们的值保存在一个地方。</p>\n<h2 id=\"Higher-Order-Component-Creators\"><a href=\"#Higher-Order-Component-Creators\" class=\"headerlink\" title=\"Higher Order Component Creators\"></a><strong>Higher Order Component Creators</strong></h2><h2 id=\"高阶组件创造者\"><a href=\"#高阶组件创造者\" class=\"headerlink\" title=\"高阶组件创造者\"></a><strong>高阶组件创造者</strong></h2><p>Often you’ll have a number of components that you’ll need to wrap in the same behavior. This is very similar to earlier in this article when we wrapped <code>add</code> and <code>subtract</code> to add logging to them.</p>\n<p>通常你需要给很多组件添加同样的方法。这就和我们前面说到的给 <code>add</code> 函数和 <code>subtract</code> 函数添加显示输出一样。</p>\n<p>Let’s imagine in your application you have an object that contains information on the current user who is authenticated on the system. You need some of your React components to be able to access this information, but rather than blindly making it accessible for every component you want to be more strict about which components receive the information.</p>\n<p>让我们想象一下，在你的应用程序中，你有一个对象，其中包含关于系统进行身份验证的当前用户的信息。你需要你的 React 组件可以访问这些信息，而不是盲目地使每个组件都可以访问，你更希望严格地控制哪些组件接收信息。</p>\n<p>The way to solve this is to create a function that we can call with a React component. The function will then return a new React component that will render the given component but with an extra property which will give it access to the user information.</p>\n<p>解决的方法就是我们可以创建一个函数去调用一个 React 组件。函数会返回一个可以访问用户信息并且把原来组件进行渲染的新 React 组件。</p>\n<p>That sounds pretty complicated, but it’s made more straightforward with some code:</p>\n<p>听起来很复杂，但是通过一些代码就可以很简洁了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapWithUser</span>(<span class=\"params\">Component</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// information that we don’t want everything to access</span></span><br><span class=\"line\">    <span class=\"comment\">// 收限制的用户信息</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> secretUserInfo = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">'Jack Franklin'</span>,</span><br><span class=\"line\">        <span class=\"attr\">favouriteColour</span>:<span class=\"string\">'blue'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return a newly generated React component</span></span><br><span class=\"line\">    <span class=\"comment\">// using a functional, stateless component</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个新的 React 组件</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用一个无状态函数式组件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// pass in the user variable as a property, along with</span></span><br><span class=\"line\">        <span class=\"comment\">// all the other props that we might be given</span></span><br><span class=\"line\">        <span class=\"comment\">// 用户信息作为属性进行传递</span></span><br><span class=\"line\">        <span class=\"comment\">// 其他属性我们可以自定义</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> <span class=\"attr\">user</span>=<span class=\"string\">&#123;secretUserInfo&#125;</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>The function takes a React component (which is easy to spot given React components have to have capital letters at the beginning) and returns a new function that will render the component it was given with an extra property of user, which is set to the <code>secretUserInfo</code>.</p>\n<p>函数通过一个React组件（自定义的React组件必须有大写字母开头）并返回一个新的函数，它将使用设置在 <code>secretUserInfo</code> 里的用户的属性来渲染那个组件。</p>\n<p>Now let’s take a component, <code>&lt;AppHeader&gt;</code>, which wants access to this information so it can display the logged in user:</p>\n<p>现在我们有一个 <code>&lt;AppHeader&gt;</code> 组件需要这些信息，以便把登陆的用户信息展示出来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> AppHeader=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(props.user)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Logged in as &#123;props.user.name&#125; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You need to login<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The final step is to connect this component up so it is given <code>this.props.user</code>. We can create a new component by passing this one into our <code>wrapWithUser</code> function.</p>\n<p>最后一步是将此组件连接起来，我们可以通过 <code>wrapWithUser</code> 函数创建新的组件，以便把 <code>this.props.user</code> 传递给他。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ConnectedAppHeader = wrapWithUser(AppHeader);</span><br></pre></td></tr></table></figure>\n<p>We now have a <code>&lt;ConnectedAppHeader&gt;</code> component that can be rendered, and will have access to the <code>user</code> object.</p>\n<p>现在我们有了 <code>&lt;ConnectedAppHeader&gt;</code> 组件可以访问 <code>user</code> 对象，并且渲染原来的组件。</p>\n<p>I chose to call the component <code>ConnectedAppHeader</code> because I think of it as being connected with some extra piece of data that not every component is given access to.</p>\n<p>我给这个组件起名叫 <code>ConnectedAppHeader</code> 因为他传递了一些不希望所有组件都可以使用的额外数据。</p>\n<p>This pattern is very common in <strong>React</strong> libraries, particularly in <strong>Redux</strong>, so being aware of how it works and the reasons it’s being used will help you as your application grows and you rely on other third party libraries that use this approach.</p>\n<p>这种模式在 <strong>React</strong> 库中非常常见，特别是在 <strong>Redux</strong> 中，知道你依赖的第三方库是如何工作的，它被使用的原因将帮助你随着你的应用程序一起成长。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><strong>Conclusion</strong></h2><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h2><p>This article has shown how, by applying principles of functional programming such as pure functions and higher order components to React, you can create a codebase that’s easier to maintain and work with on a daily basis.</p>\n<p>这篇文章即将结束，通过应用诸如纯函数和更高阶函数的函数式编程的原理应用到React，您可以创建一个更容易维护和使用的代码库。</p>\n<p>By creating higher order components you’re able to keep data defined in only one place, making refactoring easier. Higher order function creators enable you to keep most data private and only expose pieces of data to the components that really need it. By doing this you make it obvious which components are using which bits of data, and as your application grows you’ll find this beneficial.</p>\n<p>通过创建更高阶的组件，你只能将数据定义在一个位置，使重构更容易。更高阶的函数创建者使你能够将大部分数据保留为私有，并且仅将数据片段暴露给真正需要的组件。通过这样做，你可以清楚地知道哪些组件正在使用哪些数据，并且随着应用程序的发展，你会发现这是有益的。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjb9af1vp0005m6i6h2cjpz47","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1vw000am6i6fmdbpbb6"},{"post_id":"cjb9af1va0000m6i6e9ln7nni","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1w0000em6i6k1kj4e70"},{"post_id":"cjb9af1vq0006m6i6fi0gs0rx","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1w3000gm6i6iaxklcy0"},{"post_id":"cjb9af1vu0009m6i60e3h3ho4","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1w5000jm6i6j78c90pe"},{"post_id":"cjb9af1vi0001m6i6u1px7q3m","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1w9000lm6i6w9z6rxxq"},{"post_id":"cjb9af1vw000bm6i6fj787y9s","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1wb000nm6i62newg7ec"},{"post_id":"cjb9af1w1000fm6i6adcmwloe","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1wc000pm6i6w0ikdevg"},{"post_id":"cjb9af1vn0004m6i6ju6syv0g","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1wd000qm6i6mfhqc5s6"},{"post_id":"cjb9af1w5000km6i6wqmjy6b6","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1wd000sm6i6cv501qc6"},{"post_id":"cjb9af1w9000mm6i68f6kes2y","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1wd000tm6i6d3btoyqp"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","category_id":"cjb9af1vk0002m6i6xvvbtxty","_id":"cjb9af1xr0042m6i6jck6atd9"}],"PostTag":[{"post_id":"cjb9af1va0000m6i6e9ln7nni","tag_id":"cjb9af1vm0003m6i6kl8b2q2z","_id":"cjb9af1wg000xm6i6t58gmzc7"},{"post_id":"cjb9af1va0000m6i6e9ln7nni","tag_id":"cjb9af1vr0008m6i6sq9w7991","_id":"cjb9af1wg000ym6i6liieoj3l"},{"post_id":"cjb9af1va0000m6i6e9ln7nni","tag_id":"cjb9af1vz000dm6i61swqu2vo","_id":"cjb9af1wh0010m6i6m8t9i714"},{"post_id":"cjb9af1va0000m6i6e9ln7nni","tag_id":"cjb9af1w5000im6i6cp9og054","_id":"cjb9af1wh0011m6i6942588l2"},{"post_id":"cjb9af1va0000m6i6e9ln7nni","tag_id":"cjb9af1wb000om6i61p8zn14p","_id":"cjb9af1wi0013m6i6uxir0gq2"},{"post_id":"cjb9af1va0000m6i6e9ln7nni","tag_id":"cjb9af1wd000rm6i63ntreep1","_id":"cjb9af1wi0014m6i6lyaa9x4k"},{"post_id":"cjb9af1va0000m6i6e9ln7nni","tag_id":"cjb9af1we000um6i6mslxbl4w","_id":"cjb9af1wj0016m6i6ekjyorpe"},{"post_id":"cjb9af1va0000m6i6e9ln7nni","tag_id":"cjb9af1we000vm6i6ty38mtt8","_id":"cjb9af1wj0017m6i6ll1hxgqq"},{"post_id":"cjb9af1vi0001m6i6u1px7q3m","tag_id":"cjb9af1wf000wm6i6wb8vuc8c","_id":"cjb9af1wl001am6i6wpzb21s7"},{"post_id":"cjb9af1vi0001m6i6u1px7q3m","tag_id":"cjb9af1wg000zm6i60cim6jrt","_id":"cjb9af1wl001bm6i6n4npjvhz"},{"post_id":"cjb9af1vi0001m6i6u1px7q3m","tag_id":"cjb9af1wh0012m6i6bo2n0pw0","_id":"cjb9af1wm001dm6i6mjjiy6wo"},{"post_id":"cjb9af1vi0001m6i6u1px7q3m","tag_id":"cjb9af1wj0015m6i61s3mukly","_id":"cjb9af1wm001em6i6blm9fby5"},{"post_id":"cjb9af1vi0001m6i6u1px7q3m","tag_id":"cjb9af1wk0018m6i6i328zcim","_id":"cjb9af1wn001gm6i6k18co7r4"},{"post_id":"cjb9af1vn0004m6i6ju6syv0g","tag_id":"cjb9af1wk0019m6i6f18s9vy4","_id":"cjb9af1wp001km6i6d2v20aix"},{"post_id":"cjb9af1vn0004m6i6ju6syv0g","tag_id":"cjb9af1wl001cm6i6lhlpqtzg","_id":"cjb9af1wp001lm6i663kipqkc"},{"post_id":"cjb9af1vn0004m6i6ju6syv0g","tag_id":"cjb9af1wm001fm6i631v6p2n1","_id":"cjb9af1wp001nm6i6lw0g4l64"},{"post_id":"cjb9af1vn0004m6i6ju6syv0g","tag_id":"cjb9af1wn001hm6i6powcja89","_id":"cjb9af1wq001om6i6aexhfkp3"},{"post_id":"cjb9af1vn0004m6i6ju6syv0g","tag_id":"cjb9af1wo001im6i63s6p8s97","_id":"cjb9af1wq001qm6i61thnbwk4"},{"post_id":"cjb9af1vp0005m6i6h2cjpz47","tag_id":"cjb9af1wo001jm6i6ob9f3biv","_id":"cjb9af1ws001tm6i6hwfthzbr"},{"post_id":"cjb9af1vp0005m6i6h2cjpz47","tag_id":"cjb9af1wp001mm6i6qxdp467b","_id":"cjb9af1ws001um6i6ivg282jo"},{"post_id":"cjb9af1vp0005m6i6h2cjpz47","tag_id":"cjb9af1wq001pm6i6ujlu703h","_id":"cjb9af1wt001wm6i6kwo5k14i"},{"post_id":"cjb9af1vp0005m6i6h2cjpz47","tag_id":"cjb9af1wr001rm6i6ks329wud","_id":"cjb9af1wt001xm6i6wtadcm47"},{"post_id":"cjb9af1vq0006m6i6fi0gs0rx","tag_id":"cjb9af1wo001jm6i6ob9f3biv","_id":"cjb9af1wv0022m6i6tg3bdi57"},{"post_id":"cjb9af1vq0006m6i6fi0gs0rx","tag_id":"cjb9af1wp001mm6i6qxdp467b","_id":"cjb9af1wv0023m6i6nk1u5eri"},{"post_id":"cjb9af1vq0006m6i6fi0gs0rx","tag_id":"cjb9af1wq001pm6i6ujlu703h","_id":"cjb9af1ww0025m6i681vkyvl0"},{"post_id":"cjb9af1vq0006m6i6fi0gs0rx","tag_id":"cjb9af1wr001rm6i6ks329wud","_id":"cjb9af1ww0026m6i6iwmkdtc4"},{"post_id":"cjb9af1vq0006m6i6fi0gs0rx","tag_id":"cjb9af1wu0020m6i6cnlt9llr","_id":"cjb9af1ww0028m6i6yzkgoei3"},{"post_id":"cjb9af1vu0009m6i60e3h3ho4","tag_id":"cjb9af1wp001mm6i6qxdp467b","_id":"cjb9af1wz002em6i6hapyv5ro"},{"post_id":"cjb9af1vu0009m6i60e3h3ho4","tag_id":"cjb9af1wq001pm6i6ujlu703h","_id":"cjb9af1wz002fm6i6mpsla59c"},{"post_id":"cjb9af1vu0009m6i60e3h3ho4","tag_id":"cjb9af1wr001rm6i6ks329wud","_id":"cjb9af1wz002hm6i66dbdzdry"},{"post_id":"cjb9af1vu0009m6i60e3h3ho4","tag_id":"cjb9af1wf000wm6i6wb8vuc8c","_id":"cjb9af1wz002im6i6d8ddgodx"},{"post_id":"cjb9af1vu0009m6i60e3h3ho4","tag_id":"cjb9af1wx002am6i6jqu0ryn5","_id":"cjb9af1x0002km6i6r1lzvvf7"},{"post_id":"cjb9af1vu0009m6i60e3h3ho4","tag_id":"cjb9af1wx002bm6i6xefrazkq","_id":"cjb9af1x0002lm6i68jexjrzl"},{"post_id":"cjb9af1vu0009m6i60e3h3ho4","tag_id":"cjb9af1wy002cm6i6pqpssiqe","_id":"cjb9af1x1002nm6i6pvaxfl0x"},{"post_id":"cjb9af1vw000bm6i6fj787y9s","tag_id":"cjb9af1wy002dm6i6h8e5c830","_id":"cjb9af1x3002sm6i6hnsuotdx"},{"post_id":"cjb9af1vw000bm6i6fj787y9s","tag_id":"cjb9af1wx002bm6i6xefrazkq","_id":"cjb9af1x3002tm6i64mtui7ab"},{"post_id":"cjb9af1vw000bm6i6fj787y9s","tag_id":"cjb9af1wp001mm6i6qxdp467b","_id":"cjb9af1x4002vm6i6kimsrxa3"},{"post_id":"cjb9af1vw000bm6i6fj787y9s","tag_id":"cjb9af1wq001pm6i6ujlu703h","_id":"cjb9af1x5002wm6i6t2hot083"},{"post_id":"cjb9af1vw000bm6i6fj787y9s","tag_id":"cjb9af1wr001rm6i6ks329wud","_id":"cjb9af1x5002ym6i6dfbcx7o5"},{"post_id":"cjb9af1vw000bm6i6fj787y9s","tag_id":"cjb9af1x1002pm6i631mx4ky5","_id":"cjb9af1x5002zm6i6hdf5f0oy"},{"post_id":"cjb9af1vw000bm6i6fj787y9s","tag_id":"cjb9af1x2002qm6i64p5qhe4d","_id":"cjb9af1x60031m6i6wb7kmcb9"},{"post_id":"cjb9af1w1000fm6i6adcmwloe","tag_id":"cjb9af1wo001jm6i6ob9f3biv","_id":"cjb9af1x70034m6i666y02xwv"},{"post_id":"cjb9af1w1000fm6i6adcmwloe","tag_id":"cjb9af1wp001mm6i6qxdp467b","_id":"cjb9af1x70035m6i6c7qpc82b"},{"post_id":"cjb9af1w1000fm6i6adcmwloe","tag_id":"cjb9af1wq001pm6i6ujlu703h","_id":"cjb9af1x70037m6i6vm21akug"},{"post_id":"cjb9af1w1000fm6i6adcmwloe","tag_id":"cjb9af1wr001rm6i6ks329wud","_id":"cjb9af1x70038m6i6u9vuq40u"},{"post_id":"cjb9af1w1000fm6i6adcmwloe","tag_id":"cjb9af1x60032m6i6bh917gyn","_id":"cjb9af1x8003am6i6mcl4okdx"},{"post_id":"cjb9af1w3000hm6i6grf886ix","tag_id":"cjb9af1x60033m6i6ap5e4uee","_id":"cjb9af1xa003em6i6ateigsbs"},{"post_id":"cjb9af1w3000hm6i6grf886ix","tag_id":"cjb9af1x70036m6i6sev8kq6n","_id":"cjb9af1xa003fm6i6irzevnch"},{"post_id":"cjb9af1w3000hm6i6grf886ix","tag_id":"cjb9af1x80039m6i65ax9vml3","_id":"cjb9af1xa003hm6i6nukjwiv6"},{"post_id":"cjb9af1w3000hm6i6grf886ix","tag_id":"cjb9af1x8003bm6i68d0vbxfh","_id":"cjb9af1xa003im6i64vab0zq3"},{"post_id":"cjb9af1w3000hm6i6grf886ix","tag_id":"cjb9af1x8003cm6i6rjp8t53u","_id":"cjb9af1xb003km6i6fljdtgt7"},{"post_id":"cjb9af1w5000km6i6wqmjy6b6","tag_id":"cjb9af1x9003dm6i6y2otybcj","_id":"cjb9af1xc003nm6i6zialyc3i"},{"post_id":"cjb9af1w5000km6i6wqmjy6b6","tag_id":"cjb9af1xa003gm6i68odyxnzt","_id":"cjb9af1xc003om6i6m907ni5e"},{"post_id":"cjb9af1w5000km6i6wqmjy6b6","tag_id":"cjb9af1xa003jm6i62qsnnyu5","_id":"cjb9af1xc003qm6i6nthz6mmw"},{"post_id":"cjb9af1w5000km6i6wqmjy6b6","tag_id":"cjb9af1xb003lm6i644khc87t","_id":"cjb9af1xd003rm6i6jg8jeq85"},{"post_id":"cjb9af1w9000mm6i68f6kes2y","tag_id":"cjb9af1xb003mm6i6jcu2u9f9","_id":"cjb9af1xe003vm6i6k5r4vg1i"},{"post_id":"cjb9af1w9000mm6i68f6kes2y","tag_id":"cjb9af1xc003pm6i6ei7eqawl","_id":"cjb9af1xe003wm6i6ot874vaz"},{"post_id":"cjb9af1w9000mm6i68f6kes2y","tag_id":"cjb9af1xd003sm6i6p7srcttd","_id":"cjb9af1xe003xm6i6y8ew4jg5"},{"post_id":"cjb9af1w9000mm6i68f6kes2y","tag_id":"cjb9af1xd003tm6i60smo46zz","_id":"cjb9af1xe003ym6i6ik3lb0xa"},{"post_id":"cjb9af1w9000mm6i68f6kes2y","tag_id":"cjb9af1wk0019m6i6f18s9vy4","_id":"cjb9af1xe003zm6i6s7rj268m"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1wy002dm6i6h8e5c830","_id":"cjb9af1xt0044m6i6fakh6h8n"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1wx002bm6i6xefrazkq","_id":"cjb9af1xt0045m6i6n4ud1kmd"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1wp001mm6i6qxdp467b","_id":"cjb9af1xt0046m6i6ouhck3i1"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1wq001pm6i6ujlu703h","_id":"cjb9af1xu0047m6i6ctr1gai0"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1wr001rm6i6ks329wud","_id":"cjb9af1xu0048m6i63wpktcrd"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1x1002pm6i631mx4ky5","_id":"cjb9af1xu0049m6i6cpjipgoj"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1x2002qm6i64p5qhe4d","_id":"cjb9af1xu004am6i6aa311o4g"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1wf000wm6i6wb8vuc8c","_id":"cjb9af1xu004bm6i6wnixgh3c"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1xq0041m6i6573luj4e","_id":"cjb9af1xu004cm6i6k4cgc1ae"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1wy002cm6i6pqpssiqe","_id":"cjb9af1xu004dm6i68y5d067y"},{"post_id":"cjb9af1xo0040m6i6qboyw7um","tag_id":"cjb9af1xr0043m6i67oknhtd2","_id":"cjb9af1xu004em6i6bc3n9kjt"}],"Tag":[{"name":"css布局","_id":"cjb9af1vm0003m6i6kl8b2q2z"},{"name":"css","_id":"cjb9af1vr0008m6i6sq9w7991"},{"name":"两栏","_id":"cjb9af1vz000dm6i61swqu2vo"},{"name":"三栏","_id":"cjb9af1w5000im6i6cp9og054"},{"name":"圣杯","_id":"cjb9af1wb000om6i61p8zn14p"},{"name":"双飞翼","_id":"cjb9af1wd000rm6i63ntreep1"},{"name":"bfc","_id":"cjb9af1we000um6i6mslxbl4w"},{"name":"块格式化上下文","_id":"cjb9af1we000vm6i6ty38mtt8"},{"name":"react","_id":"cjb9af1wf000wm6i6wb8vuc8c"},{"name":"state","_id":"cjb9af1wg000zm6i60cim6jrt"},{"name":"props","_id":"cjb9af1wh0012m6i6bo2n0pw0"},{"name":"组件沟通","_id":"cjb9af1wj0015m6i61s3mukly"},{"name":"信息传递","_id":"cjb9af1wk0018m6i6i328zcim"},{"name":"ubuntu","_id":"cjb9af1wk0019m6i6f18s9vy4"},{"name":"python","_id":"cjb9af1wl001cm6i6lhlpqtzg"},{"name":"版本","_id":"cjb9af1wm001fm6i631v6p2n1"},{"name":"版本管理","_id":"cjb9af1wn001hm6i6powcja89"},{"name":"切换","_id":"cjb9af1wo001im6i63s6p8s97"},{"name":"webpack","_id":"cjb9af1wo001jm6i6ob9f3biv"},{"name":"前端","_id":"cjb9af1wp001mm6i6qxdp467b"},{"name":"js","_id":"cjb9af1wq001pm6i6ujlu703h"},{"name":"javascript","_id":"cjb9af1wr001rm6i6ks329wud"},{"name":"integrations","_id":"cjb9af1wu0020m6i6cnlt9llr"},{"name":"高阶函数","_id":"cjb9af1wx002am6i6jqu0ryn5"},{"name":"纯函数","_id":"cjb9af1wx002bm6i6xefrazkq"},{"name":"高阶组件","_id":"cjb9af1wy002cm6i6pqpssiqe"},{"name":"pure funtion","_id":"cjb9af1wy002dm6i6h8e5c830"},{"name":"side effects","_id":"cjb9af1x1002pm6i631mx4ky5"},{"name":"副作用","_id":"cjb9af1x2002qm6i64p5qhe4d"},{"name":"shimming","_id":"cjb9af1x60032m6i6bh917gyn"},{"name":"reduxe","_id":"cjb9af1x60033m6i6ap5e4uee"},{"name":"redux-saga","_id":"cjb9af1x70036m6i6sev8kq6n"},{"name":"effect","_id":"cjb9af1x80039m6i65ax9vml3"},{"name":"dispatch","_id":"cjb9af1x8003bm6i68d0vbxfh"},{"name":"reducer","_id":"cjb9af1x8003cm6i6rjp8t53u"},{"name":"npm","_id":"cjb9af1x9003dm6i6y2otybcj"},{"name":"semver","_id":"cjb9af1xa003gm6i68odyxnzt"},{"name":"package","_id":"cjb9af1xa003jm6i62qsnnyu5"},{"name":"包版本管理","_id":"cjb9af1xb003lm6i644khc87t"},{"name":"CI","_id":"cjb9af1xb003mm6i6jcu2u9f9"},{"name":"持续集成","_id":"cjb9af1xc003pm6i6ei7eqawl"},{"name":"jenkins","_id":"cjb9af1xd003sm6i6p7srcttd"},{"name":"continuous integration","_id":"cjb9af1xd003tm6i60smo46zz"},{"name":"组件","_id":"cjb9af1xq0041m6i6573luj4e"},{"name":"Higher Order Components","_id":"cjb9af1xr0043m6i67oknhtd2"}]}}